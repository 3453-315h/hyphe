#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:twisted
#

from thrift.Thrift import TType, TMessageType, TException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class MemoryStructureException(TException):
  """
  Attributes:
   - msg
   - stacktrace
   - classname
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'msg', None, None, ), # 1
    (2, TType.STRING, 'stacktrace', None, None, ), # 2
    (3, TType.STRING, 'classname', None, None, ), # 3
  )

  def __init__(self, msg=None, stacktrace=None, classname=None,):
    self.msg = msg
    self.stacktrace = stacktrace
    self.classname = classname

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.msg = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.stacktrace = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.classname = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MemoryStructureException')
    if self.msg is not None:
      oprot.writeFieldBegin('msg', TType.STRING, 1)
      oprot.writeString(self.msg)
      oprot.writeFieldEnd()
    if self.stacktrace is not None:
      oprot.writeFieldBegin('stacktrace', TType.STRING, 2)
      oprot.writeString(self.stacktrace)
      oprot.writeFieldEnd()
    if self.classname is not None:
      oprot.writeFieldBegin('classname', TType.STRING, 3)
      oprot.writeString(self.classname)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ObjectNotFoundException(TException):
  """
  Attributes:
   - msg
   - stacktrace
   - classname
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'msg', None, None, ), # 1
    (2, TType.STRING, 'stacktrace', None, None, ), # 2
    (3, TType.STRING, 'classname', None, None, ), # 3
  )

  def __init__(self, msg=None, stacktrace=None, classname=None,):
    self.msg = msg
    self.stacktrace = stacktrace
    self.classname = classname

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.msg = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.stacktrace = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.classname = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ObjectNotFoundException')
    if self.msg is not None:
      oprot.writeFieldBegin('msg', TType.STRING, 1)
      oprot.writeString(self.msg)
      oprot.writeFieldEnd()
    if self.stacktrace is not None:
      oprot.writeFieldBegin('stacktrace', TType.STRING, 2)
      oprot.writeString(self.stacktrace)
      oprot.writeFieldEnd()
    if self.classname is not None:
      oprot.writeFieldBegin('classname', TType.STRING, 3)
      oprot.writeString(self.classname)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PageItem:
  """
  Attributes:
   - id
   - url
   - lru
   - crawlerTimestamp
   - httpStatusCode
   - depth
   - errorCode
   - isFullPrecision
   - isNode
   - metadataItems
   - creationDate
   - lastModificationDate
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'id', None, None, ), # 1
    (2, TType.STRING, 'url', None, None, ), # 2
    (3, TType.STRING, 'lru', None, None, ), # 3
    (4, TType.STRING, 'crawlerTimestamp', None, None, ), # 4
    (5, TType.I32, 'httpStatusCode', None, None, ), # 5
    (6, TType.I32, 'depth', None, None, ), # 6
    (7, TType.STRING, 'errorCode', None, None, ), # 7
    (8, TType.BOOL, 'isFullPrecision', None, False, ), # 8
    (9, TType.BOOL, 'isNode', None, None, ), # 9
    (10, TType.MAP, 'metadataItems', (TType.STRING,None,TType.SET,(TType.STRING,None)), None, ), # 10
    (11, TType.STRING, 'creationDate', None, None, ), # 11
    (12, TType.STRING, 'lastModificationDate', None, None, ), # 12
  )

  def __init__(self, id=None, url=None, lru=None, crawlerTimestamp=None, httpStatusCode=None, depth=None, errorCode=None, isFullPrecision=thrift_spec[8][4], isNode=None, metadataItems=None, creationDate=None, lastModificationDate=None,):
    self.id = id
    self.url = url
    self.lru = lru
    self.crawlerTimestamp = crawlerTimestamp
    self.httpStatusCode = httpStatusCode
    self.depth = depth
    self.errorCode = errorCode
    self.isFullPrecision = isFullPrecision
    self.isNode = isNode
    self.metadataItems = metadataItems
    self.creationDate = creationDate
    self.lastModificationDate = lastModificationDate

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.url = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.lru = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.crawlerTimestamp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.httpStatusCode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.depth = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.errorCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.BOOL:
          self.isFullPrecision = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.BOOL:
          self.isNode = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.MAP:
          self.metadataItems = {}
          (_ktype1, _vtype2, _size0 ) = iprot.readMapBegin() 
          for _i4 in xrange(_size0):
            _key5 = iprot.readString();
            _val6 = set()
            (_etype10, _size7) = iprot.readSetBegin()
            for _i11 in xrange(_size7):
              _elem12 = iprot.readString();
              _val6.add(_elem12)
            iprot.readSetEnd()
            self.metadataItems[_key5] = _val6
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.creationDate = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.lastModificationDate = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PageItem')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.STRING, 1)
      oprot.writeString(self.id)
      oprot.writeFieldEnd()
    if self.url is not None:
      oprot.writeFieldBegin('url', TType.STRING, 2)
      oprot.writeString(self.url)
      oprot.writeFieldEnd()
    if self.lru is not None:
      oprot.writeFieldBegin('lru', TType.STRING, 3)
      oprot.writeString(self.lru)
      oprot.writeFieldEnd()
    if self.crawlerTimestamp is not None:
      oprot.writeFieldBegin('crawlerTimestamp', TType.STRING, 4)
      oprot.writeString(self.crawlerTimestamp)
      oprot.writeFieldEnd()
    if self.httpStatusCode is not None:
      oprot.writeFieldBegin('httpStatusCode', TType.I32, 5)
      oprot.writeI32(self.httpStatusCode)
      oprot.writeFieldEnd()
    if self.depth is not None:
      oprot.writeFieldBegin('depth', TType.I32, 6)
      oprot.writeI32(self.depth)
      oprot.writeFieldEnd()
    if self.errorCode is not None:
      oprot.writeFieldBegin('errorCode', TType.STRING, 7)
      oprot.writeString(self.errorCode)
      oprot.writeFieldEnd()
    if self.isFullPrecision is not None:
      oprot.writeFieldBegin('isFullPrecision', TType.BOOL, 8)
      oprot.writeBool(self.isFullPrecision)
      oprot.writeFieldEnd()
    if self.isNode is not None:
      oprot.writeFieldBegin('isNode', TType.BOOL, 9)
      oprot.writeBool(self.isNode)
      oprot.writeFieldEnd()
    if self.metadataItems is not None:
      oprot.writeFieldBegin('metadataItems', TType.MAP, 10)
      oprot.writeMapBegin(TType.STRING, TType.SET, len(self.metadataItems))
      for kiter13,viter14 in self.metadataItems.items():
        oprot.writeString(kiter13)
        oprot.writeSetBegin(TType.STRING, len(viter14))
        for iter15 in viter14:
          oprot.writeString(iter15)
        oprot.writeSetEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.creationDate is not None:
      oprot.writeFieldBegin('creationDate', TType.STRING, 11)
      oprot.writeString(self.creationDate)
      oprot.writeFieldEnd()
    if self.lastModificationDate is not None:
      oprot.writeFieldBegin('lastModificationDate', TType.STRING, 12)
      oprot.writeString(self.lastModificationDate)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NodeLink:
  """
  Attributes:
   - id
   - sourceLRU
   - targetLRU
   - weight
   - creationDate
   - lastModificationDate
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'id', None, None, ), # 1
    (2, TType.STRING, 'sourceLRU', None, None, ), # 2
    (3, TType.STRING, 'targetLRU', None, None, ), # 3
    (4, TType.I32, 'weight', None, 1, ), # 4
    (5, TType.STRING, 'creationDate', None, None, ), # 5
    (6, TType.STRING, 'lastModificationDate', None, None, ), # 6
  )

  def __init__(self, id=None, sourceLRU=None, targetLRU=None, weight=thrift_spec[4][4], creationDate=None, lastModificationDate=None,):
    self.id = id
    self.sourceLRU = sourceLRU
    self.targetLRU = targetLRU
    self.weight = weight
    self.creationDate = creationDate
    self.lastModificationDate = lastModificationDate

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.sourceLRU = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.targetLRU = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.weight = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.creationDate = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.lastModificationDate = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('NodeLink')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.STRING, 1)
      oprot.writeString(self.id)
      oprot.writeFieldEnd()
    if self.sourceLRU is not None:
      oprot.writeFieldBegin('sourceLRU', TType.STRING, 2)
      oprot.writeString(self.sourceLRU)
      oprot.writeFieldEnd()
    if self.targetLRU is not None:
      oprot.writeFieldBegin('targetLRU', TType.STRING, 3)
      oprot.writeString(self.targetLRU)
      oprot.writeFieldEnd()
    if self.weight is not None:
      oprot.writeFieldBegin('weight', TType.I32, 4)
      oprot.writeI32(self.weight)
      oprot.writeFieldEnd()
    if self.creationDate is not None:
      oprot.writeFieldBegin('creationDate', TType.STRING, 5)
      oprot.writeString(self.creationDate)
      oprot.writeFieldEnd()
    if self.lastModificationDate is not None:
      oprot.writeFieldBegin('lastModificationDate', TType.STRING, 6)
      oprot.writeString(self.lastModificationDate)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class WebEntityLink:
  """
  Attributes:
   - id
   - sourceId
   - targetId
   - weight
   - creationDate
   - lastModificationDate
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'id', None, None, ), # 1
    (2, TType.STRING, 'sourceId', None, None, ), # 2
    (3, TType.STRING, 'targetId', None, None, ), # 3
    (4, TType.I32, 'weight', None, 1, ), # 4
    (5, TType.STRING, 'creationDate', None, None, ), # 5
    (6, TType.STRING, 'lastModificationDate', None, None, ), # 6
  )

  def __init__(self, id=None, sourceId=None, targetId=None, weight=thrift_spec[4][4], creationDate=None, lastModificationDate=None,):
    self.id = id
    self.sourceId = sourceId
    self.targetId = targetId
    self.weight = weight
    self.creationDate = creationDate
    self.lastModificationDate = lastModificationDate

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.sourceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.targetId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.weight = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.creationDate = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.lastModificationDate = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WebEntityLink')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.STRING, 1)
      oprot.writeString(self.id)
      oprot.writeFieldEnd()
    if self.sourceId is not None:
      oprot.writeFieldBegin('sourceId', TType.STRING, 2)
      oprot.writeString(self.sourceId)
      oprot.writeFieldEnd()
    if self.targetId is not None:
      oprot.writeFieldBegin('targetId', TType.STRING, 3)
      oprot.writeString(self.targetId)
      oprot.writeFieldEnd()
    if self.weight is not None:
      oprot.writeFieldBegin('weight', TType.I32, 4)
      oprot.writeI32(self.weight)
      oprot.writeFieldEnd()
    if self.creationDate is not None:
      oprot.writeFieldBegin('creationDate', TType.STRING, 5)
      oprot.writeString(self.creationDate)
      oprot.writeFieldEnd()
    if self.lastModificationDate is not None:
      oprot.writeFieldBegin('lastModificationDate', TType.STRING, 6)
      oprot.writeString(self.lastModificationDate)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class WebEntity:
  """


  Attributes:
   - id
   - LRUSet
   - name
   - creationDate
   - lastModificationDate
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'id', None, None, ), # 1
    (2, TType.SET, 'LRUSet', (TType.STRING,None), None, ), # 2
    (3, TType.STRING, 'name', None, None, ), # 3
    (4, TType.STRING, 'creationDate', None, None, ), # 4
    (5, TType.STRING, 'lastModificationDate', None, None, ), # 5
  )

  def __init__(self, id=None, LRUSet=None, name=None, creationDate=None, lastModificationDate=None,):
    self.id = id
    self.LRUSet = LRUSet
    self.name = name
    self.creationDate = creationDate
    self.lastModificationDate = lastModificationDate

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.SET:
          self.LRUSet = set()
          (_etype19, _size16) = iprot.readSetBegin()
          for _i20 in xrange(_size16):
            _elem21 = iprot.readString();
            self.LRUSet.add(_elem21)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.creationDate = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.lastModificationDate = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WebEntity')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.STRING, 1)
      oprot.writeString(self.id)
      oprot.writeFieldEnd()
    if self.LRUSet is not None:
      oprot.writeFieldBegin('LRUSet', TType.SET, 2)
      oprot.writeSetBegin(TType.STRING, len(self.LRUSet))
      for iter22 in self.LRUSet:
        oprot.writeString(iter22)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 3)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.creationDate is not None:
      oprot.writeFieldBegin('creationDate', TType.STRING, 4)
      oprot.writeString(self.creationDate)
      oprot.writeFieldEnd()
    if self.lastModificationDate is not None:
      oprot.writeFieldBegin('lastModificationDate', TType.STRING, 5)
      oprot.writeString(self.lastModificationDate)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class WebEntityCreationRule:
  """
  Attributes:
   - regExp
   - LRU
   - creationDate
   - lastModificationDate
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'regExp', None, None, ), # 1
    (2, TType.STRING, 'LRU', None, None, ), # 2
    (3, TType.STRING, 'creationDate', None, None, ), # 3
    (4, TType.STRING, 'lastModificationDate', None, None, ), # 4
  )

  def __init__(self, regExp=None, LRU=None, creationDate=None, lastModificationDate=None,):
    self.regExp = regExp
    self.LRU = LRU
    self.creationDate = creationDate
    self.lastModificationDate = lastModificationDate

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.regExp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.LRU = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.creationDate = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.lastModificationDate = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WebEntityCreationRule')
    if self.regExp is not None:
      oprot.writeFieldBegin('regExp', TType.STRING, 1)
      oprot.writeString(self.regExp)
      oprot.writeFieldEnd()
    if self.LRU is not None:
      oprot.writeFieldBegin('LRU', TType.STRING, 2)
      oprot.writeString(self.LRU)
      oprot.writeFieldEnd()
    if self.creationDate is not None:
      oprot.writeFieldBegin('creationDate', TType.STRING, 3)
      oprot.writeString(self.creationDate)
      oprot.writeFieldEnd()
    if self.lastModificationDate is not None:
      oprot.writeFieldBegin('lastModificationDate', TType.STRING, 4)
      oprot.writeString(self.lastModificationDate)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PingPong:
  """
  Attributes:
   - ping
   - pong
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'ping', None, None, ), # 1
    (2, TType.STRING, 'pong', None, None, ), # 2
  )

  def __init__(self, ping=None, pong=None,):
    self.ping = ping
    self.pong = pong

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.ping = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.pong = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PingPong')
    if self.ping is not None:
      oprot.writeFieldBegin('ping', TType.STRING, 1)
      oprot.writeString(self.ping)
      oprot.writeFieldEnd()
    if self.pong is not None:
      oprot.writeFieldBegin('pong', TType.STRING, 2)
      oprot.writeString(self.pong)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
