#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:twisted
#

from thrift.Thrift import TType, TMessageType, TException
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None

from zope.interface import Interface, implements
from twisted.internet import defer
from thrift.transport import TTwisted

class Iface(Interface):
  def ping():
    pass

  def updateWebEntity(webEntity):
    """
    @param 1 webEntity
    @return id of the web entity

    Parameters:
     - webEntity
    """
    pass

  def createWebEntity(name, LRUSet):
    """
    @param 1 name
    @param 2 LRUSet
    @return a WebEntity object


    Parameters:
     - name
     - LRUSet
    """
    pass

  def getWebEntity(id):
    """
    @param 1 id
    @return a WebEntity Object


    Parameters:
     - id
    """
    pass

  def getWebEntities():
    """
    @return all webentities in the index
    """
    pass

  def getPagesFromWebEntity(id):
    """
    @param 1 id
    @return set of pages for this webentity (may be empty)

    Parameters:
     - id
    """
    pass

  def generateWebEntityLinks():
    """
    Generates WebEntity links.
    """
    pass

  def clearIndex():
    """
    Clears (empties) the index.
    """
    pass

  def createCache(pageItems):
    """
    @param 1 pageItems : set of PageItem objects
    @return id of the created cache

    Parameters:
     - pageItems
    """
    pass

  def indexCache(cacheId):
    """
    @param 1 cacheId : id of the cache
    @return number of indexed PageItems

    Parameters:
     - cacheId
    """
    pass

  def getPrecisionExceptionsFromCache(cacheId):
    """
    @param 1 cacheId : id of the cache
    @return set of lru prefixes

    Parameters:
     - cacheId
    """
    pass

  def createWebEntities(cacheId):
    """
    @param 1 cacheId : id of the cache

    Parameters:
     - cacheId
    """
    pass

  def deleteCache(cacheId):
    """
    @param 1 cacheId : id of the cache

    Parameters:
     - cacheId
    """
    pass

  def markPageWithPrecisionException(pageItemId):
    """
    @param 1 pageItemId : id of the pageItem to be

    Parameters:
     - pageItemId
    """
    pass

  def saveWebEntityCreationRule(webEntityCreationRule):
    """
    Adds or updates a single WebEntityCreationRule to the index. If the rule's LRU is empty, it is set as the
    DEFAULT rule. If there exists already a rule with this rule's LRU, it is updated, otherwise it is created.

    @param 1 webEntityCreationRule : webentity creation rule to save

    Parameters:
     - webEntityCreationRule
    """
    pass

  def getWebEntityCreationRules():
    """

    """
    pass

  def deleteWebEntityCreationRule(webEntityCreationRule):
    """
    @param 1 webEntityCreationRule : webentity creation rule to delete

    Parameters:
     - webEntityCreationRule
    """
    pass

  def savePageItems(pageItems):
    """
    Saves pages in the index WITHOUT USING THE CACHE.

    @param 1 pageItems : set of PageItem objects

    Parameters:
     - pageItems
    """
    pass

  def saveNodeLinks(nodeLinks):
    """

    @param 1 nodeLinks : set of NodeLink objects

    Parameters:
     - nodeLinks
    """
    pass

  def addAliastoWebEntity(id, lru):
    """
     *
     * @param 1 id : the id of the WebEntity to add this LRU to
     * @param 2 lru : the lru to add
    *

    Parameters:
     - id
     - lru
    """
    pass

  def getWebEntityNetwork(format):
    """
    @param 1 format: must be 'gefx'
    @return gefx graph

    Parameters:
     - format
    """
    pass

  def getWebEntityEgoNetwork(webEntityId, distance, format):
    """
    @param 1 webEntityId: id of web entity
    @param 2 distance: distance
    @param 3 format: must be 'gefx'
    @return gefx graph

    Parameters:
     - webEntityId
     - distance
     - format
    """
    pass


class Client:
  implements(Iface)

  def __init__(self, transport, oprot_factory):
    self._transport = transport
    self._oprot_factory = oprot_factory
    self._seqid = 0
    self._reqs = {}

  def ping(self, ):
    self._seqid += 1
    d = self._reqs[self._seqid] = defer.Deferred()
    self.send_ping()
    return d

  def send_ping(self, ):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('ping', TMessageType.CALL, self._seqid)
    args = ping_args()
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_ping(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = ping_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return d.callback(result.success)
    return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "ping failed: unknown result"))

  def updateWebEntity(self, webEntity):
    """
    @param 1 webEntity
    @return id of the web entity

    Parameters:
     - webEntity
    """
    self._seqid += 1
    d = self._reqs[self._seqid] = defer.Deferred()
    self.send_updateWebEntity(webEntity)
    return d

  def send_updateWebEntity(self, webEntity):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('updateWebEntity', TMessageType.CALL, self._seqid)
    args = updateWebEntity_args()
    args.webEntity = webEntity
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_updateWebEntity(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = updateWebEntity_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return d.callback(result.success)
    if result.x is not None:
      return d.errback(result.x)
    return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "updateWebEntity failed: unknown result"))

  def createWebEntity(self, name, LRUSet):
    """
    @param 1 name
    @param 2 LRUSet
    @return a WebEntity object


    Parameters:
     - name
     - LRUSet
    """
    self._seqid += 1
    d = self._reqs[self._seqid] = defer.Deferred()
    self.send_createWebEntity(name, LRUSet)
    return d

  def send_createWebEntity(self, name, LRUSet):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('createWebEntity', TMessageType.CALL, self._seqid)
    args = createWebEntity_args()
    args.name = name
    args.LRUSet = LRUSet
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_createWebEntity(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = createWebEntity_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return d.callback(result.success)
    if result.x is not None:
      return d.errback(result.x)
    return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "createWebEntity failed: unknown result"))

  def getWebEntity(self, id):
    """
    @param 1 id
    @return a WebEntity Object


    Parameters:
     - id
    """
    self._seqid += 1
    d = self._reqs[self._seqid] = defer.Deferred()
    self.send_getWebEntity(id)
    return d

  def send_getWebEntity(self, id):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('getWebEntity', TMessageType.CALL, self._seqid)
    args = getWebEntity_args()
    args.id = id
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_getWebEntity(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = getWebEntity_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return d.callback(result.success)
    if result.me is not None:
      return d.errback(result.me)
    if result.x is not None:
      return d.errback(result.x)
    return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "getWebEntity failed: unknown result"))

  def getWebEntities(self, ):
    """
    @return all webentities in the index
    """
    self._seqid += 1
    d = self._reqs[self._seqid] = defer.Deferred()
    self.send_getWebEntities()
    return d

  def send_getWebEntities(self, ):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('getWebEntities', TMessageType.CALL, self._seqid)
    args = getWebEntities_args()
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_getWebEntities(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = getWebEntities_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return d.callback(result.success)
    return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "getWebEntities failed: unknown result"))

  def getPagesFromWebEntity(self, id):
    """
    @param 1 id
    @return set of pages for this webentity (may be empty)

    Parameters:
     - id
    """
    self._seqid += 1
    d = self._reqs[self._seqid] = defer.Deferred()
    self.send_getPagesFromWebEntity(id)
    return d

  def send_getPagesFromWebEntity(self, id):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('getPagesFromWebEntity', TMessageType.CALL, self._seqid)
    args = getPagesFromWebEntity_args()
    args.id = id
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_getPagesFromWebEntity(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = getPagesFromWebEntity_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return d.callback(result.success)
    if result.me is not None:
      return d.errback(result.me)
    if result.x is not None:
      return d.errback(result.x)
    return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "getPagesFromWebEntity failed: unknown result"))

  def generateWebEntityLinks(self, ):
    """
    Generates WebEntity links.
    """
    self._seqid += 1
    d = self._reqs[self._seqid] = defer.Deferred()
    self.send_generateWebEntityLinks()
    return d

  def send_generateWebEntityLinks(self, ):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('generateWebEntityLinks', TMessageType.CALL, self._seqid)
    args = generateWebEntityLinks_args()
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_generateWebEntityLinks(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = generateWebEntityLinks_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.x is not None:
      return d.errback(result.x)
    return d.callback(None)

  def clearIndex(self, ):
    """
    Clears (empties) the index.
    """
    self._seqid += 1
    d = self._reqs[self._seqid] = defer.Deferred()
    self.send_clearIndex()
    return d

  def send_clearIndex(self, ):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('clearIndex', TMessageType.CALL, self._seqid)
    args = clearIndex_args()
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_clearIndex(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = clearIndex_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.x is not None:
      return d.errback(result.x)
    return d.callback(None)

  def createCache(self, pageItems):
    """
    @param 1 pageItems : set of PageItem objects
    @return id of the created cache

    Parameters:
     - pageItems
    """
    self._seqid += 1
    d = self._reqs[self._seqid] = defer.Deferred()
    self.send_createCache(pageItems)
    return d

  def send_createCache(self, pageItems):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('createCache', TMessageType.CALL, self._seqid)
    args = createCache_args()
    args.pageItems = pageItems
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_createCache(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = createCache_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return d.callback(result.success)
    if result.x is not None:
      return d.errback(result.x)
    return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "createCache failed: unknown result"))

  def indexCache(self, cacheId):
    """
    @param 1 cacheId : id of the cache
    @return number of indexed PageItems

    Parameters:
     - cacheId
    """
    self._seqid += 1
    d = self._reqs[self._seqid] = defer.Deferred()
    self.send_indexCache(cacheId)
    return d

  def send_indexCache(self, cacheId):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('indexCache', TMessageType.CALL, self._seqid)
    args = indexCache_args()
    args.cacheId = cacheId
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_indexCache(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = indexCache_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return d.callback(result.success)
    if result.me is not None:
      return d.errback(result.me)
    if result.x is not None:
      return d.errback(result.x)
    return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "indexCache failed: unknown result"))

  def getPrecisionExceptionsFromCache(self, cacheId):
    """
    @param 1 cacheId : id of the cache
    @return set of lru prefixes

    Parameters:
     - cacheId
    """
    self._seqid += 1
    d = self._reqs[self._seqid] = defer.Deferred()
    self.send_getPrecisionExceptionsFromCache(cacheId)
    return d

  def send_getPrecisionExceptionsFromCache(self, cacheId):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('getPrecisionExceptionsFromCache', TMessageType.CALL, self._seqid)
    args = getPrecisionExceptionsFromCache_args()
    args.cacheId = cacheId
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_getPrecisionExceptionsFromCache(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = getPrecisionExceptionsFromCache_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return d.callback(result.success)
    if result.me is not None:
      return d.errback(result.me)
    if result.x is not None:
      return d.errback(result.x)
    return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "getPrecisionExceptionsFromCache failed: unknown result"))

  def createWebEntities(self, cacheId):
    """
    @param 1 cacheId : id of the cache

    Parameters:
     - cacheId
    """
    self._seqid += 1
    d = self._reqs[self._seqid] = defer.Deferred()
    self.send_createWebEntities(cacheId)
    return d

  def send_createWebEntities(self, cacheId):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('createWebEntities', TMessageType.CALL, self._seqid)
    args = createWebEntities_args()
    args.cacheId = cacheId
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_createWebEntities(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = createWebEntities_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.me is not None:
      return d.errback(result.me)
    if result.x is not None:
      return d.errback(result.x)
    return d.callback(None)

  def deleteCache(self, cacheId):
    """
    @param 1 cacheId : id of the cache

    Parameters:
     - cacheId
    """
    self._seqid += 1
    d = self._reqs[self._seqid] = defer.Deferred()
    self.send_deleteCache(cacheId)
    return d

  def send_deleteCache(self, cacheId):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('deleteCache', TMessageType.CALL, self._seqid)
    args = deleteCache_args()
    args.cacheId = cacheId
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_deleteCache(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = deleteCache_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.me is not None:
      return d.errback(result.me)
    if result.x is not None:
      return d.errback(result.x)
    return d.callback(None)

  def markPageWithPrecisionException(self, pageItemId):
    """
    @param 1 pageItemId : id of the pageItem to be

    Parameters:
     - pageItemId
    """
    self._seqid += 1
    d = self._reqs[self._seqid] = defer.Deferred()
    self.send_markPageWithPrecisionException(pageItemId)
    return d

  def send_markPageWithPrecisionException(self, pageItemId):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('markPageWithPrecisionException', TMessageType.CALL, self._seqid)
    args = markPageWithPrecisionException_args()
    args.pageItemId = pageItemId
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_markPageWithPrecisionException(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = markPageWithPrecisionException_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.me is not None:
      return d.errback(result.me)
    if result.x is not None:
      return d.errback(result.x)
    return d.callback(None)

  def saveWebEntityCreationRule(self, webEntityCreationRule):
    """
    Adds or updates a single WebEntityCreationRule to the index. If the rule's LRU is empty, it is set as the
    DEFAULT rule. If there exists already a rule with this rule's LRU, it is updated, otherwise it is created.

    @param 1 webEntityCreationRule : webentity creation rule to save

    Parameters:
     - webEntityCreationRule
    """
    self._seqid += 1
    d = self._reqs[self._seqid] = defer.Deferred()
    self.send_saveWebEntityCreationRule(webEntityCreationRule)
    return d

  def send_saveWebEntityCreationRule(self, webEntityCreationRule):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('saveWebEntityCreationRule', TMessageType.CALL, self._seqid)
    args = saveWebEntityCreationRule_args()
    args.webEntityCreationRule = webEntityCreationRule
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_saveWebEntityCreationRule(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = saveWebEntityCreationRule_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.me is not None:
      return d.errback(result.me)
    return d.callback(None)

  def getWebEntityCreationRules(self, ):
    """

    """
    self._seqid += 1
    d = self._reqs[self._seqid] = defer.Deferred()
    self.send_getWebEntityCreationRules()
    return d

  def send_getWebEntityCreationRules(self, ):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('getWebEntityCreationRules', TMessageType.CALL, self._seqid)
    args = getWebEntityCreationRules_args()
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_getWebEntityCreationRules(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = getWebEntityCreationRules_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return d.callback(result.success)
    return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "getWebEntityCreationRules failed: unknown result"))

  def deleteWebEntityCreationRule(self, webEntityCreationRule):
    """
    @param 1 webEntityCreationRule : webentity creation rule to delete

    Parameters:
     - webEntityCreationRule
    """
    self._seqid += 1
    d = self._reqs[self._seqid] = defer.Deferred()
    self.send_deleteWebEntityCreationRule(webEntityCreationRule)
    return d

  def send_deleteWebEntityCreationRule(self, webEntityCreationRule):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('deleteWebEntityCreationRule', TMessageType.CALL, self._seqid)
    args = deleteWebEntityCreationRule_args()
    args.webEntityCreationRule = webEntityCreationRule
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_deleteWebEntityCreationRule(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = deleteWebEntityCreationRule_result()
    result.read(iprot)
    iprot.readMessageEnd()
    return d.callback(None)

  def savePageItems(self, pageItems):
    """
    Saves pages in the index WITHOUT USING THE CACHE.

    @param 1 pageItems : set of PageItem objects

    Parameters:
     - pageItems
    """
    self._seqid += 1
    d = self._reqs[self._seqid] = defer.Deferred()
    self.send_savePageItems(pageItems)
    return d

  def send_savePageItems(self, pageItems):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('savePageItems', TMessageType.CALL, self._seqid)
    args = savePageItems_args()
    args.pageItems = pageItems
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_savePageItems(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = savePageItems_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.me is not None:
      return d.errback(result.me)
    return d.callback(None)

  def saveNodeLinks(self, nodeLinks):
    """

    @param 1 nodeLinks : set of NodeLink objects

    Parameters:
     - nodeLinks
    """
    self._seqid += 1
    d = self._reqs[self._seqid] = defer.Deferred()
    self.send_saveNodeLinks(nodeLinks)
    return d

  def send_saveNodeLinks(self, nodeLinks):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('saveNodeLinks', TMessageType.CALL, self._seqid)
    args = saveNodeLinks_args()
    args.nodeLinks = nodeLinks
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_saveNodeLinks(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = saveNodeLinks_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.me is not None:
      return d.errback(result.me)
    return d.callback(None)

  def addAliastoWebEntity(self, id, lru):
    """
     *
     * @param 1 id : the id of the WebEntity to add this LRU to
     * @param 2 lru : the lru to add
    *

    Parameters:
     - id
     - lru
    """
    self._seqid += 1
    d = self._reqs[self._seqid] = defer.Deferred()
    self.send_addAliastoWebEntity(id, lru)
    return d

  def send_addAliastoWebEntity(self, id, lru):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('addAliastoWebEntity', TMessageType.CALL, self._seqid)
    args = addAliastoWebEntity_args()
    args.id = id
    args.lru = lru
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_addAliastoWebEntity(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = addAliastoWebEntity_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.me is not None:
      return d.errback(result.me)
    if result.x is not None:
      return d.errback(result.x)
    return d.callback(None)

  def getWebEntityNetwork(self, format):
    """
    @param 1 format: must be 'gefx'
    @return gefx graph

    Parameters:
     - format
    """
    self._seqid += 1
    d = self._reqs[self._seqid] = defer.Deferred()
    self.send_getWebEntityNetwork(format)
    return d

  def send_getWebEntityNetwork(self, format):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('getWebEntityNetwork', TMessageType.CALL, self._seqid)
    args = getWebEntityNetwork_args()
    args.format = format
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_getWebEntityNetwork(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = getWebEntityNetwork_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return d.callback(result.success)
    if result.me is not None:
      return d.errback(result.me)
    return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "getWebEntityNetwork failed: unknown result"))

  def getWebEntityEgoNetwork(self, webEntityId, distance, format):
    """
    @param 1 webEntityId: id of web entity
    @param 2 distance: distance
    @param 3 format: must be 'gefx'
    @return gefx graph

    Parameters:
     - webEntityId
     - distance
     - format
    """
    self._seqid += 1
    d = self._reqs[self._seqid] = defer.Deferred()
    self.send_getWebEntityEgoNetwork(webEntityId, distance, format)
    return d

  def send_getWebEntityEgoNetwork(self, webEntityId, distance, format):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('getWebEntityEgoNetwork', TMessageType.CALL, self._seqid)
    args = getWebEntityEgoNetwork_args()
    args.webEntityId = webEntityId
    args.distance = distance
    args.format = format
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_getWebEntityEgoNetwork(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = getWebEntityEgoNetwork_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return d.callback(result.success)
    if result.me is not None:
      return d.errback(result.me)
    if result.x is not None:
      return d.errback(result.x)
    return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "getWebEntityEgoNetwork failed: unknown result"))


class Processor(TProcessor):
  implements(Iface)

  def __init__(self, handler):
    self._handler = Iface(handler)
    self._processMap = {}
    self._processMap["ping"] = Processor.process_ping
    self._processMap["updateWebEntity"] = Processor.process_updateWebEntity
    self._processMap["createWebEntity"] = Processor.process_createWebEntity
    self._processMap["getWebEntity"] = Processor.process_getWebEntity
    self._processMap["getWebEntities"] = Processor.process_getWebEntities
    self._processMap["getPagesFromWebEntity"] = Processor.process_getPagesFromWebEntity
    self._processMap["generateWebEntityLinks"] = Processor.process_generateWebEntityLinks
    self._processMap["clearIndex"] = Processor.process_clearIndex
    self._processMap["createCache"] = Processor.process_createCache
    self._processMap["indexCache"] = Processor.process_indexCache
    self._processMap["getPrecisionExceptionsFromCache"] = Processor.process_getPrecisionExceptionsFromCache
    self._processMap["createWebEntities"] = Processor.process_createWebEntities
    self._processMap["deleteCache"] = Processor.process_deleteCache
    self._processMap["markPageWithPrecisionException"] = Processor.process_markPageWithPrecisionException
    self._processMap["saveWebEntityCreationRule"] = Processor.process_saveWebEntityCreationRule
    self._processMap["getWebEntityCreationRules"] = Processor.process_getWebEntityCreationRules
    self._processMap["deleteWebEntityCreationRule"] = Processor.process_deleteWebEntityCreationRule
    self._processMap["savePageItems"] = Processor.process_savePageItems
    self._processMap["saveNodeLinks"] = Processor.process_saveNodeLinks
    self._processMap["addAliastoWebEntity"] = Processor.process_addAliastoWebEntity
    self._processMap["getWebEntityNetwork"] = Processor.process_getWebEntityNetwork
    self._processMap["getWebEntityEgoNetwork"] = Processor.process_getWebEntityEgoNetwork

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return defer.succeed(None)
    else:
      return self._processMap[name](self, seqid, iprot, oprot)

  def process_ping(self, seqid, iprot, oprot):
    args = ping_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = ping_result()
    d = defer.maybeDeferred(self._handler.ping, )
    d.addCallback(self.write_results_success_ping, result, seqid, oprot)
    return d

  def write_results_success_ping(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("ping", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_updateWebEntity(self, seqid, iprot, oprot):
    args = updateWebEntity_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = updateWebEntity_result()
    d = defer.maybeDeferred(self._handler.updateWebEntity, args.webEntity)
    d.addCallback(self.write_results_success_updateWebEntity, result, seqid, oprot)
    d.addErrback(self.write_results_exception_updateWebEntity, result, seqid, oprot)
    return d

  def write_results_success_updateWebEntity(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("updateWebEntity", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def write_results_exception_updateWebEntity(self, error, result, seqid, oprot):
    try:
      error.raiseException()
    except MemoryStructureException, x:
      result.x = x
    oprot.writeMessageBegin("updateWebEntity", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_createWebEntity(self, seqid, iprot, oprot):
    args = createWebEntity_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = createWebEntity_result()
    d = defer.maybeDeferred(self._handler.createWebEntity, args.name, args.LRUSet)
    d.addCallback(self.write_results_success_createWebEntity, result, seqid, oprot)
    d.addErrback(self.write_results_exception_createWebEntity, result, seqid, oprot)
    return d

  def write_results_success_createWebEntity(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("createWebEntity", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def write_results_exception_createWebEntity(self, error, result, seqid, oprot):
    try:
      error.raiseException()
    except MemoryStructureException, x:
      result.x = x
    oprot.writeMessageBegin("createWebEntity", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getWebEntity(self, seqid, iprot, oprot):
    args = getWebEntity_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getWebEntity_result()
    d = defer.maybeDeferred(self._handler.getWebEntity, args.id)
    d.addCallback(self.write_results_success_getWebEntity, result, seqid, oprot)
    d.addErrback(self.write_results_exception_getWebEntity, result, seqid, oprot)
    return d

  def write_results_success_getWebEntity(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("getWebEntity", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def write_results_exception_getWebEntity(self, error, result, seqid, oprot):
    try:
      error.raiseException()
    except MemoryStructureException, me:
      result.me = me
    except ObjectNotFoundException, x:
      result.x = x
    oprot.writeMessageBegin("getWebEntity", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getWebEntities(self, seqid, iprot, oprot):
    args = getWebEntities_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getWebEntities_result()
    d = defer.maybeDeferred(self._handler.getWebEntities, )
    d.addCallback(self.write_results_success_getWebEntities, result, seqid, oprot)
    return d

  def write_results_success_getWebEntities(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("getWebEntities", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getPagesFromWebEntity(self, seqid, iprot, oprot):
    args = getPagesFromWebEntity_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getPagesFromWebEntity_result()
    d = defer.maybeDeferred(self._handler.getPagesFromWebEntity, args.id)
    d.addCallback(self.write_results_success_getPagesFromWebEntity, result, seqid, oprot)
    d.addErrback(self.write_results_exception_getPagesFromWebEntity, result, seqid, oprot)
    return d

  def write_results_success_getPagesFromWebEntity(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("getPagesFromWebEntity", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def write_results_exception_getPagesFromWebEntity(self, error, result, seqid, oprot):
    try:
      error.raiseException()
    except MemoryStructureException, me:
      result.me = me
    except ObjectNotFoundException, x:
      result.x = x
    oprot.writeMessageBegin("getPagesFromWebEntity", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_generateWebEntityLinks(self, seqid, iprot, oprot):
    args = generateWebEntityLinks_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = generateWebEntityLinks_result()
    d = defer.maybeDeferred(self._handler.generateWebEntityLinks, )
    d.addCallback(self.write_results_success_generateWebEntityLinks, result, seqid, oprot)
    d.addErrback(self.write_results_exception_generateWebEntityLinks, result, seqid, oprot)
    return d

  def write_results_success_generateWebEntityLinks(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("generateWebEntityLinks", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def write_results_exception_generateWebEntityLinks(self, error, result, seqid, oprot):
    try:
      error.raiseException()
    except MemoryStructureException, x:
      result.x = x
    oprot.writeMessageBegin("generateWebEntityLinks", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_clearIndex(self, seqid, iprot, oprot):
    args = clearIndex_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = clearIndex_result()
    d = defer.maybeDeferred(self._handler.clearIndex, )
    d.addCallback(self.write_results_success_clearIndex, result, seqid, oprot)
    d.addErrback(self.write_results_exception_clearIndex, result, seqid, oprot)
    return d

  def write_results_success_clearIndex(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("clearIndex", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def write_results_exception_clearIndex(self, error, result, seqid, oprot):
    try:
      error.raiseException()
    except MemoryStructureException, x:
      result.x = x
    oprot.writeMessageBegin("clearIndex", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_createCache(self, seqid, iprot, oprot):
    args = createCache_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = createCache_result()
    d = defer.maybeDeferred(self._handler.createCache, args.pageItems)
    d.addCallback(self.write_results_success_createCache, result, seqid, oprot)
    d.addErrback(self.write_results_exception_createCache, result, seqid, oprot)
    return d

  def write_results_success_createCache(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("createCache", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def write_results_exception_createCache(self, error, result, seqid, oprot):
    try:
      error.raiseException()
    except MemoryStructureException, x:
      result.x = x
    oprot.writeMessageBegin("createCache", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_indexCache(self, seqid, iprot, oprot):
    args = indexCache_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = indexCache_result()
    d = defer.maybeDeferred(self._handler.indexCache, args.cacheId)
    d.addCallback(self.write_results_success_indexCache, result, seqid, oprot)
    d.addErrback(self.write_results_exception_indexCache, result, seqid, oprot)
    return d

  def write_results_success_indexCache(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("indexCache", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def write_results_exception_indexCache(self, error, result, seqid, oprot):
    try:
      error.raiseException()
    except MemoryStructureException, me:
      result.me = me
    except ObjectNotFoundException, x:
      result.x = x
    oprot.writeMessageBegin("indexCache", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getPrecisionExceptionsFromCache(self, seqid, iprot, oprot):
    args = getPrecisionExceptionsFromCache_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getPrecisionExceptionsFromCache_result()
    d = defer.maybeDeferred(self._handler.getPrecisionExceptionsFromCache, args.cacheId)
    d.addCallback(self.write_results_success_getPrecisionExceptionsFromCache, result, seqid, oprot)
    d.addErrback(self.write_results_exception_getPrecisionExceptionsFromCache, result, seqid, oprot)
    return d

  def write_results_success_getPrecisionExceptionsFromCache(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("getPrecisionExceptionsFromCache", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def write_results_exception_getPrecisionExceptionsFromCache(self, error, result, seqid, oprot):
    try:
      error.raiseException()
    except MemoryStructureException, me:
      result.me = me
    except ObjectNotFoundException, x:
      result.x = x
    oprot.writeMessageBegin("getPrecisionExceptionsFromCache", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_createWebEntities(self, seqid, iprot, oprot):
    args = createWebEntities_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = createWebEntities_result()
    d = defer.maybeDeferred(self._handler.createWebEntities, args.cacheId)
    d.addCallback(self.write_results_success_createWebEntities, result, seqid, oprot)
    d.addErrback(self.write_results_exception_createWebEntities, result, seqid, oprot)
    return d

  def write_results_success_createWebEntities(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("createWebEntities", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def write_results_exception_createWebEntities(self, error, result, seqid, oprot):
    try:
      error.raiseException()
    except MemoryStructureException, me:
      result.me = me
    except ObjectNotFoundException, x:
      result.x = x
    oprot.writeMessageBegin("createWebEntities", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_deleteCache(self, seqid, iprot, oprot):
    args = deleteCache_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = deleteCache_result()
    d = defer.maybeDeferred(self._handler.deleteCache, args.cacheId)
    d.addCallback(self.write_results_success_deleteCache, result, seqid, oprot)
    d.addErrback(self.write_results_exception_deleteCache, result, seqid, oprot)
    return d

  def write_results_success_deleteCache(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("deleteCache", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def write_results_exception_deleteCache(self, error, result, seqid, oprot):
    try:
      error.raiseException()
    except MemoryStructureException, me:
      result.me = me
    except ObjectNotFoundException, x:
      result.x = x
    oprot.writeMessageBegin("deleteCache", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_markPageWithPrecisionException(self, seqid, iprot, oprot):
    args = markPageWithPrecisionException_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = markPageWithPrecisionException_result()
    d = defer.maybeDeferred(self._handler.markPageWithPrecisionException, args.pageItemId)
    d.addCallback(self.write_results_success_markPageWithPrecisionException, result, seqid, oprot)
    d.addErrback(self.write_results_exception_markPageWithPrecisionException, result, seqid, oprot)
    return d

  def write_results_success_markPageWithPrecisionException(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("markPageWithPrecisionException", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def write_results_exception_markPageWithPrecisionException(self, error, result, seqid, oprot):
    try:
      error.raiseException()
    except MemoryStructureException, me:
      result.me = me
    except ObjectNotFoundException, x:
      result.x = x
    oprot.writeMessageBegin("markPageWithPrecisionException", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_saveWebEntityCreationRule(self, seqid, iprot, oprot):
    args = saveWebEntityCreationRule_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = saveWebEntityCreationRule_result()
    d = defer.maybeDeferred(self._handler.saveWebEntityCreationRule, args.webEntityCreationRule)
    d.addCallback(self.write_results_success_saveWebEntityCreationRule, result, seqid, oprot)
    d.addErrback(self.write_results_exception_saveWebEntityCreationRule, result, seqid, oprot)
    return d

  def write_results_success_saveWebEntityCreationRule(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("saveWebEntityCreationRule", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def write_results_exception_saveWebEntityCreationRule(self, error, result, seqid, oprot):
    try:
      error.raiseException()
    except MemoryStructureException, me:
      result.me = me
    oprot.writeMessageBegin("saveWebEntityCreationRule", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getWebEntityCreationRules(self, seqid, iprot, oprot):
    args = getWebEntityCreationRules_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getWebEntityCreationRules_result()
    d = defer.maybeDeferred(self._handler.getWebEntityCreationRules, )
    d.addCallback(self.write_results_success_getWebEntityCreationRules, result, seqid, oprot)
    return d

  def write_results_success_getWebEntityCreationRules(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("getWebEntityCreationRules", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_deleteWebEntityCreationRule(self, seqid, iprot, oprot):
    args = deleteWebEntityCreationRule_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = deleteWebEntityCreationRule_result()
    d = defer.maybeDeferred(self._handler.deleteWebEntityCreationRule, args.webEntityCreationRule)
    d.addCallback(self.write_results_success_deleteWebEntityCreationRule, result, seqid, oprot)
    return d

  def write_results_success_deleteWebEntityCreationRule(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("deleteWebEntityCreationRule", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_savePageItems(self, seqid, iprot, oprot):
    args = savePageItems_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = savePageItems_result()
    d = defer.maybeDeferred(self._handler.savePageItems, args.pageItems)
    d.addCallback(self.write_results_success_savePageItems, result, seqid, oprot)
    d.addErrback(self.write_results_exception_savePageItems, result, seqid, oprot)
    return d

  def write_results_success_savePageItems(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("savePageItems", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def write_results_exception_savePageItems(self, error, result, seqid, oprot):
    try:
      error.raiseException()
    except MemoryStructureException, me:
      result.me = me
    oprot.writeMessageBegin("savePageItems", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_saveNodeLinks(self, seqid, iprot, oprot):
    args = saveNodeLinks_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = saveNodeLinks_result()
    d = defer.maybeDeferred(self._handler.saveNodeLinks, args.nodeLinks)
    d.addCallback(self.write_results_success_saveNodeLinks, result, seqid, oprot)
    d.addErrback(self.write_results_exception_saveNodeLinks, result, seqid, oprot)
    return d

  def write_results_success_saveNodeLinks(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("saveNodeLinks", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def write_results_exception_saveNodeLinks(self, error, result, seqid, oprot):
    try:
      error.raiseException()
    except MemoryStructureException, me:
      result.me = me
    oprot.writeMessageBegin("saveNodeLinks", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_addAliastoWebEntity(self, seqid, iprot, oprot):
    args = addAliastoWebEntity_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = addAliastoWebEntity_result()
    d = defer.maybeDeferred(self._handler.addAliastoWebEntity, args.id, args.lru)
    d.addCallback(self.write_results_success_addAliastoWebEntity, result, seqid, oprot)
    d.addErrback(self.write_results_exception_addAliastoWebEntity, result, seqid, oprot)
    return d

  def write_results_success_addAliastoWebEntity(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("addAliastoWebEntity", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def write_results_exception_addAliastoWebEntity(self, error, result, seqid, oprot):
    try:
      error.raiseException()
    except MemoryStructureException, me:
      result.me = me
    except ObjectNotFoundException, x:
      result.x = x
    oprot.writeMessageBegin("addAliastoWebEntity", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getWebEntityNetwork(self, seqid, iprot, oprot):
    args = getWebEntityNetwork_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getWebEntityNetwork_result()
    d = defer.maybeDeferred(self._handler.getWebEntityNetwork, args.format)
    d.addCallback(self.write_results_success_getWebEntityNetwork, result, seqid, oprot)
    d.addErrback(self.write_results_exception_getWebEntityNetwork, result, seqid, oprot)
    return d

  def write_results_success_getWebEntityNetwork(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("getWebEntityNetwork", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def write_results_exception_getWebEntityNetwork(self, error, result, seqid, oprot):
    try:
      error.raiseException()
    except MemoryStructureException, me:
      result.me = me
    oprot.writeMessageBegin("getWebEntityNetwork", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getWebEntityEgoNetwork(self, seqid, iprot, oprot):
    args = getWebEntityEgoNetwork_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getWebEntityEgoNetwork_result()
    d = defer.maybeDeferred(self._handler.getWebEntityEgoNetwork, args.webEntityId, args.distance, args.format)
    d.addCallback(self.write_results_success_getWebEntityEgoNetwork, result, seqid, oprot)
    d.addErrback(self.write_results_exception_getWebEntityEgoNetwork, result, seqid, oprot)
    return d

  def write_results_success_getWebEntityEgoNetwork(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("getWebEntityEgoNetwork", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def write_results_exception_getWebEntityEgoNetwork(self, error, result, seqid, oprot):
    try:
      error.raiseException()
    except MemoryStructureException, me:
      result.me = me
    except ObjectNotFoundException, x:
      result.x = x
    oprot.writeMessageBegin("getWebEntityEgoNetwork", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class ping_args:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ping_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ping_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(PingPong, PingPong.thrift_spec)), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype26, _size23) = iprot.readListBegin()
          for _i27 in xrange(_size23):
            _elem28 = PingPong()
            _elem28.read(iprot)
            self.success.append(_elem28)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ping_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter29 in self.success:
        iter29.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateWebEntity_args:
  """
  Attributes:
   - webEntity
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'webEntity', (WebEntity, WebEntity.thrift_spec), None, ), # 1
  )

  def __init__(self, webEntity=None,):
    self.webEntity = webEntity

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.webEntity = WebEntity()
          self.webEntity.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateWebEntity_args')
    if self.webEntity is not None:
      oprot.writeFieldBegin('webEntity', TType.STRUCT, 1)
      self.webEntity.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateWebEntity_result:
  """
  Attributes:
   - success
   - x
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'x', (MemoryStructureException, MemoryStructureException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, x=None,):
    self.success = success
    self.x = x

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.x = MemoryStructureException()
          self.x.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateWebEntity_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.x is not None:
      oprot.writeFieldBegin('x', TType.STRUCT, 1)
      self.x.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class createWebEntity_args:
  """
  Attributes:
   - name
   - LRUSet
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, None, ), # 1
    (2, TType.SET, 'LRUSet', (TType.STRING,None), None, ), # 2
  )

  def __init__(self, name=None, LRUSet=None,):
    self.name = name
    self.LRUSet = LRUSet

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.SET:
          self.LRUSet = set()
          (_etype33, _size30) = iprot.readSetBegin()
          for _i34 in xrange(_size30):
            _elem35 = iprot.readString();
            self.LRUSet.add(_elem35)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('createWebEntity_args')
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 1)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.LRUSet is not None:
      oprot.writeFieldBegin('LRUSet', TType.SET, 2)
      oprot.writeSetBegin(TType.STRING, len(self.LRUSet))
      for iter36 in self.LRUSet:
        oprot.writeString(iter36)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class createWebEntity_result:
  """
  Attributes:
   - success
   - x
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (WebEntity, WebEntity.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'x', (MemoryStructureException, MemoryStructureException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, x=None,):
    self.success = success
    self.x = x

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = WebEntity()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.x = MemoryStructureException()
          self.x.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('createWebEntity_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.x is not None:
      oprot.writeFieldBegin('x', TType.STRUCT, 1)
      self.x.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getWebEntity_args:
  """
  Attributes:
   - id
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'id', None, None, ), # 1
  )

  def __init__(self, id=None,):
    self.id = id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.id = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getWebEntity_args')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.STRING, 1)
      oprot.writeString(self.id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getWebEntity_result:
  """
  Attributes:
   - success
   - me
   - x
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (WebEntity, WebEntity.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'me', (MemoryStructureException, MemoryStructureException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'x', (ObjectNotFoundException, ObjectNotFoundException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, me=None, x=None,):
    self.success = success
    self.me = me
    self.x = x

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = WebEntity()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.me = MemoryStructureException()
          self.me.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.x = ObjectNotFoundException()
          self.x.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getWebEntity_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.me is not None:
      oprot.writeFieldBegin('me', TType.STRUCT, 1)
      self.me.write(oprot)
      oprot.writeFieldEnd()
    if self.x is not None:
      oprot.writeFieldBegin('x', TType.STRUCT, 2)
      self.x.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getWebEntities_args:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getWebEntities_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getWebEntities_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(WebEntity, WebEntity.thrift_spec)), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype40, _size37) = iprot.readListBegin()
          for _i41 in xrange(_size37):
            _elem42 = WebEntity()
            _elem42.read(iprot)
            self.success.append(_elem42)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getWebEntities_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter43 in self.success:
        iter43.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getPagesFromWebEntity_args:
  """
  Attributes:
   - id
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'id', None, None, ), # 1
  )

  def __init__(self, id=None,):
    self.id = id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.id = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getPagesFromWebEntity_args')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.STRING, 1)
      oprot.writeString(self.id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getPagesFromWebEntity_result:
  """
  Attributes:
   - success
   - me
   - x
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(PageItem, PageItem.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'me', (MemoryStructureException, MemoryStructureException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'x', (ObjectNotFoundException, ObjectNotFoundException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, me=None, x=None,):
    self.success = success
    self.me = me
    self.x = x

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype47, _size44) = iprot.readListBegin()
          for _i48 in xrange(_size44):
            _elem49 = PageItem()
            _elem49.read(iprot)
            self.success.append(_elem49)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.me = MemoryStructureException()
          self.me.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.x = ObjectNotFoundException()
          self.x.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getPagesFromWebEntity_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter50 in self.success:
        iter50.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.me is not None:
      oprot.writeFieldBegin('me', TType.STRUCT, 1)
      self.me.write(oprot)
      oprot.writeFieldEnd()
    if self.x is not None:
      oprot.writeFieldBegin('x', TType.STRUCT, 2)
      self.x.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class generateWebEntityLinks_args:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('generateWebEntityLinks_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class generateWebEntityLinks_result:
  """
  Attributes:
   - x
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'x', (MemoryStructureException, MemoryStructureException.thrift_spec), None, ), # 1
  )

  def __init__(self, x=None,):
    self.x = x

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.x = MemoryStructureException()
          self.x.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('generateWebEntityLinks_result')
    if self.x is not None:
      oprot.writeFieldBegin('x', TType.STRUCT, 1)
      self.x.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class clearIndex_args:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('clearIndex_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class clearIndex_result:
  """
  Attributes:
   - x
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'x', (MemoryStructureException, MemoryStructureException.thrift_spec), None, ), # 1
  )

  def __init__(self, x=None,):
    self.x = x

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.x = MemoryStructureException()
          self.x.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('clearIndex_result')
    if self.x is not None:
      oprot.writeFieldBegin('x', TType.STRUCT, 1)
      self.x.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class createCache_args:
  """
  Attributes:
   - pageItems
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'pageItems', (TType.STRUCT,(PageItem, PageItem.thrift_spec)), None, ), # 1
  )

  def __init__(self, pageItems=None,):
    self.pageItems = pageItems

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.pageItems = []
          (_etype54, _size51) = iprot.readListBegin()
          for _i55 in xrange(_size51):
            _elem56 = PageItem()
            _elem56.read(iprot)
            self.pageItems.append(_elem56)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('createCache_args')
    if self.pageItems is not None:
      oprot.writeFieldBegin('pageItems', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.pageItems))
      for iter57 in self.pageItems:
        iter57.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class createCache_result:
  """
  Attributes:
   - success
   - x
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'x', (MemoryStructureException, MemoryStructureException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, x=None,):
    self.success = success
    self.x = x

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.x = MemoryStructureException()
          self.x.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('createCache_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.x is not None:
      oprot.writeFieldBegin('x', TType.STRUCT, 1)
      self.x.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class indexCache_args:
  """
  Attributes:
   - cacheId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'cacheId', None, None, ), # 1
  )

  def __init__(self, cacheId=None,):
    self.cacheId = cacheId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.cacheId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('indexCache_args')
    if self.cacheId is not None:
      oprot.writeFieldBegin('cacheId', TType.STRING, 1)
      oprot.writeString(self.cacheId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class indexCache_result:
  """
  Attributes:
   - success
   - me
   - x
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'me', (MemoryStructureException, MemoryStructureException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'x', (ObjectNotFoundException, ObjectNotFoundException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, me=None, x=None,):
    self.success = success
    self.me = me
    self.x = x

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.me = MemoryStructureException()
          self.me.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.x = ObjectNotFoundException()
          self.x.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('indexCache_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    if self.me is not None:
      oprot.writeFieldBegin('me', TType.STRUCT, 1)
      self.me.write(oprot)
      oprot.writeFieldEnd()
    if self.x is not None:
      oprot.writeFieldBegin('x', TType.STRUCT, 2)
      self.x.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getPrecisionExceptionsFromCache_args:
  """
  Attributes:
   - cacheId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'cacheId', None, None, ), # 1
  )

  def __init__(self, cacheId=None,):
    self.cacheId = cacheId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.cacheId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getPrecisionExceptionsFromCache_args')
    if self.cacheId is not None:
      oprot.writeFieldBegin('cacheId', TType.STRING, 1)
      oprot.writeString(self.cacheId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getPrecisionExceptionsFromCache_result:
  """
  Attributes:
   - success
   - me
   - x
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRING,None), None, ), # 0
    (1, TType.STRUCT, 'me', (MemoryStructureException, MemoryStructureException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'x', (ObjectNotFoundException, ObjectNotFoundException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, me=None, x=None,):
    self.success = success
    self.me = me
    self.x = x

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype61, _size58) = iprot.readListBegin()
          for _i62 in xrange(_size58):
            _elem63 = iprot.readString();
            self.success.append(_elem63)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.me = MemoryStructureException()
          self.me.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.x = ObjectNotFoundException()
          self.x.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getPrecisionExceptionsFromCache_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRING, len(self.success))
      for iter64 in self.success:
        oprot.writeString(iter64)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.me is not None:
      oprot.writeFieldBegin('me', TType.STRUCT, 1)
      self.me.write(oprot)
      oprot.writeFieldEnd()
    if self.x is not None:
      oprot.writeFieldBegin('x', TType.STRUCT, 2)
      self.x.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class createWebEntities_args:
  """
  Attributes:
   - cacheId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'cacheId', None, None, ), # 1
  )

  def __init__(self, cacheId=None,):
    self.cacheId = cacheId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.cacheId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('createWebEntities_args')
    if self.cacheId is not None:
      oprot.writeFieldBegin('cacheId', TType.STRING, 1)
      oprot.writeString(self.cacheId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class createWebEntities_result:
  """
  Attributes:
   - me
   - x
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'me', (MemoryStructureException, MemoryStructureException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'x', (ObjectNotFoundException, ObjectNotFoundException.thrift_spec), None, ), # 2
  )

  def __init__(self, me=None, x=None,):
    self.me = me
    self.x = x

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.me = MemoryStructureException()
          self.me.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.x = ObjectNotFoundException()
          self.x.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('createWebEntities_result')
    if self.me is not None:
      oprot.writeFieldBegin('me', TType.STRUCT, 1)
      self.me.write(oprot)
      oprot.writeFieldEnd()
    if self.x is not None:
      oprot.writeFieldBegin('x', TType.STRUCT, 2)
      self.x.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deleteCache_args:
  """
  Attributes:
   - cacheId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'cacheId', None, None, ), # 1
  )

  def __init__(self, cacheId=None,):
    self.cacheId = cacheId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.cacheId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deleteCache_args')
    if self.cacheId is not None:
      oprot.writeFieldBegin('cacheId', TType.STRING, 1)
      oprot.writeString(self.cacheId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deleteCache_result:
  """
  Attributes:
   - me
   - x
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'me', (MemoryStructureException, MemoryStructureException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'x', (ObjectNotFoundException, ObjectNotFoundException.thrift_spec), None, ), # 2
  )

  def __init__(self, me=None, x=None,):
    self.me = me
    self.x = x

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.me = MemoryStructureException()
          self.me.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.x = ObjectNotFoundException()
          self.x.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deleteCache_result')
    if self.me is not None:
      oprot.writeFieldBegin('me', TType.STRUCT, 1)
      self.me.write(oprot)
      oprot.writeFieldEnd()
    if self.x is not None:
      oprot.writeFieldBegin('x', TType.STRUCT, 2)
      self.x.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class markPageWithPrecisionException_args:
  """
  Attributes:
   - pageItemId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'pageItemId', None, None, ), # 1
  )

  def __init__(self, pageItemId=None,):
    self.pageItemId = pageItemId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.pageItemId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('markPageWithPrecisionException_args')
    if self.pageItemId is not None:
      oprot.writeFieldBegin('pageItemId', TType.STRING, 1)
      oprot.writeString(self.pageItemId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class markPageWithPrecisionException_result:
  """
  Attributes:
   - me
   - x
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'me', (MemoryStructureException, MemoryStructureException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'x', (ObjectNotFoundException, ObjectNotFoundException.thrift_spec), None, ), # 2
  )

  def __init__(self, me=None, x=None,):
    self.me = me
    self.x = x

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.me = MemoryStructureException()
          self.me.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.x = ObjectNotFoundException()
          self.x.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('markPageWithPrecisionException_result')
    if self.me is not None:
      oprot.writeFieldBegin('me', TType.STRUCT, 1)
      self.me.write(oprot)
      oprot.writeFieldEnd()
    if self.x is not None:
      oprot.writeFieldBegin('x', TType.STRUCT, 2)
      self.x.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class saveWebEntityCreationRule_args:
  """
  Attributes:
   - webEntityCreationRule
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'webEntityCreationRule', (WebEntityCreationRule, WebEntityCreationRule.thrift_spec), None, ), # 1
  )

  def __init__(self, webEntityCreationRule=None,):
    self.webEntityCreationRule = webEntityCreationRule

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.webEntityCreationRule = WebEntityCreationRule()
          self.webEntityCreationRule.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('saveWebEntityCreationRule_args')
    if self.webEntityCreationRule is not None:
      oprot.writeFieldBegin('webEntityCreationRule', TType.STRUCT, 1)
      self.webEntityCreationRule.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class saveWebEntityCreationRule_result:
  """
  Attributes:
   - me
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'me', (MemoryStructureException, MemoryStructureException.thrift_spec), None, ), # 1
  )

  def __init__(self, me=None,):
    self.me = me

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.me = MemoryStructureException()
          self.me.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('saveWebEntityCreationRule_result')
    if self.me is not None:
      oprot.writeFieldBegin('me', TType.STRUCT, 1)
      self.me.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getWebEntityCreationRules_args:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getWebEntityCreationRules_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getWebEntityCreationRules_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(WebEntityCreationRule, WebEntityCreationRule.thrift_spec)), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype68, _size65) = iprot.readListBegin()
          for _i69 in xrange(_size65):
            _elem70 = WebEntityCreationRule()
            _elem70.read(iprot)
            self.success.append(_elem70)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getWebEntityCreationRules_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter71 in self.success:
        iter71.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deleteWebEntityCreationRule_args:
  """
  Attributes:
   - webEntityCreationRule
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'webEntityCreationRule', (WebEntityCreationRule, WebEntityCreationRule.thrift_spec), None, ), # 1
  )

  def __init__(self, webEntityCreationRule=None,):
    self.webEntityCreationRule = webEntityCreationRule

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.webEntityCreationRule = WebEntityCreationRule()
          self.webEntityCreationRule.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deleteWebEntityCreationRule_args')
    if self.webEntityCreationRule is not None:
      oprot.writeFieldBegin('webEntityCreationRule', TType.STRUCT, 1)
      self.webEntityCreationRule.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deleteWebEntityCreationRule_result:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deleteWebEntityCreationRule_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class savePageItems_args:
  """
  Attributes:
   - pageItems
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'pageItems', (TType.STRUCT,(PageItem, PageItem.thrift_spec)), None, ), # 1
  )

  def __init__(self, pageItems=None,):
    self.pageItems = pageItems

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.pageItems = []
          (_etype75, _size72) = iprot.readListBegin()
          for _i76 in xrange(_size72):
            _elem77 = PageItem()
            _elem77.read(iprot)
            self.pageItems.append(_elem77)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('savePageItems_args')
    if self.pageItems is not None:
      oprot.writeFieldBegin('pageItems', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.pageItems))
      for iter78 in self.pageItems:
        iter78.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class savePageItems_result:
  """
  Attributes:
   - me
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'me', (MemoryStructureException, MemoryStructureException.thrift_spec), None, ), # 1
  )

  def __init__(self, me=None,):
    self.me = me

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.me = MemoryStructureException()
          self.me.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('savePageItems_result')
    if self.me is not None:
      oprot.writeFieldBegin('me', TType.STRUCT, 1)
      self.me.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class saveNodeLinks_args:
  """
  Attributes:
   - nodeLinks
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'nodeLinks', (TType.STRUCT,(NodeLink, NodeLink.thrift_spec)), None, ), # 1
  )

  def __init__(self, nodeLinks=None,):
    self.nodeLinks = nodeLinks

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.nodeLinks = []
          (_etype82, _size79) = iprot.readListBegin()
          for _i83 in xrange(_size79):
            _elem84 = NodeLink()
            _elem84.read(iprot)
            self.nodeLinks.append(_elem84)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('saveNodeLinks_args')
    if self.nodeLinks is not None:
      oprot.writeFieldBegin('nodeLinks', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.nodeLinks))
      for iter85 in self.nodeLinks:
        iter85.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class saveNodeLinks_result:
  """
  Attributes:
   - me
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'me', (MemoryStructureException, MemoryStructureException.thrift_spec), None, ), # 1
  )

  def __init__(self, me=None,):
    self.me = me

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.me = MemoryStructureException()
          self.me.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('saveNodeLinks_result')
    if self.me is not None:
      oprot.writeFieldBegin('me', TType.STRUCT, 1)
      self.me.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class addAliastoWebEntity_args:
  """
  Attributes:
   - id
   - lru
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'id', None, None, ), # 1
    (2, TType.STRING, 'lru', None, None, ), # 2
  )

  def __init__(self, id=None, lru=None,):
    self.id = id
    self.lru = lru

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.lru = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addAliastoWebEntity_args')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.STRING, 1)
      oprot.writeString(self.id)
      oprot.writeFieldEnd()
    if self.lru is not None:
      oprot.writeFieldBegin('lru', TType.STRING, 2)
      oprot.writeString(self.lru)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class addAliastoWebEntity_result:
  """
  Attributes:
   - me
   - x
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'me', (MemoryStructureException, MemoryStructureException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'x', (ObjectNotFoundException, ObjectNotFoundException.thrift_spec), None, ), # 2
  )

  def __init__(self, me=None, x=None,):
    self.me = me
    self.x = x

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.me = MemoryStructureException()
          self.me.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.x = ObjectNotFoundException()
          self.x.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addAliastoWebEntity_result')
    if self.me is not None:
      oprot.writeFieldBegin('me', TType.STRUCT, 1)
      self.me.write(oprot)
      oprot.writeFieldEnd()
    if self.x is not None:
      oprot.writeFieldBegin('x', TType.STRUCT, 2)
      self.x.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getWebEntityNetwork_args:
  """
  Attributes:
   - format
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'format', None, None, ), # 1
  )

  def __init__(self, format=None,):
    self.format = format

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.format = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getWebEntityNetwork_args')
    if self.format is not None:
      oprot.writeFieldBegin('format', TType.STRING, 1)
      oprot.writeString(self.format)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getWebEntityNetwork_result:
  """
  Attributes:
   - success
   - me
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'me', (MemoryStructureException, MemoryStructureException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, me=None,):
    self.success = success
    self.me = me

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.me = MemoryStructureException()
          self.me.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getWebEntityNetwork_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.me is not None:
      oprot.writeFieldBegin('me', TType.STRUCT, 1)
      self.me.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getWebEntityEgoNetwork_args:
  """
  Attributes:
   - webEntityId
   - distance
   - format
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'webEntityId', None, None, ), # 1
    (2, TType.I32, 'distance', None, None, ), # 2
    (3, TType.STRING, 'format', None, None, ), # 3
  )

  def __init__(self, webEntityId=None, distance=None, format=None,):
    self.webEntityId = webEntityId
    self.distance = distance
    self.format = format

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.webEntityId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.distance = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.format = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getWebEntityEgoNetwork_args')
    if self.webEntityId is not None:
      oprot.writeFieldBegin('webEntityId', TType.STRING, 1)
      oprot.writeString(self.webEntityId)
      oprot.writeFieldEnd()
    if self.distance is not None:
      oprot.writeFieldBegin('distance', TType.I32, 2)
      oprot.writeI32(self.distance)
      oprot.writeFieldEnd()
    if self.format is not None:
      oprot.writeFieldBegin('format', TType.STRING, 3)
      oprot.writeString(self.format)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getWebEntityEgoNetwork_result:
  """
  Attributes:
   - success
   - me
   - x
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'me', (MemoryStructureException, MemoryStructureException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'x', (ObjectNotFoundException, ObjectNotFoundException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, me=None, x=None,):
    self.success = success
    self.me = me
    self.x = x

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.me = MemoryStructureException()
          self.me.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.x = ObjectNotFoundException()
          self.x.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getWebEntityEgoNetwork_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.me is not None:
      oprot.writeFieldBegin('me', TType.STRUCT, 1)
      self.me.write(oprot)
      oprot.writeFieldEnd()
    if self.x is not None:
      oprot.writeFieldBegin('x', TType.STRUCT, 2)
      self.x.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
