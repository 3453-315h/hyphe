/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package fr.sciencespo.medialab.hci.memorystructure.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class WebEntityInfo implements org.apache.thrift.TBase<WebEntityInfo, WebEntityInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WebEntityInfo");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField FLAG_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("flagType", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LRU_PREFIX_FIELD_DESC = new org.apache.thrift.protocol.TField("lruPrefix", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField REG_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("regExp", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new WebEntityInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new WebEntityInfoTupleSchemeFactory());
  }

  public String id; // required
  public String flagType; // required
  public String lruPrefix; // required
  public String regExp; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    FLAG_TYPE((short)2, "flagType"),
    LRU_PREFIX((short)3, "lruPrefix"),
    REG_EXP((short)4, "regExp");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // FLAG_TYPE
          return FLAG_TYPE;
        case 3: // LRU_PREFIX
          return LRU_PREFIX;
        case 4: // REG_EXP
          return REG_EXP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FLAG_TYPE, new org.apache.thrift.meta_data.FieldMetaData("flagType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LRU_PREFIX, new org.apache.thrift.meta_data.FieldMetaData("lruPrefix", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REG_EXP, new org.apache.thrift.meta_data.FieldMetaData("regExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WebEntityInfo.class, metaDataMap);
  }

  public WebEntityInfo() {
  }

  public WebEntityInfo(
    String id,
    String flagType,
    String lruPrefix,
    String regExp)
  {
    this();
    this.id = id;
    this.flagType = flagType;
    this.lruPrefix = lruPrefix;
    this.regExp = regExp;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public WebEntityInfo(WebEntityInfo other) {
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetFlagType()) {
      this.flagType = other.flagType;
    }
    if (other.isSetLruPrefix()) {
      this.lruPrefix = other.lruPrefix;
    }
    if (other.isSetRegExp()) {
      this.regExp = other.regExp;
    }
  }

  public WebEntityInfo deepCopy() {
    return new WebEntityInfo(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.flagType = null;
    this.lruPrefix = null;
    this.regExp = null;
  }

  public String getId() {
    return this.id;
  }

  public WebEntityInfo setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getFlagType() {
    return this.flagType;
  }

  public WebEntityInfo setFlagType(String flagType) {
    this.flagType = flagType;
    return this;
  }

  public void unsetFlagType() {
    this.flagType = null;
  }

  /** Returns true if field flagType is set (has been assigned a value) and false otherwise */
  public boolean isSetFlagType() {
    return this.flagType != null;
  }

  public void setFlagTypeIsSet(boolean value) {
    if (!value) {
      this.flagType = null;
    }
  }

  public String getLruPrefix() {
    return this.lruPrefix;
  }

  public WebEntityInfo setLruPrefix(String lruPrefix) {
    this.lruPrefix = lruPrefix;
    return this;
  }

  public void unsetLruPrefix() {
    this.lruPrefix = null;
  }

  /** Returns true if field lruPrefix is set (has been assigned a value) and false otherwise */
  public boolean isSetLruPrefix() {
    return this.lruPrefix != null;
  }

  public void setLruPrefixIsSet(boolean value) {
    if (!value) {
      this.lruPrefix = null;
    }
  }

  public String getRegExp() {
    return this.regExp;
  }

  public WebEntityInfo setRegExp(String regExp) {
    this.regExp = regExp;
    return this;
  }

  public void unsetRegExp() {
    this.regExp = null;
  }

  /** Returns true if field regExp is set (has been assigned a value) and false otherwise */
  public boolean isSetRegExp() {
    return this.regExp != null;
  }

  public void setRegExpIsSet(boolean value) {
    if (!value) {
      this.regExp = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case FLAG_TYPE:
      if (value == null) {
        unsetFlagType();
      } else {
        setFlagType((String)value);
      }
      break;

    case LRU_PREFIX:
      if (value == null) {
        unsetLruPrefix();
      } else {
        setLruPrefix((String)value);
      }
      break;

    case REG_EXP:
      if (value == null) {
        unsetRegExp();
      } else {
        setRegExp((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case FLAG_TYPE:
      return getFlagType();

    case LRU_PREFIX:
      return getLruPrefix();

    case REG_EXP:
      return getRegExp();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case FLAG_TYPE:
      return isSetFlagType();
    case LRU_PREFIX:
      return isSetLruPrefix();
    case REG_EXP:
      return isSetRegExp();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof WebEntityInfo)
      return this.equals((WebEntityInfo)that);
    return false;
  }

  public boolean equals(WebEntityInfo that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_flagType = true && this.isSetFlagType();
    boolean that_present_flagType = true && that.isSetFlagType();
    if (this_present_flagType || that_present_flagType) {
      if (!(this_present_flagType && that_present_flagType))
        return false;
      if (!this.flagType.equals(that.flagType))
        return false;
    }

    boolean this_present_lruPrefix = true && this.isSetLruPrefix();
    boolean that_present_lruPrefix = true && that.isSetLruPrefix();
    if (this_present_lruPrefix || that_present_lruPrefix) {
      if (!(this_present_lruPrefix && that_present_lruPrefix))
        return false;
      if (!this.lruPrefix.equals(that.lruPrefix))
        return false;
    }

    boolean this_present_regExp = true && this.isSetRegExp();
    boolean that_present_regExp = true && that.isSetRegExp();
    if (this_present_regExp || that_present_regExp) {
      if (!(this_present_regExp && that_present_regExp))
        return false;
      if (!this.regExp.equals(that.regExp))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(WebEntityInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    WebEntityInfo typedOther = (WebEntityInfo)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlagType()).compareTo(typedOther.isSetFlagType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlagType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flagType, typedOther.flagType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLruPrefix()).compareTo(typedOther.isSetLruPrefix());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLruPrefix()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lruPrefix, typedOther.lruPrefix);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegExp()).compareTo(typedOther.isSetRegExp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegExp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regExp, typedOther.regExp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("WebEntityInfo(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("flagType:");
    if (this.flagType == null) {
      sb.append("null");
    } else {
      sb.append(this.flagType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lruPrefix:");
    if (this.lruPrefix == null) {
      sb.append("null");
    } else {
      sb.append(this.lruPrefix);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("regExp:");
    if (this.regExp == null) {
      sb.append("null");
    } else {
      sb.append(this.regExp);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WebEntityInfoStandardSchemeFactory implements SchemeFactory {
    public WebEntityInfoStandardScheme getScheme() {
      return new WebEntityInfoStandardScheme();
    }
  }

  private static class WebEntityInfoStandardScheme extends StandardScheme<WebEntityInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, WebEntityInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FLAG_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.flagType = iprot.readString();
              struct.setFlagTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LRU_PREFIX
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lruPrefix = iprot.readString();
              struct.setLruPrefixIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REG_EXP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.regExp = iprot.readString();
              struct.setRegExpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, WebEntityInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.flagType != null) {
        oprot.writeFieldBegin(FLAG_TYPE_FIELD_DESC);
        oprot.writeString(struct.flagType);
        oprot.writeFieldEnd();
      }
      if (struct.lruPrefix != null) {
        oprot.writeFieldBegin(LRU_PREFIX_FIELD_DESC);
        oprot.writeString(struct.lruPrefix);
        oprot.writeFieldEnd();
      }
      if (struct.regExp != null) {
        oprot.writeFieldBegin(REG_EXP_FIELD_DESC);
        oprot.writeString(struct.regExp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WebEntityInfoTupleSchemeFactory implements SchemeFactory {
    public WebEntityInfoTupleScheme getScheme() {
      return new WebEntityInfoTupleScheme();
    }
  }

  private static class WebEntityInfoTupleScheme extends TupleScheme<WebEntityInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, WebEntityInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetFlagType()) {
        optionals.set(1);
      }
      if (struct.isSetLruPrefix()) {
        optionals.set(2);
      }
      if (struct.isSetRegExp()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetFlagType()) {
        oprot.writeString(struct.flagType);
      }
      if (struct.isSetLruPrefix()) {
        oprot.writeString(struct.lruPrefix);
      }
      if (struct.isSetRegExp()) {
        oprot.writeString(struct.regExp);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, WebEntityInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.flagType = iprot.readString();
        struct.setFlagTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.lruPrefix = iprot.readString();
        struct.setLruPrefixIsSet(true);
      }
      if (incoming.get(3)) {
        struct.regExp = iprot.readString();
        struct.setRegExpIsSet(true);
      }
    }
  }

}

