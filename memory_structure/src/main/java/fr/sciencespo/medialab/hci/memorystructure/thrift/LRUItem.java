/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package fr.sciencespo.medialab.hci.memorystructure.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class LRUItem implements org.apache.thrift.TBase<LRUItem, LRUItem._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LRUItem");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LRU_FIELD_DESC = new org.apache.thrift.protocol.TField("lru", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CRAWLER_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("crawlerTimestamp", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField HTTP_STATUS_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("httpStatusCode", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField DEPTH_FIELD_DESC = new org.apache.thrift.protocol.TField("depth", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField ERROR_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("errorCode", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField IS_FULL_PRECISION_FIELD_DESC = new org.apache.thrift.protocol.TField("isFullPrecision", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField IS_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("isNode", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField IS_PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("isPage", org.apache.thrift.protocol.TType.BOOL, (short)10);
  private static final org.apache.thrift.protocol.TField IS_WEB_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("isWebEntity", org.apache.thrift.protocol.TType.BOOL, (short)11);
  private static final org.apache.thrift.protocol.TField METADATA_ITEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("metadataItems", org.apache.thrift.protocol.TType.LIST, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LRUItemStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LRUItemTupleSchemeFactory());
  }

  public String id; // required
  public String url; // required
  public String lru; // required
  public String crawlerTimestamp; // required
  public int httpStatusCode; // required
  public int depth; // required
  public String errorCode; // required
  public boolean isFullPrecision; // required
  public boolean isNode; // required
  public boolean isPage; // required
  public boolean isWebEntity; // required
  public List<MetadataItem> metadataItems; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    URL((short)2, "url"),
    LRU((short)3, "lru"),
    CRAWLER_TIMESTAMP((short)4, "crawlerTimestamp"),
    HTTP_STATUS_CODE((short)5, "httpStatusCode"),
    DEPTH((short)6, "depth"),
    ERROR_CODE((short)7, "errorCode"),
    IS_FULL_PRECISION((short)8, "isFullPrecision"),
    IS_NODE((short)9, "isNode"),
    IS_PAGE((short)10, "isPage"),
    IS_WEB_ENTITY((short)11, "isWebEntity"),
    METADATA_ITEMS((short)12, "metadataItems");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // URL
          return URL;
        case 3: // LRU
          return LRU;
        case 4: // CRAWLER_TIMESTAMP
          return CRAWLER_TIMESTAMP;
        case 5: // HTTP_STATUS_CODE
          return HTTP_STATUS_CODE;
        case 6: // DEPTH
          return DEPTH;
        case 7: // ERROR_CODE
          return ERROR_CODE;
        case 8: // IS_FULL_PRECISION
          return IS_FULL_PRECISION;
        case 9: // IS_NODE
          return IS_NODE;
        case 10: // IS_PAGE
          return IS_PAGE;
        case 11: // IS_WEB_ENTITY
          return IS_WEB_ENTITY;
        case 12: // METADATA_ITEMS
          return METADATA_ITEMS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __HTTPSTATUSCODE_ISSET_ID = 0;
  private static final int __DEPTH_ISSET_ID = 1;
  private static final int __ISFULLPRECISION_ISSET_ID = 2;
  private static final int __ISNODE_ISSET_ID = 3;
  private static final int __ISPAGE_ISSET_ID = 4;
  private static final int __ISWEBENTITY_ISSET_ID = 5;
  private BitSet __isset_bit_vector = new BitSet(6);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LRU, new org.apache.thrift.meta_data.FieldMetaData("lru", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CRAWLER_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("crawlerTimestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HTTP_STATUS_CODE, new org.apache.thrift.meta_data.FieldMetaData("httpStatusCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEPTH, new org.apache.thrift.meta_data.FieldMetaData("depth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ERROR_CODE, new org.apache.thrift.meta_data.FieldMetaData("errorCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_FULL_PRECISION, new org.apache.thrift.meta_data.FieldMetaData("isFullPrecision", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_NODE, new org.apache.thrift.meta_data.FieldMetaData("isNode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_PAGE, new org.apache.thrift.meta_data.FieldMetaData("isPage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_WEB_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("isWebEntity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.METADATA_ITEMS, new org.apache.thrift.meta_data.FieldMetaData("metadataItems", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MetadataItem.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LRUItem.class, metaDataMap);
  }

  public LRUItem() {
    this.isFullPrecision = false;

  }

  public LRUItem(
    String id,
    String url,
    String lru,
    String crawlerTimestamp,
    int httpStatusCode,
    int depth,
    String errorCode,
    boolean isFullPrecision,
    boolean isNode,
    boolean isPage,
    boolean isWebEntity,
    List<MetadataItem> metadataItems)
  {
    this();
    this.id = id;
    this.url = url;
    this.lru = lru;
    this.crawlerTimestamp = crawlerTimestamp;
    this.httpStatusCode = httpStatusCode;
    setHttpStatusCodeIsSet(true);
    this.depth = depth;
    setDepthIsSet(true);
    this.errorCode = errorCode;
    this.isFullPrecision = isFullPrecision;
    setIsFullPrecisionIsSet(true);
    this.isNode = isNode;
    setIsNodeIsSet(true);
    this.isPage = isPage;
    setIsPageIsSet(true);
    this.isWebEntity = isWebEntity;
    setIsWebEntityIsSet(true);
    this.metadataItems = metadataItems;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LRUItem(LRUItem other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetUrl()) {
      this.url = other.url;
    }
    if (other.isSetLru()) {
      this.lru = other.lru;
    }
    if (other.isSetCrawlerTimestamp()) {
      this.crawlerTimestamp = other.crawlerTimestamp;
    }
    this.httpStatusCode = other.httpStatusCode;
    this.depth = other.depth;
    if (other.isSetErrorCode()) {
      this.errorCode = other.errorCode;
    }
    this.isFullPrecision = other.isFullPrecision;
    this.isNode = other.isNode;
    this.isPage = other.isPage;
    this.isWebEntity = other.isWebEntity;
    if (other.isSetMetadataItems()) {
      List<MetadataItem> __this__metadataItems = new ArrayList<MetadataItem>();
      for (MetadataItem other_element : other.metadataItems) {
        __this__metadataItems.add(new MetadataItem(other_element));
      }
      this.metadataItems = __this__metadataItems;
    }
  }

  public LRUItem deepCopy() {
    return new LRUItem(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.url = null;
    this.lru = null;
    this.crawlerTimestamp = null;
    setHttpStatusCodeIsSet(false);
    this.httpStatusCode = 0;
    setDepthIsSet(false);
    this.depth = 0;
    this.errorCode = null;
    this.isFullPrecision = false;

    setIsNodeIsSet(false);
    this.isNode = false;
    setIsPageIsSet(false);
    this.isPage = false;
    setIsWebEntityIsSet(false);
    this.isWebEntity = false;
    this.metadataItems = null;
  }

  public String getId() {
    return this.id;
  }

  public LRUItem setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getUrl() {
    return this.url;
  }

  public LRUItem setUrl(String url) {
    this.url = url;
    return this;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  public String getLru() {
    return this.lru;
  }

  public LRUItem setLru(String lru) {
    this.lru = lru;
    return this;
  }

  public void unsetLru() {
    this.lru = null;
  }

  /** Returns true if field lru is set (has been assigned a value) and false otherwise */
  public boolean isSetLru() {
    return this.lru != null;
  }

  public void setLruIsSet(boolean value) {
    if (!value) {
      this.lru = null;
    }
  }

  public String getCrawlerTimestamp() {
    return this.crawlerTimestamp;
  }

  public LRUItem setCrawlerTimestamp(String crawlerTimestamp) {
    this.crawlerTimestamp = crawlerTimestamp;
    return this;
  }

  public void unsetCrawlerTimestamp() {
    this.crawlerTimestamp = null;
  }

  /** Returns true if field crawlerTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetCrawlerTimestamp() {
    return this.crawlerTimestamp != null;
  }

  public void setCrawlerTimestampIsSet(boolean value) {
    if (!value) {
      this.crawlerTimestamp = null;
    }
  }

  public int getHttpStatusCode() {
    return this.httpStatusCode;
  }

  public LRUItem setHttpStatusCode(int httpStatusCode) {
    this.httpStatusCode = httpStatusCode;
    setHttpStatusCodeIsSet(true);
    return this;
  }

  public void unsetHttpStatusCode() {
    __isset_bit_vector.clear(__HTTPSTATUSCODE_ISSET_ID);
  }

  /** Returns true if field httpStatusCode is set (has been assigned a value) and false otherwise */
  public boolean isSetHttpStatusCode() {
    return __isset_bit_vector.get(__HTTPSTATUSCODE_ISSET_ID);
  }

  public void setHttpStatusCodeIsSet(boolean value) {
    __isset_bit_vector.set(__HTTPSTATUSCODE_ISSET_ID, value);
  }

  public int getDepth() {
    return this.depth;
  }

  public LRUItem setDepth(int depth) {
    this.depth = depth;
    setDepthIsSet(true);
    return this;
  }

  public void unsetDepth() {
    __isset_bit_vector.clear(__DEPTH_ISSET_ID);
  }

  /** Returns true if field depth is set (has been assigned a value) and false otherwise */
  public boolean isSetDepth() {
    return __isset_bit_vector.get(__DEPTH_ISSET_ID);
  }

  public void setDepthIsSet(boolean value) {
    __isset_bit_vector.set(__DEPTH_ISSET_ID, value);
  }

  public String getErrorCode() {
    return this.errorCode;
  }

  public LRUItem setErrorCode(String errorCode) {
    this.errorCode = errorCode;
    return this;
  }

  public void unsetErrorCode() {
    this.errorCode = null;
  }

  /** Returns true if field errorCode is set (has been assigned a value) and false otherwise */
  public boolean isSetErrorCode() {
    return this.errorCode != null;
  }

  public void setErrorCodeIsSet(boolean value) {
    if (!value) {
      this.errorCode = null;
    }
  }

  public boolean isIsFullPrecision() {
    return this.isFullPrecision;
  }

  public LRUItem setIsFullPrecision(boolean isFullPrecision) {
    this.isFullPrecision = isFullPrecision;
    setIsFullPrecisionIsSet(true);
    return this;
  }

  public void unsetIsFullPrecision() {
    __isset_bit_vector.clear(__ISFULLPRECISION_ISSET_ID);
  }

  /** Returns true if field isFullPrecision is set (has been assigned a value) and false otherwise */
  public boolean isSetIsFullPrecision() {
    return __isset_bit_vector.get(__ISFULLPRECISION_ISSET_ID);
  }

  public void setIsFullPrecisionIsSet(boolean value) {
    __isset_bit_vector.set(__ISFULLPRECISION_ISSET_ID, value);
  }

  public boolean isIsNode() {
    return this.isNode;
  }

  public LRUItem setIsNode(boolean isNode) {
    this.isNode = isNode;
    setIsNodeIsSet(true);
    return this;
  }

  public void unsetIsNode() {
    __isset_bit_vector.clear(__ISNODE_ISSET_ID);
  }

  /** Returns true if field isNode is set (has been assigned a value) and false otherwise */
  public boolean isSetIsNode() {
    return __isset_bit_vector.get(__ISNODE_ISSET_ID);
  }

  public void setIsNodeIsSet(boolean value) {
    __isset_bit_vector.set(__ISNODE_ISSET_ID, value);
  }

  public boolean isIsPage() {
    return this.isPage;
  }

  public LRUItem setIsPage(boolean isPage) {
    this.isPage = isPage;
    setIsPageIsSet(true);
    return this;
  }

  public void unsetIsPage() {
    __isset_bit_vector.clear(__ISPAGE_ISSET_ID);
  }

  /** Returns true if field isPage is set (has been assigned a value) and false otherwise */
  public boolean isSetIsPage() {
    return __isset_bit_vector.get(__ISPAGE_ISSET_ID);
  }

  public void setIsPageIsSet(boolean value) {
    __isset_bit_vector.set(__ISPAGE_ISSET_ID, value);
  }

  public boolean isIsWebEntity() {
    return this.isWebEntity;
  }

  public LRUItem setIsWebEntity(boolean isWebEntity) {
    this.isWebEntity = isWebEntity;
    setIsWebEntityIsSet(true);
    return this;
  }

  public void unsetIsWebEntity() {
    __isset_bit_vector.clear(__ISWEBENTITY_ISSET_ID);
  }

  /** Returns true if field isWebEntity is set (has been assigned a value) and false otherwise */
  public boolean isSetIsWebEntity() {
    return __isset_bit_vector.get(__ISWEBENTITY_ISSET_ID);
  }

  public void setIsWebEntityIsSet(boolean value) {
    __isset_bit_vector.set(__ISWEBENTITY_ISSET_ID, value);
  }

  public int getMetadataItemsSize() {
    return (this.metadataItems == null) ? 0 : this.metadataItems.size();
  }

  public java.util.Iterator<MetadataItem> getMetadataItemsIterator() {
    return (this.metadataItems == null) ? null : this.metadataItems.iterator();
  }

  public void addToMetadataItems(MetadataItem elem) {
    if (this.metadataItems == null) {
      this.metadataItems = new ArrayList<MetadataItem>();
    }
    this.metadataItems.add(elem);
  }

  public List<MetadataItem> getMetadataItems() {
    return this.metadataItems;
  }

  public LRUItem setMetadataItems(List<MetadataItem> metadataItems) {
    this.metadataItems = metadataItems;
    return this;
  }

  public void unsetMetadataItems() {
    this.metadataItems = null;
  }

  /** Returns true if field metadataItems is set (has been assigned a value) and false otherwise */
  public boolean isSetMetadataItems() {
    return this.metadataItems != null;
  }

  public void setMetadataItemsIsSet(boolean value) {
    if (!value) {
      this.metadataItems = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((String)value);
      }
      break;

    case LRU:
      if (value == null) {
        unsetLru();
      } else {
        setLru((String)value);
      }
      break;

    case CRAWLER_TIMESTAMP:
      if (value == null) {
        unsetCrawlerTimestamp();
      } else {
        setCrawlerTimestamp((String)value);
      }
      break;

    case HTTP_STATUS_CODE:
      if (value == null) {
        unsetHttpStatusCode();
      } else {
        setHttpStatusCode((Integer)value);
      }
      break;

    case DEPTH:
      if (value == null) {
        unsetDepth();
      } else {
        setDepth((Integer)value);
      }
      break;

    case ERROR_CODE:
      if (value == null) {
        unsetErrorCode();
      } else {
        setErrorCode((String)value);
      }
      break;

    case IS_FULL_PRECISION:
      if (value == null) {
        unsetIsFullPrecision();
      } else {
        setIsFullPrecision((Boolean)value);
      }
      break;

    case IS_NODE:
      if (value == null) {
        unsetIsNode();
      } else {
        setIsNode((Boolean)value);
      }
      break;

    case IS_PAGE:
      if (value == null) {
        unsetIsPage();
      } else {
        setIsPage((Boolean)value);
      }
      break;

    case IS_WEB_ENTITY:
      if (value == null) {
        unsetIsWebEntity();
      } else {
        setIsWebEntity((Boolean)value);
      }
      break;

    case METADATA_ITEMS:
      if (value == null) {
        unsetMetadataItems();
      } else {
        setMetadataItems((List<MetadataItem>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case URL:
      return getUrl();

    case LRU:
      return getLru();

    case CRAWLER_TIMESTAMP:
      return getCrawlerTimestamp();

    case HTTP_STATUS_CODE:
      return Integer.valueOf(getHttpStatusCode());

    case DEPTH:
      return Integer.valueOf(getDepth());

    case ERROR_CODE:
      return getErrorCode();

    case IS_FULL_PRECISION:
      return Boolean.valueOf(isIsFullPrecision());

    case IS_NODE:
      return Boolean.valueOf(isIsNode());

    case IS_PAGE:
      return Boolean.valueOf(isIsPage());

    case IS_WEB_ENTITY:
      return Boolean.valueOf(isIsWebEntity());

    case METADATA_ITEMS:
      return getMetadataItems();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case URL:
      return isSetUrl();
    case LRU:
      return isSetLru();
    case CRAWLER_TIMESTAMP:
      return isSetCrawlerTimestamp();
    case HTTP_STATUS_CODE:
      return isSetHttpStatusCode();
    case DEPTH:
      return isSetDepth();
    case ERROR_CODE:
      return isSetErrorCode();
    case IS_FULL_PRECISION:
      return isSetIsFullPrecision();
    case IS_NODE:
      return isSetIsNode();
    case IS_PAGE:
      return isSetIsPage();
    case IS_WEB_ENTITY:
      return isSetIsWebEntity();
    case METADATA_ITEMS:
      return isSetMetadataItems();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LRUItem)
      return this.equals((LRUItem)that);
    return false;
  }

  public boolean equals(LRUItem that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    boolean this_present_lru = true && this.isSetLru();
    boolean that_present_lru = true && that.isSetLru();
    if (this_present_lru || that_present_lru) {
      if (!(this_present_lru && that_present_lru))
        return false;
      if (!this.lru.equals(that.lru))
        return false;
    }

    boolean this_present_crawlerTimestamp = true && this.isSetCrawlerTimestamp();
    boolean that_present_crawlerTimestamp = true && that.isSetCrawlerTimestamp();
    if (this_present_crawlerTimestamp || that_present_crawlerTimestamp) {
      if (!(this_present_crawlerTimestamp && that_present_crawlerTimestamp))
        return false;
      if (!this.crawlerTimestamp.equals(that.crawlerTimestamp))
        return false;
    }

    boolean this_present_httpStatusCode = true;
    boolean that_present_httpStatusCode = true;
    if (this_present_httpStatusCode || that_present_httpStatusCode) {
      if (!(this_present_httpStatusCode && that_present_httpStatusCode))
        return false;
      if (this.httpStatusCode != that.httpStatusCode)
        return false;
    }

    boolean this_present_depth = true;
    boolean that_present_depth = true;
    if (this_present_depth || that_present_depth) {
      if (!(this_present_depth && that_present_depth))
        return false;
      if (this.depth != that.depth)
        return false;
    }

    boolean this_present_errorCode = true && this.isSetErrorCode();
    boolean that_present_errorCode = true && that.isSetErrorCode();
    if (this_present_errorCode || that_present_errorCode) {
      if (!(this_present_errorCode && that_present_errorCode))
        return false;
      if (!this.errorCode.equals(that.errorCode))
        return false;
    }

    boolean this_present_isFullPrecision = true;
    boolean that_present_isFullPrecision = true;
    if (this_present_isFullPrecision || that_present_isFullPrecision) {
      if (!(this_present_isFullPrecision && that_present_isFullPrecision))
        return false;
      if (this.isFullPrecision != that.isFullPrecision)
        return false;
    }

    boolean this_present_isNode = true;
    boolean that_present_isNode = true;
    if (this_present_isNode || that_present_isNode) {
      if (!(this_present_isNode && that_present_isNode))
        return false;
      if (this.isNode != that.isNode)
        return false;
    }

    boolean this_present_isPage = true;
    boolean that_present_isPage = true;
    if (this_present_isPage || that_present_isPage) {
      if (!(this_present_isPage && that_present_isPage))
        return false;
      if (this.isPage != that.isPage)
        return false;
    }

    boolean this_present_isWebEntity = true;
    boolean that_present_isWebEntity = true;
    if (this_present_isWebEntity || that_present_isWebEntity) {
      if (!(this_present_isWebEntity && that_present_isWebEntity))
        return false;
      if (this.isWebEntity != that.isWebEntity)
        return false;
    }

    boolean this_present_metadataItems = true && this.isSetMetadataItems();
    boolean that_present_metadataItems = true && that.isSetMetadataItems();
    if (this_present_metadataItems || that_present_metadataItems) {
      if (!(this_present_metadataItems && that_present_metadataItems))
        return false;
      if (!this.metadataItems.equals(that.metadataItems))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(LRUItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    LRUItem typedOther = (LRUItem)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUrl()).compareTo(typedOther.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, typedOther.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLru()).compareTo(typedOther.isSetLru());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLru()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lru, typedOther.lru);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCrawlerTimestamp()).compareTo(typedOther.isSetCrawlerTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCrawlerTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.crawlerTimestamp, typedOther.crawlerTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHttpStatusCode()).compareTo(typedOther.isSetHttpStatusCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHttpStatusCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.httpStatusCode, typedOther.httpStatusCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDepth()).compareTo(typedOther.isSetDepth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDepth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.depth, typedOther.depth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetErrorCode()).compareTo(typedOther.isSetErrorCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrorCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorCode, typedOther.errorCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsFullPrecision()).compareTo(typedOther.isSetIsFullPrecision());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsFullPrecision()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isFullPrecision, typedOther.isFullPrecision);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsNode()).compareTo(typedOther.isSetIsNode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsNode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isNode, typedOther.isNode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsPage()).compareTo(typedOther.isSetIsPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isPage, typedOther.isPage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsWebEntity()).compareTo(typedOther.isSetIsWebEntity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsWebEntity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isWebEntity, typedOther.isWebEntity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMetadataItems()).compareTo(typedOther.isSetMetadataItems());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetadataItems()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadataItems, typedOther.metadataItems);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LRUItem(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("url:");
    if (this.url == null) {
      sb.append("null");
    } else {
      sb.append(this.url);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lru:");
    if (this.lru == null) {
      sb.append("null");
    } else {
      sb.append(this.lru);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("crawlerTimestamp:");
    if (this.crawlerTimestamp == null) {
      sb.append("null");
    } else {
      sb.append(this.crawlerTimestamp);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("httpStatusCode:");
    sb.append(this.httpStatusCode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("depth:");
    sb.append(this.depth);
    first = false;
    if (!first) sb.append(", ");
    sb.append("errorCode:");
    if (this.errorCode == null) {
      sb.append("null");
    } else {
      sb.append(this.errorCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isFullPrecision:");
    sb.append(this.isFullPrecision);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isNode:");
    sb.append(this.isNode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isPage:");
    sb.append(this.isPage);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isWebEntity:");
    sb.append(this.isWebEntity);
    first = false;
    if (!first) sb.append(", ");
    sb.append("metadataItems:");
    if (this.metadataItems == null) {
      sb.append("null");
    } else {
      sb.append(this.metadataItems);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LRUItemStandardSchemeFactory implements SchemeFactory {
    public LRUItemStandardScheme getScheme() {
      return new LRUItemStandardScheme();
    }
  }

  private static class LRUItemStandardScheme extends StandardScheme<LRUItem> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LRUItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.url = iprot.readString();
              struct.setUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LRU
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lru = iprot.readString();
              struct.setLruIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CRAWLER_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.crawlerTimestamp = iprot.readString();
              struct.setCrawlerTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // HTTP_STATUS_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.httpStatusCode = iprot.readI32();
              struct.setHttpStatusCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DEPTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.depth = iprot.readI32();
              struct.setDepthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ERROR_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.errorCode = iprot.readString();
              struct.setErrorCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IS_FULL_PRECISION
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isFullPrecision = iprot.readBool();
              struct.setIsFullPrecisionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // IS_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isNode = iprot.readBool();
              struct.setIsNodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // IS_PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isPage = iprot.readBool();
              struct.setIsPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // IS_WEB_ENTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isWebEntity = iprot.readBool();
              struct.setIsWebEntityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // METADATA_ITEMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.metadataItems = new ArrayList<MetadataItem>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  MetadataItem _elem2; // required
                  _elem2 = new MetadataItem();
                  _elem2.read(iprot);
                  struct.metadataItems.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setMetadataItemsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LRUItem struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.url != null) {
        oprot.writeFieldBegin(URL_FIELD_DESC);
        oprot.writeString(struct.url);
        oprot.writeFieldEnd();
      }
      if (struct.lru != null) {
        oprot.writeFieldBegin(LRU_FIELD_DESC);
        oprot.writeString(struct.lru);
        oprot.writeFieldEnd();
      }
      if (struct.crawlerTimestamp != null) {
        oprot.writeFieldBegin(CRAWLER_TIMESTAMP_FIELD_DESC);
        oprot.writeString(struct.crawlerTimestamp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(HTTP_STATUS_CODE_FIELD_DESC);
      oprot.writeI32(struct.httpStatusCode);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEPTH_FIELD_DESC);
      oprot.writeI32(struct.depth);
      oprot.writeFieldEnd();
      if (struct.errorCode != null) {
        oprot.writeFieldBegin(ERROR_CODE_FIELD_DESC);
        oprot.writeString(struct.errorCode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_FULL_PRECISION_FIELD_DESC);
      oprot.writeBool(struct.isFullPrecision);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_NODE_FIELD_DESC);
      oprot.writeBool(struct.isNode);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_PAGE_FIELD_DESC);
      oprot.writeBool(struct.isPage);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_WEB_ENTITY_FIELD_DESC);
      oprot.writeBool(struct.isWebEntity);
      oprot.writeFieldEnd();
      if (struct.metadataItems != null) {
        oprot.writeFieldBegin(METADATA_ITEMS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.metadataItems.size()));
          for (MetadataItem _iter3 : struct.metadataItems)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LRUItemTupleSchemeFactory implements SchemeFactory {
    public LRUItemTupleScheme getScheme() {
      return new LRUItemTupleScheme();
    }
  }

  private static class LRUItemTupleScheme extends TupleScheme<LRUItem> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LRUItem struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetUrl()) {
        optionals.set(1);
      }
      if (struct.isSetLru()) {
        optionals.set(2);
      }
      if (struct.isSetCrawlerTimestamp()) {
        optionals.set(3);
      }
      if (struct.isSetHttpStatusCode()) {
        optionals.set(4);
      }
      if (struct.isSetDepth()) {
        optionals.set(5);
      }
      if (struct.isSetErrorCode()) {
        optionals.set(6);
      }
      if (struct.isSetIsFullPrecision()) {
        optionals.set(7);
      }
      if (struct.isSetIsNode()) {
        optionals.set(8);
      }
      if (struct.isSetIsPage()) {
        optionals.set(9);
      }
      if (struct.isSetIsWebEntity()) {
        optionals.set(10);
      }
      if (struct.isSetMetadataItems()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetUrl()) {
        oprot.writeString(struct.url);
      }
      if (struct.isSetLru()) {
        oprot.writeString(struct.lru);
      }
      if (struct.isSetCrawlerTimestamp()) {
        oprot.writeString(struct.crawlerTimestamp);
      }
      if (struct.isSetHttpStatusCode()) {
        oprot.writeI32(struct.httpStatusCode);
      }
      if (struct.isSetDepth()) {
        oprot.writeI32(struct.depth);
      }
      if (struct.isSetErrorCode()) {
        oprot.writeString(struct.errorCode);
      }
      if (struct.isSetIsFullPrecision()) {
        oprot.writeBool(struct.isFullPrecision);
      }
      if (struct.isSetIsNode()) {
        oprot.writeBool(struct.isNode);
      }
      if (struct.isSetIsPage()) {
        oprot.writeBool(struct.isPage);
      }
      if (struct.isSetIsWebEntity()) {
        oprot.writeBool(struct.isWebEntity);
      }
      if (struct.isSetMetadataItems()) {
        {
          oprot.writeI32(struct.metadataItems.size());
          for (MetadataItem _iter4 : struct.metadataItems)
          {
            _iter4.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LRUItem struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.url = iprot.readString();
        struct.setUrlIsSet(true);
      }
      if (incoming.get(2)) {
        struct.lru = iprot.readString();
        struct.setLruIsSet(true);
      }
      if (incoming.get(3)) {
        struct.crawlerTimestamp = iprot.readString();
        struct.setCrawlerTimestampIsSet(true);
      }
      if (incoming.get(4)) {
        struct.httpStatusCode = iprot.readI32();
        struct.setHttpStatusCodeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.depth = iprot.readI32();
        struct.setDepthIsSet(true);
      }
      if (incoming.get(6)) {
        struct.errorCode = iprot.readString();
        struct.setErrorCodeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.isFullPrecision = iprot.readBool();
        struct.setIsFullPrecisionIsSet(true);
      }
      if (incoming.get(8)) {
        struct.isNode = iprot.readBool();
        struct.setIsNodeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.isPage = iprot.readBool();
        struct.setIsPageIsSet(true);
      }
      if (incoming.get(10)) {
        struct.isWebEntity = iprot.readBool();
        struct.setIsWebEntityIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.metadataItems = new ArrayList<MetadataItem>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            MetadataItem _elem7; // required
            _elem7 = new MetadataItem();
            _elem7.read(iprot);
            struct.metadataItems.add(_elem7);
          }
        }
        struct.setMetadataItemsIsSet(true);
      }
    }
  }

}

