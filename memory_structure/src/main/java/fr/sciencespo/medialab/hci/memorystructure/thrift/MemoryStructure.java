/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package fr.sciencespo.medialab.hci.memorystructure.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MemoryStructure {

  public interface Iface {

    public Set<String> ping() throws org.apache.thrift.TException;

    /**
     * @param 1 webEntity
     * @return id of the web entity
     * 
     * @param webEntity
     */
    public String updateWebEntity(WebEntity webEntity) throws MemoryStructureException, org.apache.thrift.TException;

    /**
     * @param 1 name
     * @param 2 LRUSet
     * @return a WebEntity object
     * 
     * 
     * @param name
     * @param LRUSet
     */
    public WebEntity createWebEntity(String name, Set<String> LRUSet) throws MemoryStructureException, org.apache.thrift.TException;

    /**
     * @param 1 id
     * @return a WebEntity Object
     * 
     * 
     * @param id
     */
    public WebEntity getWebEntity(String id) throws MemoryStructureException, ObjectNotFoundException, org.apache.thrift.TException;

    /**
     * @return all webentities in the index
     */
    public Set<WebEntity> getWebEntities() throws org.apache.thrift.TException;

    /**
     * @param 1 id
     * @return set of pages for this webentity (may be empty)
     * 
     * @param id
     */
    public Set<PageItem> getPagesFromWebEntity(String id) throws MemoryStructureException, ObjectNotFoundException, org.apache.thrift.TException;

    /**
     * Generates WebEntity links.
     */
    public void generateWebEntityLinks() throws MemoryStructureException, org.apache.thrift.TException;

    /**
     * Clears (empties) the index.
     */
    public void clearIndex() throws MemoryStructureException, org.apache.thrift.TException;

    /**
     * @param 1 pageItems : set of PageItem objects
     * @return id of the created cache
     * 
     * @param pageItems
     */
    public String createCache(Set<PageItem> pageItems) throws MemoryStructureException, org.apache.thrift.TException;

    /**
     * @param 1 cacheId : id of the cache
     * @return number of indexed PageItems
     * 
     * @param cacheId
     */
    public int indexCache(String cacheId) throws MemoryStructureException, ObjectNotFoundException, org.apache.thrift.TException;

    /**
     * @param 1 cacheId : id of the cache
     * @return set of lru prefixes
     * 
     * @param cacheId
     */
    public Set<String> getPrecisionExceptionsFromCache(String cacheId) throws MemoryStructureException, ObjectNotFoundException, org.apache.thrift.TException;

    /**
     * @param 1 cacheId : id of the cache
     * 
     * @param cacheId
     */
    public void createWebEntities(String cacheId) throws MemoryStructureException, ObjectNotFoundException, org.apache.thrift.TException;

    /**
     * @param 1 cacheId : id of the cache
     * 
     * @param cacheId
     */
    public void deleteCache(String cacheId) throws MemoryStructureException, ObjectNotFoundException, org.apache.thrift.TException;

    /**
     * @param 1 pageItemId : id of the pageItem to be
     * 
     * @param pageItemId
     */
    public void markPageWithPrecisionException(String pageItemId) throws MemoryStructureException, ObjectNotFoundException, org.apache.thrift.TException;

    /**
     * Adds or updates a single WebEntityCreationRule to the index. If the rule's LRU is empty, it is set as the
     * DEFAULT rule. If there exists already a rule with this rule's LRU, it is updated, otherwise it is created.
     * 
     * @param 1 webEntityCreationRule : webentity creation rule to save
     * 
     * @param webEntityCreationRule
     */
    public void saveWebEntityCreationRule(WebEntityCreationRule webEntityCreationRule) throws MemoryStructureException, org.apache.thrift.TException;

    /**
     * 
     */
    public Set<WebEntityCreationRule> getWebEntityCreationRules() throws org.apache.thrift.TException;

    /**
     * @param 1 webEntityCreationRule : webentity creation rule to delete
     * 
     * @param webEntityCreationRule
     */
    public void deleteWebEntityCreationRule(WebEntityCreationRule webEntityCreationRule) throws org.apache.thrift.TException;

    /**
     * Saves pages in the index WITHOUT USING THE CACHE.
     * 
     * @param 1 pageItems : set of PageItem objects
     * 
     * @param pageItems
     */
    public void savePageItems(Set<PageItem> pageItems) throws MemoryStructureException, org.apache.thrift.TException;

    /**
     * 
     * @param 1 nodeLinks : set of NodeLink objects
     * 
     * @param nodeLinks
     */
    public void saveNodeLinks(Set<NodeLink> nodeLinks) throws MemoryStructureException, org.apache.thrift.TException;

    /**
     *  *
     *  * @param 1 id : the id of the WebEntity to add this LRU to
     *  * @param 2 lru : the lru to add
     * *
     * 
     * @param id
     * @param lru
     */
    public void addAliastoWebEntity(String id, String lru) throws MemoryStructureException, ObjectNotFoundException, org.apache.thrift.TException;

    /**
     * @param 1 format: must be 'gefx'
     * @return gefx graph
     * 
     * @param format
     */
    public String getWebEntityNetwork(String format) throws MemoryStructureException, org.apache.thrift.TException;

    /**
     * @param 1 webEntityId: id of web entity
     * @param 2 distance: distance
     * @param 3 format: must be 'gefx'
     * @return gefx graph
     * 
     * @param webEntityId
     * @param distance
     * @param format
     */
    public String getWebEntityEgoNetwork(String webEntityId, int distance, String format) throws MemoryStructureException, ObjectNotFoundException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void ping(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.ping_call> resultHandler) throws org.apache.thrift.TException;

    public void updateWebEntity(WebEntity webEntity, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateWebEntity_call> resultHandler) throws org.apache.thrift.TException;

    public void createWebEntity(String name, Set<String> LRUSet, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.createWebEntity_call> resultHandler) throws org.apache.thrift.TException;

    public void getWebEntity(String id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getWebEntity_call> resultHandler) throws org.apache.thrift.TException;

    public void getWebEntities(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getWebEntities_call> resultHandler) throws org.apache.thrift.TException;

    public void getPagesFromWebEntity(String id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getPagesFromWebEntity_call> resultHandler) throws org.apache.thrift.TException;

    public void generateWebEntityLinks(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.generateWebEntityLinks_call> resultHandler) throws org.apache.thrift.TException;

    public void clearIndex(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.clearIndex_call> resultHandler) throws org.apache.thrift.TException;

    public void createCache(Set<PageItem> pageItems, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.createCache_call> resultHandler) throws org.apache.thrift.TException;

    public void indexCache(String cacheId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.indexCache_call> resultHandler) throws org.apache.thrift.TException;

    public void getPrecisionExceptionsFromCache(String cacheId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getPrecisionExceptionsFromCache_call> resultHandler) throws org.apache.thrift.TException;

    public void createWebEntities(String cacheId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.createWebEntities_call> resultHandler) throws org.apache.thrift.TException;

    public void deleteCache(String cacheId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deleteCache_call> resultHandler) throws org.apache.thrift.TException;

    public void markPageWithPrecisionException(String pageItemId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.markPageWithPrecisionException_call> resultHandler) throws org.apache.thrift.TException;

    public void saveWebEntityCreationRule(WebEntityCreationRule webEntityCreationRule, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.saveWebEntityCreationRule_call> resultHandler) throws org.apache.thrift.TException;

    public void getWebEntityCreationRules(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getWebEntityCreationRules_call> resultHandler) throws org.apache.thrift.TException;

    public void deleteWebEntityCreationRule(WebEntityCreationRule webEntityCreationRule, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deleteWebEntityCreationRule_call> resultHandler) throws org.apache.thrift.TException;

    public void savePageItems(Set<PageItem> pageItems, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.savePageItems_call> resultHandler) throws org.apache.thrift.TException;

    public void saveNodeLinks(Set<NodeLink> nodeLinks, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.saveNodeLinks_call> resultHandler) throws org.apache.thrift.TException;

    public void addAliastoWebEntity(String id, String lru, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addAliastoWebEntity_call> resultHandler) throws org.apache.thrift.TException;

    public void getWebEntityNetwork(String format, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getWebEntityNetwork_call> resultHandler) throws org.apache.thrift.TException;

    public void getWebEntityEgoNetwork(String webEntityId, int distance, String format, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getWebEntityEgoNetwork_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public Set<String> ping() throws org.apache.thrift.TException
    {
      send_ping();
      return recv_ping();
    }

    public void send_ping() throws org.apache.thrift.TException
    {
      ping_args args = new ping_args();
      sendBase("ping", args);
    }

    public Set<String> recv_ping() throws org.apache.thrift.TException
    {
      ping_result result = new ping_result();
      receiveBase(result, "ping");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ping failed: unknown result");
    }

    public String updateWebEntity(WebEntity webEntity) throws MemoryStructureException, org.apache.thrift.TException
    {
      send_updateWebEntity(webEntity);
      return recv_updateWebEntity();
    }

    public void send_updateWebEntity(WebEntity webEntity) throws org.apache.thrift.TException
    {
      updateWebEntity_args args = new updateWebEntity_args();
      args.setWebEntity(webEntity);
      sendBase("updateWebEntity", args);
    }

    public String recv_updateWebEntity() throws MemoryStructureException, org.apache.thrift.TException
    {
      updateWebEntity_result result = new updateWebEntity_result();
      receiveBase(result, "updateWebEntity");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.x != null) {
        throw result.x;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateWebEntity failed: unknown result");
    }

    public WebEntity createWebEntity(String name, Set<String> LRUSet) throws MemoryStructureException, org.apache.thrift.TException
    {
      send_createWebEntity(name, LRUSet);
      return recv_createWebEntity();
    }

    public void send_createWebEntity(String name, Set<String> LRUSet) throws org.apache.thrift.TException
    {
      createWebEntity_args args = new createWebEntity_args();
      args.setName(name);
      args.setLRUSet(LRUSet);
      sendBase("createWebEntity", args);
    }

    public WebEntity recv_createWebEntity() throws MemoryStructureException, org.apache.thrift.TException
    {
      createWebEntity_result result = new createWebEntity_result();
      receiveBase(result, "createWebEntity");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.x != null) {
        throw result.x;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createWebEntity failed: unknown result");
    }

    public WebEntity getWebEntity(String id) throws MemoryStructureException, ObjectNotFoundException, org.apache.thrift.TException
    {
      send_getWebEntity(id);
      return recv_getWebEntity();
    }

    public void send_getWebEntity(String id) throws org.apache.thrift.TException
    {
      getWebEntity_args args = new getWebEntity_args();
      args.setId(id);
      sendBase("getWebEntity", args);
    }

    public WebEntity recv_getWebEntity() throws MemoryStructureException, ObjectNotFoundException, org.apache.thrift.TException
    {
      getWebEntity_result result = new getWebEntity_result();
      receiveBase(result, "getWebEntity");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.me != null) {
        throw result.me;
      }
      if (result.x != null) {
        throw result.x;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getWebEntity failed: unknown result");
    }

    public Set<WebEntity> getWebEntities() throws org.apache.thrift.TException
    {
      send_getWebEntities();
      return recv_getWebEntities();
    }

    public void send_getWebEntities() throws org.apache.thrift.TException
    {
      getWebEntities_args args = new getWebEntities_args();
      sendBase("getWebEntities", args);
    }

    public Set<WebEntity> recv_getWebEntities() throws org.apache.thrift.TException
    {
      getWebEntities_result result = new getWebEntities_result();
      receiveBase(result, "getWebEntities");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getWebEntities failed: unknown result");
    }

    public Set<PageItem> getPagesFromWebEntity(String id) throws MemoryStructureException, ObjectNotFoundException, org.apache.thrift.TException
    {
      send_getPagesFromWebEntity(id);
      return recv_getPagesFromWebEntity();
    }

    public void send_getPagesFromWebEntity(String id) throws org.apache.thrift.TException
    {
      getPagesFromWebEntity_args args = new getPagesFromWebEntity_args();
      args.setId(id);
      sendBase("getPagesFromWebEntity", args);
    }

    public Set<PageItem> recv_getPagesFromWebEntity() throws MemoryStructureException, ObjectNotFoundException, org.apache.thrift.TException
    {
      getPagesFromWebEntity_result result = new getPagesFromWebEntity_result();
      receiveBase(result, "getPagesFromWebEntity");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.me != null) {
        throw result.me;
      }
      if (result.x != null) {
        throw result.x;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPagesFromWebEntity failed: unknown result");
    }

    public void generateWebEntityLinks() throws MemoryStructureException, org.apache.thrift.TException
    {
      send_generateWebEntityLinks();
      recv_generateWebEntityLinks();
    }

    public void send_generateWebEntityLinks() throws org.apache.thrift.TException
    {
      generateWebEntityLinks_args args = new generateWebEntityLinks_args();
      sendBase("generateWebEntityLinks", args);
    }

    public void recv_generateWebEntityLinks() throws MemoryStructureException, org.apache.thrift.TException
    {
      generateWebEntityLinks_result result = new generateWebEntityLinks_result();
      receiveBase(result, "generateWebEntityLinks");
      if (result.x != null) {
        throw result.x;
      }
      return;
    }

    public void clearIndex() throws MemoryStructureException, org.apache.thrift.TException
    {
      send_clearIndex();
      recv_clearIndex();
    }

    public void send_clearIndex() throws org.apache.thrift.TException
    {
      clearIndex_args args = new clearIndex_args();
      sendBase("clearIndex", args);
    }

    public void recv_clearIndex() throws MemoryStructureException, org.apache.thrift.TException
    {
      clearIndex_result result = new clearIndex_result();
      receiveBase(result, "clearIndex");
      if (result.x != null) {
        throw result.x;
      }
      return;
    }

    public String createCache(Set<PageItem> pageItems) throws MemoryStructureException, org.apache.thrift.TException
    {
      send_createCache(pageItems);
      return recv_createCache();
    }

    public void send_createCache(Set<PageItem> pageItems) throws org.apache.thrift.TException
    {
      createCache_args args = new createCache_args();
      args.setPageItems(pageItems);
      sendBase("createCache", args);
    }

    public String recv_createCache() throws MemoryStructureException, org.apache.thrift.TException
    {
      createCache_result result = new createCache_result();
      receiveBase(result, "createCache");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.x != null) {
        throw result.x;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createCache failed: unknown result");
    }

    public int indexCache(String cacheId) throws MemoryStructureException, ObjectNotFoundException, org.apache.thrift.TException
    {
      send_indexCache(cacheId);
      return recv_indexCache();
    }

    public void send_indexCache(String cacheId) throws org.apache.thrift.TException
    {
      indexCache_args args = new indexCache_args();
      args.setCacheId(cacheId);
      sendBase("indexCache", args);
    }

    public int recv_indexCache() throws MemoryStructureException, ObjectNotFoundException, org.apache.thrift.TException
    {
      indexCache_result result = new indexCache_result();
      receiveBase(result, "indexCache");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.me != null) {
        throw result.me;
      }
      if (result.x != null) {
        throw result.x;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "indexCache failed: unknown result");
    }

    public Set<String> getPrecisionExceptionsFromCache(String cacheId) throws MemoryStructureException, ObjectNotFoundException, org.apache.thrift.TException
    {
      send_getPrecisionExceptionsFromCache(cacheId);
      return recv_getPrecisionExceptionsFromCache();
    }

    public void send_getPrecisionExceptionsFromCache(String cacheId) throws org.apache.thrift.TException
    {
      getPrecisionExceptionsFromCache_args args = new getPrecisionExceptionsFromCache_args();
      args.setCacheId(cacheId);
      sendBase("getPrecisionExceptionsFromCache", args);
    }

    public Set<String> recv_getPrecisionExceptionsFromCache() throws MemoryStructureException, ObjectNotFoundException, org.apache.thrift.TException
    {
      getPrecisionExceptionsFromCache_result result = new getPrecisionExceptionsFromCache_result();
      receiveBase(result, "getPrecisionExceptionsFromCache");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.me != null) {
        throw result.me;
      }
      if (result.x != null) {
        throw result.x;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPrecisionExceptionsFromCache failed: unknown result");
    }

    public void createWebEntities(String cacheId) throws MemoryStructureException, ObjectNotFoundException, org.apache.thrift.TException
    {
      send_createWebEntities(cacheId);
      recv_createWebEntities();
    }

    public void send_createWebEntities(String cacheId) throws org.apache.thrift.TException
    {
      createWebEntities_args args = new createWebEntities_args();
      args.setCacheId(cacheId);
      sendBase("createWebEntities", args);
    }

    public void recv_createWebEntities() throws MemoryStructureException, ObjectNotFoundException, org.apache.thrift.TException
    {
      createWebEntities_result result = new createWebEntities_result();
      receiveBase(result, "createWebEntities");
      if (result.me != null) {
        throw result.me;
      }
      if (result.x != null) {
        throw result.x;
      }
      return;
    }

    public void deleteCache(String cacheId) throws MemoryStructureException, ObjectNotFoundException, org.apache.thrift.TException
    {
      send_deleteCache(cacheId);
      recv_deleteCache();
    }

    public void send_deleteCache(String cacheId) throws org.apache.thrift.TException
    {
      deleteCache_args args = new deleteCache_args();
      args.setCacheId(cacheId);
      sendBase("deleteCache", args);
    }

    public void recv_deleteCache() throws MemoryStructureException, ObjectNotFoundException, org.apache.thrift.TException
    {
      deleteCache_result result = new deleteCache_result();
      receiveBase(result, "deleteCache");
      if (result.me != null) {
        throw result.me;
      }
      if (result.x != null) {
        throw result.x;
      }
      return;
    }

    public void markPageWithPrecisionException(String pageItemId) throws MemoryStructureException, ObjectNotFoundException, org.apache.thrift.TException
    {
      send_markPageWithPrecisionException(pageItemId);
      recv_markPageWithPrecisionException();
    }

    public void send_markPageWithPrecisionException(String pageItemId) throws org.apache.thrift.TException
    {
      markPageWithPrecisionException_args args = new markPageWithPrecisionException_args();
      args.setPageItemId(pageItemId);
      sendBase("markPageWithPrecisionException", args);
    }

    public void recv_markPageWithPrecisionException() throws MemoryStructureException, ObjectNotFoundException, org.apache.thrift.TException
    {
      markPageWithPrecisionException_result result = new markPageWithPrecisionException_result();
      receiveBase(result, "markPageWithPrecisionException");
      if (result.me != null) {
        throw result.me;
      }
      if (result.x != null) {
        throw result.x;
      }
      return;
    }

    public void saveWebEntityCreationRule(WebEntityCreationRule webEntityCreationRule) throws MemoryStructureException, org.apache.thrift.TException
    {
      send_saveWebEntityCreationRule(webEntityCreationRule);
      recv_saveWebEntityCreationRule();
    }

    public void send_saveWebEntityCreationRule(WebEntityCreationRule webEntityCreationRule) throws org.apache.thrift.TException
    {
      saveWebEntityCreationRule_args args = new saveWebEntityCreationRule_args();
      args.setWebEntityCreationRule(webEntityCreationRule);
      sendBase("saveWebEntityCreationRule", args);
    }

    public void recv_saveWebEntityCreationRule() throws MemoryStructureException, org.apache.thrift.TException
    {
      saveWebEntityCreationRule_result result = new saveWebEntityCreationRule_result();
      receiveBase(result, "saveWebEntityCreationRule");
      if (result.me != null) {
        throw result.me;
      }
      return;
    }

    public Set<WebEntityCreationRule> getWebEntityCreationRules() throws org.apache.thrift.TException
    {
      send_getWebEntityCreationRules();
      return recv_getWebEntityCreationRules();
    }

    public void send_getWebEntityCreationRules() throws org.apache.thrift.TException
    {
      getWebEntityCreationRules_args args = new getWebEntityCreationRules_args();
      sendBase("getWebEntityCreationRules", args);
    }

    public Set<WebEntityCreationRule> recv_getWebEntityCreationRules() throws org.apache.thrift.TException
    {
      getWebEntityCreationRules_result result = new getWebEntityCreationRules_result();
      receiveBase(result, "getWebEntityCreationRules");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getWebEntityCreationRules failed: unknown result");
    }

    public void deleteWebEntityCreationRule(WebEntityCreationRule webEntityCreationRule) throws org.apache.thrift.TException
    {
      send_deleteWebEntityCreationRule(webEntityCreationRule);
      recv_deleteWebEntityCreationRule();
    }

    public void send_deleteWebEntityCreationRule(WebEntityCreationRule webEntityCreationRule) throws org.apache.thrift.TException
    {
      deleteWebEntityCreationRule_args args = new deleteWebEntityCreationRule_args();
      args.setWebEntityCreationRule(webEntityCreationRule);
      sendBase("deleteWebEntityCreationRule", args);
    }

    public void recv_deleteWebEntityCreationRule() throws org.apache.thrift.TException
    {
      deleteWebEntityCreationRule_result result = new deleteWebEntityCreationRule_result();
      receiveBase(result, "deleteWebEntityCreationRule");
      return;
    }

    public void savePageItems(Set<PageItem> pageItems) throws MemoryStructureException, org.apache.thrift.TException
    {
      send_savePageItems(pageItems);
      recv_savePageItems();
    }

    public void send_savePageItems(Set<PageItem> pageItems) throws org.apache.thrift.TException
    {
      savePageItems_args args = new savePageItems_args();
      args.setPageItems(pageItems);
      sendBase("savePageItems", args);
    }

    public void recv_savePageItems() throws MemoryStructureException, org.apache.thrift.TException
    {
      savePageItems_result result = new savePageItems_result();
      receiveBase(result, "savePageItems");
      if (result.me != null) {
        throw result.me;
      }
      return;
    }

    public void saveNodeLinks(Set<NodeLink> nodeLinks) throws MemoryStructureException, org.apache.thrift.TException
    {
      send_saveNodeLinks(nodeLinks);
      recv_saveNodeLinks();
    }

    public void send_saveNodeLinks(Set<NodeLink> nodeLinks) throws org.apache.thrift.TException
    {
      saveNodeLinks_args args = new saveNodeLinks_args();
      args.setNodeLinks(nodeLinks);
      sendBase("saveNodeLinks", args);
    }

    public void recv_saveNodeLinks() throws MemoryStructureException, org.apache.thrift.TException
    {
      saveNodeLinks_result result = new saveNodeLinks_result();
      receiveBase(result, "saveNodeLinks");
      if (result.me != null) {
        throw result.me;
      }
      return;
    }

    public void addAliastoWebEntity(String id, String lru) throws MemoryStructureException, ObjectNotFoundException, org.apache.thrift.TException
    {
      send_addAliastoWebEntity(id, lru);
      recv_addAliastoWebEntity();
    }

    public void send_addAliastoWebEntity(String id, String lru) throws org.apache.thrift.TException
    {
      addAliastoWebEntity_args args = new addAliastoWebEntity_args();
      args.setId(id);
      args.setLru(lru);
      sendBase("addAliastoWebEntity", args);
    }

    public void recv_addAliastoWebEntity() throws MemoryStructureException, ObjectNotFoundException, org.apache.thrift.TException
    {
      addAliastoWebEntity_result result = new addAliastoWebEntity_result();
      receiveBase(result, "addAliastoWebEntity");
      if (result.me != null) {
        throw result.me;
      }
      if (result.x != null) {
        throw result.x;
      }
      return;
    }

    public String getWebEntityNetwork(String format) throws MemoryStructureException, org.apache.thrift.TException
    {
      send_getWebEntityNetwork(format);
      return recv_getWebEntityNetwork();
    }

    public void send_getWebEntityNetwork(String format) throws org.apache.thrift.TException
    {
      getWebEntityNetwork_args args = new getWebEntityNetwork_args();
      args.setFormat(format);
      sendBase("getWebEntityNetwork", args);
    }

    public String recv_getWebEntityNetwork() throws MemoryStructureException, org.apache.thrift.TException
    {
      getWebEntityNetwork_result result = new getWebEntityNetwork_result();
      receiveBase(result, "getWebEntityNetwork");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.me != null) {
        throw result.me;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getWebEntityNetwork failed: unknown result");
    }

    public String getWebEntityEgoNetwork(String webEntityId, int distance, String format) throws MemoryStructureException, ObjectNotFoundException, org.apache.thrift.TException
    {
      send_getWebEntityEgoNetwork(webEntityId, distance, format);
      return recv_getWebEntityEgoNetwork();
    }

    public void send_getWebEntityEgoNetwork(String webEntityId, int distance, String format) throws org.apache.thrift.TException
    {
      getWebEntityEgoNetwork_args args = new getWebEntityEgoNetwork_args();
      args.setWebEntityId(webEntityId);
      args.setDistance(distance);
      args.setFormat(format);
      sendBase("getWebEntityEgoNetwork", args);
    }

    public String recv_getWebEntityEgoNetwork() throws MemoryStructureException, ObjectNotFoundException, org.apache.thrift.TException
    {
      getWebEntityEgoNetwork_result result = new getWebEntityEgoNetwork_result();
      receiveBase(result, "getWebEntityEgoNetwork");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.me != null) {
        throw result.me;
      }
      if (result.x != null) {
        throw result.x;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getWebEntityEgoNetwork failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void ping(org.apache.thrift.async.AsyncMethodCallback<ping_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ping_call method_call = new ping_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ping_call extends org.apache.thrift.async.TAsyncMethodCall {
      public ping_call(org.apache.thrift.async.AsyncMethodCallback<ping_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ping", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ping_args args = new ping_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Set<String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ping();
      }
    }

    public void updateWebEntity(WebEntity webEntity, org.apache.thrift.async.AsyncMethodCallback<updateWebEntity_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateWebEntity_call method_call = new updateWebEntity_call(webEntity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateWebEntity_call extends org.apache.thrift.async.TAsyncMethodCall {
      private WebEntity webEntity;
      public updateWebEntity_call(WebEntity webEntity, org.apache.thrift.async.AsyncMethodCallback<updateWebEntity_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.webEntity = webEntity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateWebEntity", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateWebEntity_args args = new updateWebEntity_args();
        args.setWebEntity(webEntity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws MemoryStructureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateWebEntity();
      }
    }

    public void createWebEntity(String name, Set<String> LRUSet, org.apache.thrift.async.AsyncMethodCallback<createWebEntity_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createWebEntity_call method_call = new createWebEntity_call(name, LRUSet, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createWebEntity_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String name;
      private Set<String> LRUSet;
      public createWebEntity_call(String name, Set<String> LRUSet, org.apache.thrift.async.AsyncMethodCallback<createWebEntity_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.name = name;
        this.LRUSet = LRUSet;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createWebEntity", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createWebEntity_args args = new createWebEntity_args();
        args.setName(name);
        args.setLRUSet(LRUSet);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public WebEntity getResult() throws MemoryStructureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createWebEntity();
      }
    }

    public void getWebEntity(String id, org.apache.thrift.async.AsyncMethodCallback<getWebEntity_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getWebEntity_call method_call = new getWebEntity_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getWebEntity_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String id;
      public getWebEntity_call(String id, org.apache.thrift.async.AsyncMethodCallback<getWebEntity_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getWebEntity", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getWebEntity_args args = new getWebEntity_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public WebEntity getResult() throws MemoryStructureException, ObjectNotFoundException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getWebEntity();
      }
    }

    public void getWebEntities(org.apache.thrift.async.AsyncMethodCallback<getWebEntities_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getWebEntities_call method_call = new getWebEntities_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getWebEntities_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getWebEntities_call(org.apache.thrift.async.AsyncMethodCallback<getWebEntities_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getWebEntities", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getWebEntities_args args = new getWebEntities_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Set<WebEntity> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getWebEntities();
      }
    }

    public void getPagesFromWebEntity(String id, org.apache.thrift.async.AsyncMethodCallback<getPagesFromWebEntity_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPagesFromWebEntity_call method_call = new getPagesFromWebEntity_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPagesFromWebEntity_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String id;
      public getPagesFromWebEntity_call(String id, org.apache.thrift.async.AsyncMethodCallback<getPagesFromWebEntity_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPagesFromWebEntity", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPagesFromWebEntity_args args = new getPagesFromWebEntity_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Set<PageItem> getResult() throws MemoryStructureException, ObjectNotFoundException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPagesFromWebEntity();
      }
    }

    public void generateWebEntityLinks(org.apache.thrift.async.AsyncMethodCallback<generateWebEntityLinks_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      generateWebEntityLinks_call method_call = new generateWebEntityLinks_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class generateWebEntityLinks_call extends org.apache.thrift.async.TAsyncMethodCall {
      public generateWebEntityLinks_call(org.apache.thrift.async.AsyncMethodCallback<generateWebEntityLinks_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("generateWebEntityLinks", org.apache.thrift.protocol.TMessageType.CALL, 0));
        generateWebEntityLinks_args args = new generateWebEntityLinks_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws MemoryStructureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_generateWebEntityLinks();
      }
    }

    public void clearIndex(org.apache.thrift.async.AsyncMethodCallback<clearIndex_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      clearIndex_call method_call = new clearIndex_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class clearIndex_call extends org.apache.thrift.async.TAsyncMethodCall {
      public clearIndex_call(org.apache.thrift.async.AsyncMethodCallback<clearIndex_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("clearIndex", org.apache.thrift.protocol.TMessageType.CALL, 0));
        clearIndex_args args = new clearIndex_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws MemoryStructureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_clearIndex();
      }
    }

    public void createCache(Set<PageItem> pageItems, org.apache.thrift.async.AsyncMethodCallback<createCache_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createCache_call method_call = new createCache_call(pageItems, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createCache_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Set<PageItem> pageItems;
      public createCache_call(Set<PageItem> pageItems, org.apache.thrift.async.AsyncMethodCallback<createCache_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pageItems = pageItems;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createCache", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createCache_args args = new createCache_args();
        args.setPageItems(pageItems);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws MemoryStructureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createCache();
      }
    }

    public void indexCache(String cacheId, org.apache.thrift.async.AsyncMethodCallback<indexCache_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      indexCache_call method_call = new indexCache_call(cacheId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class indexCache_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String cacheId;
      public indexCache_call(String cacheId, org.apache.thrift.async.AsyncMethodCallback<indexCache_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cacheId = cacheId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("indexCache", org.apache.thrift.protocol.TMessageType.CALL, 0));
        indexCache_args args = new indexCache_args();
        args.setCacheId(cacheId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws MemoryStructureException, ObjectNotFoundException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_indexCache();
      }
    }

    public void getPrecisionExceptionsFromCache(String cacheId, org.apache.thrift.async.AsyncMethodCallback<getPrecisionExceptionsFromCache_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPrecisionExceptionsFromCache_call method_call = new getPrecisionExceptionsFromCache_call(cacheId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPrecisionExceptionsFromCache_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String cacheId;
      public getPrecisionExceptionsFromCache_call(String cacheId, org.apache.thrift.async.AsyncMethodCallback<getPrecisionExceptionsFromCache_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cacheId = cacheId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPrecisionExceptionsFromCache", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPrecisionExceptionsFromCache_args args = new getPrecisionExceptionsFromCache_args();
        args.setCacheId(cacheId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Set<String> getResult() throws MemoryStructureException, ObjectNotFoundException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPrecisionExceptionsFromCache();
      }
    }

    public void createWebEntities(String cacheId, org.apache.thrift.async.AsyncMethodCallback<createWebEntities_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createWebEntities_call method_call = new createWebEntities_call(cacheId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createWebEntities_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String cacheId;
      public createWebEntities_call(String cacheId, org.apache.thrift.async.AsyncMethodCallback<createWebEntities_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cacheId = cacheId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createWebEntities", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createWebEntities_args args = new createWebEntities_args();
        args.setCacheId(cacheId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws MemoryStructureException, ObjectNotFoundException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_createWebEntities();
      }
    }

    public void deleteCache(String cacheId, org.apache.thrift.async.AsyncMethodCallback<deleteCache_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteCache_call method_call = new deleteCache_call(cacheId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteCache_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String cacheId;
      public deleteCache_call(String cacheId, org.apache.thrift.async.AsyncMethodCallback<deleteCache_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cacheId = cacheId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteCache", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteCache_args args = new deleteCache_args();
        args.setCacheId(cacheId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws MemoryStructureException, ObjectNotFoundException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deleteCache();
      }
    }

    public void markPageWithPrecisionException(String pageItemId, org.apache.thrift.async.AsyncMethodCallback<markPageWithPrecisionException_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      markPageWithPrecisionException_call method_call = new markPageWithPrecisionException_call(pageItemId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class markPageWithPrecisionException_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String pageItemId;
      public markPageWithPrecisionException_call(String pageItemId, org.apache.thrift.async.AsyncMethodCallback<markPageWithPrecisionException_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pageItemId = pageItemId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("markPageWithPrecisionException", org.apache.thrift.protocol.TMessageType.CALL, 0));
        markPageWithPrecisionException_args args = new markPageWithPrecisionException_args();
        args.setPageItemId(pageItemId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws MemoryStructureException, ObjectNotFoundException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_markPageWithPrecisionException();
      }
    }

    public void saveWebEntityCreationRule(WebEntityCreationRule webEntityCreationRule, org.apache.thrift.async.AsyncMethodCallback<saveWebEntityCreationRule_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveWebEntityCreationRule_call method_call = new saveWebEntityCreationRule_call(webEntityCreationRule, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveWebEntityCreationRule_call extends org.apache.thrift.async.TAsyncMethodCall {
      private WebEntityCreationRule webEntityCreationRule;
      public saveWebEntityCreationRule_call(WebEntityCreationRule webEntityCreationRule, org.apache.thrift.async.AsyncMethodCallback<saveWebEntityCreationRule_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.webEntityCreationRule = webEntityCreationRule;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveWebEntityCreationRule", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveWebEntityCreationRule_args args = new saveWebEntityCreationRule_args();
        args.setWebEntityCreationRule(webEntityCreationRule);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws MemoryStructureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_saveWebEntityCreationRule();
      }
    }

    public void getWebEntityCreationRules(org.apache.thrift.async.AsyncMethodCallback<getWebEntityCreationRules_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getWebEntityCreationRules_call method_call = new getWebEntityCreationRules_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getWebEntityCreationRules_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getWebEntityCreationRules_call(org.apache.thrift.async.AsyncMethodCallback<getWebEntityCreationRules_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getWebEntityCreationRules", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getWebEntityCreationRules_args args = new getWebEntityCreationRules_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Set<WebEntityCreationRule> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getWebEntityCreationRules();
      }
    }

    public void deleteWebEntityCreationRule(WebEntityCreationRule webEntityCreationRule, org.apache.thrift.async.AsyncMethodCallback<deleteWebEntityCreationRule_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteWebEntityCreationRule_call method_call = new deleteWebEntityCreationRule_call(webEntityCreationRule, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteWebEntityCreationRule_call extends org.apache.thrift.async.TAsyncMethodCall {
      private WebEntityCreationRule webEntityCreationRule;
      public deleteWebEntityCreationRule_call(WebEntityCreationRule webEntityCreationRule, org.apache.thrift.async.AsyncMethodCallback<deleteWebEntityCreationRule_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.webEntityCreationRule = webEntityCreationRule;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteWebEntityCreationRule", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteWebEntityCreationRule_args args = new deleteWebEntityCreationRule_args();
        args.setWebEntityCreationRule(webEntityCreationRule);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deleteWebEntityCreationRule();
      }
    }

    public void savePageItems(Set<PageItem> pageItems, org.apache.thrift.async.AsyncMethodCallback<savePageItems_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      savePageItems_call method_call = new savePageItems_call(pageItems, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class savePageItems_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Set<PageItem> pageItems;
      public savePageItems_call(Set<PageItem> pageItems, org.apache.thrift.async.AsyncMethodCallback<savePageItems_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pageItems = pageItems;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("savePageItems", org.apache.thrift.protocol.TMessageType.CALL, 0));
        savePageItems_args args = new savePageItems_args();
        args.setPageItems(pageItems);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws MemoryStructureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_savePageItems();
      }
    }

    public void saveNodeLinks(Set<NodeLink> nodeLinks, org.apache.thrift.async.AsyncMethodCallback<saveNodeLinks_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveNodeLinks_call method_call = new saveNodeLinks_call(nodeLinks, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveNodeLinks_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Set<NodeLink> nodeLinks;
      public saveNodeLinks_call(Set<NodeLink> nodeLinks, org.apache.thrift.async.AsyncMethodCallback<saveNodeLinks_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nodeLinks = nodeLinks;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveNodeLinks", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveNodeLinks_args args = new saveNodeLinks_args();
        args.setNodeLinks(nodeLinks);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws MemoryStructureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_saveNodeLinks();
      }
    }

    public void addAliastoWebEntity(String id, String lru, org.apache.thrift.async.AsyncMethodCallback<addAliastoWebEntity_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addAliastoWebEntity_call method_call = new addAliastoWebEntity_call(id, lru, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addAliastoWebEntity_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String id;
      private String lru;
      public addAliastoWebEntity_call(String id, String lru, org.apache.thrift.async.AsyncMethodCallback<addAliastoWebEntity_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.lru = lru;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addAliastoWebEntity", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addAliastoWebEntity_args args = new addAliastoWebEntity_args();
        args.setId(id);
        args.setLru(lru);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws MemoryStructureException, ObjectNotFoundException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addAliastoWebEntity();
      }
    }

    public void getWebEntityNetwork(String format, org.apache.thrift.async.AsyncMethodCallback<getWebEntityNetwork_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getWebEntityNetwork_call method_call = new getWebEntityNetwork_call(format, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getWebEntityNetwork_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String format;
      public getWebEntityNetwork_call(String format, org.apache.thrift.async.AsyncMethodCallback<getWebEntityNetwork_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.format = format;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getWebEntityNetwork", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getWebEntityNetwork_args args = new getWebEntityNetwork_args();
        args.setFormat(format);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws MemoryStructureException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getWebEntityNetwork();
      }
    }

    public void getWebEntityEgoNetwork(String webEntityId, int distance, String format, org.apache.thrift.async.AsyncMethodCallback<getWebEntityEgoNetwork_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getWebEntityEgoNetwork_call method_call = new getWebEntityEgoNetwork_call(webEntityId, distance, format, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getWebEntityEgoNetwork_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String webEntityId;
      private int distance;
      private String format;
      public getWebEntityEgoNetwork_call(String webEntityId, int distance, String format, org.apache.thrift.async.AsyncMethodCallback<getWebEntityEgoNetwork_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.webEntityId = webEntityId;
        this.distance = distance;
        this.format = format;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getWebEntityEgoNetwork", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getWebEntityEgoNetwork_args args = new getWebEntityEgoNetwork_args();
        args.setWebEntityId(webEntityId);
        args.setDistance(distance);
        args.setFormat(format);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws MemoryStructureException, ObjectNotFoundException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getWebEntityEgoNetwork();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("ping", new ping());
      processMap.put("updateWebEntity", new updateWebEntity());
      processMap.put("createWebEntity", new createWebEntity());
      processMap.put("getWebEntity", new getWebEntity());
      processMap.put("getWebEntities", new getWebEntities());
      processMap.put("getPagesFromWebEntity", new getPagesFromWebEntity());
      processMap.put("generateWebEntityLinks", new generateWebEntityLinks());
      processMap.put("clearIndex", new clearIndex());
      processMap.put("createCache", new createCache());
      processMap.put("indexCache", new indexCache());
      processMap.put("getPrecisionExceptionsFromCache", new getPrecisionExceptionsFromCache());
      processMap.put("createWebEntities", new createWebEntities());
      processMap.put("deleteCache", new deleteCache());
      processMap.put("markPageWithPrecisionException", new markPageWithPrecisionException());
      processMap.put("saveWebEntityCreationRule", new saveWebEntityCreationRule());
      processMap.put("getWebEntityCreationRules", new getWebEntityCreationRules());
      processMap.put("deleteWebEntityCreationRule", new deleteWebEntityCreationRule());
      processMap.put("savePageItems", new savePageItems());
      processMap.put("saveNodeLinks", new saveNodeLinks());
      processMap.put("addAliastoWebEntity", new addAliastoWebEntity());
      processMap.put("getWebEntityNetwork", new getWebEntityNetwork());
      processMap.put("getWebEntityEgoNetwork", new getWebEntityEgoNetwork());
      return processMap;
    }

    private static class ping<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ping_args> {
      public ping() {
        super("ping");
      }

      protected ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      protected ping_result getResult(I iface, ping_args args) throws org.apache.thrift.TException {
        ping_result result = new ping_result();
        result.success = iface.ping();
        return result;
      }
    }

    private static class updateWebEntity<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateWebEntity_args> {
      public updateWebEntity() {
        super("updateWebEntity");
      }

      protected updateWebEntity_args getEmptyArgsInstance() {
        return new updateWebEntity_args();
      }

      protected updateWebEntity_result getResult(I iface, updateWebEntity_args args) throws org.apache.thrift.TException {
        updateWebEntity_result result = new updateWebEntity_result();
        try {
          result.success = iface.updateWebEntity(args.webEntity);
        } catch (MemoryStructureException x) {
          result.x = x;
        }
        return result;
      }
    }

    private static class createWebEntity<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createWebEntity_args> {
      public createWebEntity() {
        super("createWebEntity");
      }

      protected createWebEntity_args getEmptyArgsInstance() {
        return new createWebEntity_args();
      }

      protected createWebEntity_result getResult(I iface, createWebEntity_args args) throws org.apache.thrift.TException {
        createWebEntity_result result = new createWebEntity_result();
        try {
          result.success = iface.createWebEntity(args.name, args.LRUSet);
        } catch (MemoryStructureException x) {
          result.x = x;
        }
        return result;
      }
    }

    private static class getWebEntity<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getWebEntity_args> {
      public getWebEntity() {
        super("getWebEntity");
      }

      protected getWebEntity_args getEmptyArgsInstance() {
        return new getWebEntity_args();
      }

      protected getWebEntity_result getResult(I iface, getWebEntity_args args) throws org.apache.thrift.TException {
        getWebEntity_result result = new getWebEntity_result();
        try {
          result.success = iface.getWebEntity(args.id);
        } catch (MemoryStructureException me) {
          result.me = me;
        } catch (ObjectNotFoundException x) {
          result.x = x;
        }
        return result;
      }
    }

    private static class getWebEntities<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getWebEntities_args> {
      public getWebEntities() {
        super("getWebEntities");
      }

      protected getWebEntities_args getEmptyArgsInstance() {
        return new getWebEntities_args();
      }

      protected getWebEntities_result getResult(I iface, getWebEntities_args args) throws org.apache.thrift.TException {
        getWebEntities_result result = new getWebEntities_result();
        result.success = iface.getWebEntities();
        return result;
      }
    }

    private static class getPagesFromWebEntity<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPagesFromWebEntity_args> {
      public getPagesFromWebEntity() {
        super("getPagesFromWebEntity");
      }

      protected getPagesFromWebEntity_args getEmptyArgsInstance() {
        return new getPagesFromWebEntity_args();
      }

      protected getPagesFromWebEntity_result getResult(I iface, getPagesFromWebEntity_args args) throws org.apache.thrift.TException {
        getPagesFromWebEntity_result result = new getPagesFromWebEntity_result();
        try {
          result.success = iface.getPagesFromWebEntity(args.id);
        } catch (MemoryStructureException me) {
          result.me = me;
        } catch (ObjectNotFoundException x) {
          result.x = x;
        }
        return result;
      }
    }

    private static class generateWebEntityLinks<I extends Iface> extends org.apache.thrift.ProcessFunction<I, generateWebEntityLinks_args> {
      public generateWebEntityLinks() {
        super("generateWebEntityLinks");
      }

      protected generateWebEntityLinks_args getEmptyArgsInstance() {
        return new generateWebEntityLinks_args();
      }

      protected generateWebEntityLinks_result getResult(I iface, generateWebEntityLinks_args args) throws org.apache.thrift.TException {
        generateWebEntityLinks_result result = new generateWebEntityLinks_result();
        try {
          iface.generateWebEntityLinks();
        } catch (MemoryStructureException x) {
          result.x = x;
        }
        return result;
      }
    }

    private static class clearIndex<I extends Iface> extends org.apache.thrift.ProcessFunction<I, clearIndex_args> {
      public clearIndex() {
        super("clearIndex");
      }

      protected clearIndex_args getEmptyArgsInstance() {
        return new clearIndex_args();
      }

      protected clearIndex_result getResult(I iface, clearIndex_args args) throws org.apache.thrift.TException {
        clearIndex_result result = new clearIndex_result();
        try {
          iface.clearIndex();
        } catch (MemoryStructureException x) {
          result.x = x;
        }
        return result;
      }
    }

    private static class createCache<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createCache_args> {
      public createCache() {
        super("createCache");
      }

      protected createCache_args getEmptyArgsInstance() {
        return new createCache_args();
      }

      protected createCache_result getResult(I iface, createCache_args args) throws org.apache.thrift.TException {
        createCache_result result = new createCache_result();
        try {
          result.success = iface.createCache(args.pageItems);
        } catch (MemoryStructureException x) {
          result.x = x;
        }
        return result;
      }
    }

    private static class indexCache<I extends Iface> extends org.apache.thrift.ProcessFunction<I, indexCache_args> {
      public indexCache() {
        super("indexCache");
      }

      protected indexCache_args getEmptyArgsInstance() {
        return new indexCache_args();
      }

      protected indexCache_result getResult(I iface, indexCache_args args) throws org.apache.thrift.TException {
        indexCache_result result = new indexCache_result();
        try {
          result.success = iface.indexCache(args.cacheId);
          result.setSuccessIsSet(true);
        } catch (MemoryStructureException me) {
          result.me = me;
        } catch (ObjectNotFoundException x) {
          result.x = x;
        }
        return result;
      }
    }

    private static class getPrecisionExceptionsFromCache<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPrecisionExceptionsFromCache_args> {
      public getPrecisionExceptionsFromCache() {
        super("getPrecisionExceptionsFromCache");
      }

      protected getPrecisionExceptionsFromCache_args getEmptyArgsInstance() {
        return new getPrecisionExceptionsFromCache_args();
      }

      protected getPrecisionExceptionsFromCache_result getResult(I iface, getPrecisionExceptionsFromCache_args args) throws org.apache.thrift.TException {
        getPrecisionExceptionsFromCache_result result = new getPrecisionExceptionsFromCache_result();
        try {
          result.success = iface.getPrecisionExceptionsFromCache(args.cacheId);
        } catch (MemoryStructureException me) {
          result.me = me;
        } catch (ObjectNotFoundException x) {
          result.x = x;
        }
        return result;
      }
    }

    private static class createWebEntities<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createWebEntities_args> {
      public createWebEntities() {
        super("createWebEntities");
      }

      protected createWebEntities_args getEmptyArgsInstance() {
        return new createWebEntities_args();
      }

      protected createWebEntities_result getResult(I iface, createWebEntities_args args) throws org.apache.thrift.TException {
        createWebEntities_result result = new createWebEntities_result();
        try {
          iface.createWebEntities(args.cacheId);
        } catch (MemoryStructureException me) {
          result.me = me;
        } catch (ObjectNotFoundException x) {
          result.x = x;
        }
        return result;
      }
    }

    private static class deleteCache<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteCache_args> {
      public deleteCache() {
        super("deleteCache");
      }

      protected deleteCache_args getEmptyArgsInstance() {
        return new deleteCache_args();
      }

      protected deleteCache_result getResult(I iface, deleteCache_args args) throws org.apache.thrift.TException {
        deleteCache_result result = new deleteCache_result();
        try {
          iface.deleteCache(args.cacheId);
        } catch (MemoryStructureException me) {
          result.me = me;
        } catch (ObjectNotFoundException x) {
          result.x = x;
        }
        return result;
      }
    }

    private static class markPageWithPrecisionException<I extends Iface> extends org.apache.thrift.ProcessFunction<I, markPageWithPrecisionException_args> {
      public markPageWithPrecisionException() {
        super("markPageWithPrecisionException");
      }

      protected markPageWithPrecisionException_args getEmptyArgsInstance() {
        return new markPageWithPrecisionException_args();
      }

      protected markPageWithPrecisionException_result getResult(I iface, markPageWithPrecisionException_args args) throws org.apache.thrift.TException {
        markPageWithPrecisionException_result result = new markPageWithPrecisionException_result();
        try {
          iface.markPageWithPrecisionException(args.pageItemId);
        } catch (MemoryStructureException me) {
          result.me = me;
        } catch (ObjectNotFoundException x) {
          result.x = x;
        }
        return result;
      }
    }

    private static class saveWebEntityCreationRule<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveWebEntityCreationRule_args> {
      public saveWebEntityCreationRule() {
        super("saveWebEntityCreationRule");
      }

      protected saveWebEntityCreationRule_args getEmptyArgsInstance() {
        return new saveWebEntityCreationRule_args();
      }

      protected saveWebEntityCreationRule_result getResult(I iface, saveWebEntityCreationRule_args args) throws org.apache.thrift.TException {
        saveWebEntityCreationRule_result result = new saveWebEntityCreationRule_result();
        try {
          iface.saveWebEntityCreationRule(args.webEntityCreationRule);
        } catch (MemoryStructureException me) {
          result.me = me;
        }
        return result;
      }
    }

    private static class getWebEntityCreationRules<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getWebEntityCreationRules_args> {
      public getWebEntityCreationRules() {
        super("getWebEntityCreationRules");
      }

      protected getWebEntityCreationRules_args getEmptyArgsInstance() {
        return new getWebEntityCreationRules_args();
      }

      protected getWebEntityCreationRules_result getResult(I iface, getWebEntityCreationRules_args args) throws org.apache.thrift.TException {
        getWebEntityCreationRules_result result = new getWebEntityCreationRules_result();
        result.success = iface.getWebEntityCreationRules();
        return result;
      }
    }

    private static class deleteWebEntityCreationRule<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteWebEntityCreationRule_args> {
      public deleteWebEntityCreationRule() {
        super("deleteWebEntityCreationRule");
      }

      protected deleteWebEntityCreationRule_args getEmptyArgsInstance() {
        return new deleteWebEntityCreationRule_args();
      }

      protected deleteWebEntityCreationRule_result getResult(I iface, deleteWebEntityCreationRule_args args) throws org.apache.thrift.TException {
        deleteWebEntityCreationRule_result result = new deleteWebEntityCreationRule_result();
        iface.deleteWebEntityCreationRule(args.webEntityCreationRule);
        return result;
      }
    }

    private static class savePageItems<I extends Iface> extends org.apache.thrift.ProcessFunction<I, savePageItems_args> {
      public savePageItems() {
        super("savePageItems");
      }

      protected savePageItems_args getEmptyArgsInstance() {
        return new savePageItems_args();
      }

      protected savePageItems_result getResult(I iface, savePageItems_args args) throws org.apache.thrift.TException {
        savePageItems_result result = new savePageItems_result();
        try {
          iface.savePageItems(args.pageItems);
        } catch (MemoryStructureException me) {
          result.me = me;
        }
        return result;
      }
    }

    private static class saveNodeLinks<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveNodeLinks_args> {
      public saveNodeLinks() {
        super("saveNodeLinks");
      }

      protected saveNodeLinks_args getEmptyArgsInstance() {
        return new saveNodeLinks_args();
      }

      protected saveNodeLinks_result getResult(I iface, saveNodeLinks_args args) throws org.apache.thrift.TException {
        saveNodeLinks_result result = new saveNodeLinks_result();
        try {
          iface.saveNodeLinks(args.nodeLinks);
        } catch (MemoryStructureException me) {
          result.me = me;
        }
        return result;
      }
    }

    private static class addAliastoWebEntity<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addAliastoWebEntity_args> {
      public addAliastoWebEntity() {
        super("addAliastoWebEntity");
      }

      protected addAliastoWebEntity_args getEmptyArgsInstance() {
        return new addAliastoWebEntity_args();
      }

      protected addAliastoWebEntity_result getResult(I iface, addAliastoWebEntity_args args) throws org.apache.thrift.TException {
        addAliastoWebEntity_result result = new addAliastoWebEntity_result();
        try {
          iface.addAliastoWebEntity(args.id, args.lru);
        } catch (MemoryStructureException me) {
          result.me = me;
        } catch (ObjectNotFoundException x) {
          result.x = x;
        }
        return result;
      }
    }

    private static class getWebEntityNetwork<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getWebEntityNetwork_args> {
      public getWebEntityNetwork() {
        super("getWebEntityNetwork");
      }

      protected getWebEntityNetwork_args getEmptyArgsInstance() {
        return new getWebEntityNetwork_args();
      }

      protected getWebEntityNetwork_result getResult(I iface, getWebEntityNetwork_args args) throws org.apache.thrift.TException {
        getWebEntityNetwork_result result = new getWebEntityNetwork_result();
        try {
          result.success = iface.getWebEntityNetwork(args.format);
        } catch (MemoryStructureException me) {
          result.me = me;
        }
        return result;
      }
    }

    private static class getWebEntityEgoNetwork<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getWebEntityEgoNetwork_args> {
      public getWebEntityEgoNetwork() {
        super("getWebEntityEgoNetwork");
      }

      protected getWebEntityEgoNetwork_args getEmptyArgsInstance() {
        return new getWebEntityEgoNetwork_args();
      }

      protected getWebEntityEgoNetwork_result getResult(I iface, getWebEntityEgoNetwork_args args) throws org.apache.thrift.TException {
        getWebEntityEgoNetwork_result result = new getWebEntityEgoNetwork_result();
        try {
          result.success = iface.getWebEntityEgoNetwork(args.webEntityId, args.distance, args.format);
        } catch (MemoryStructureException me) {
          result.me = me;
        } catch (ObjectNotFoundException x) {
          result.x = x;
        }
        return result;
      }
    }

  }

  public static class ping_args implements org.apache.thrift.TBase<ping_args, ping_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ping_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ping_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_args.class, metaDataMap);
    }

    public ping_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_args(ping_args other) {
    }

    public ping_args deepCopy() {
      return new ping_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_args)
        return this.equals((ping_args)that);
      return false;
    }

    public boolean equals(ping_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(ping_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      ping_args typedOther = (ping_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_argsStandardSchemeFactory implements SchemeFactory {
      public ping_argsStandardScheme getScheme() {
        return new ping_argsStandardScheme();
      }
    }

    private static class ping_argsStandardScheme extends StandardScheme<ping_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_argsTupleSchemeFactory implements SchemeFactory {
      public ping_argsTupleScheme getScheme() {
        return new ping_argsTupleScheme();
      }
    }

    private static class ping_argsTupleScheme extends TupleScheme<ping_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class ping_result implements org.apache.thrift.TBase<ping_result, ping_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.SET, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ping_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ping_resultTupleSchemeFactory());
    }

    public Set<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_result.class, metaDataMap);
    }

    public ping_result() {
    }

    public ping_result(
      Set<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_result(ping_result other) {
      if (other.isSetSuccess()) {
        Set<String> __this__success = new HashSet<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
    }

    public ping_result deepCopy() {
      return new ping_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new HashSet<String>();
      }
      this.success.add(elem);
    }

    public Set<String> getSuccess() {
      return this.success;
    }

    public ping_result setSuccess(Set<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Set<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_result)
        return this.equals((ping_result)that);
      return false;
    }

    public boolean equals(ping_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(ping_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      ping_result typedOther = (ping_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_resultStandardSchemeFactory implements SchemeFactory {
      public ping_resultStandardScheme getScheme() {
        return new ping_resultStandardScheme();
      }
    }

    private static class ping_resultStandardScheme extends StandardScheme<ping_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set26 = iprot.readSetBegin();
                  struct.success = new HashSet<String>(2*_set26.size);
                  for (int _i27 = 0; _i27 < _set26.size; ++_i27)
                  {
                    String _elem28; // required
                    _elem28 = iprot.readString();
                    struct.success.add(_elem28);
                  }
                  iprot.readSetEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter29 : struct.success)
            {
              oprot.writeString(_iter29);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_resultTupleSchemeFactory implements SchemeFactory {
      public ping_resultTupleScheme getScheme() {
        return new ping_resultTupleScheme();
      }
    }

    private static class ping_resultTupleScheme extends TupleScheme<ping_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter30 : struct.success)
            {
              oprot.writeString(_iter30);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TSet _set31 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashSet<String>(2*_set31.size);
            for (int _i32 = 0; _i32 < _set31.size; ++_i32)
            {
              String _elem33; // required
              _elem33 = iprot.readString();
              struct.success.add(_elem33);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateWebEntity_args implements org.apache.thrift.TBase<updateWebEntity_args, updateWebEntity_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateWebEntity_args");

    private static final org.apache.thrift.protocol.TField WEB_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("webEntity", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateWebEntity_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateWebEntity_argsTupleSchemeFactory());
    }

    public WebEntity webEntity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WEB_ENTITY((short)1, "webEntity");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WEB_ENTITY
            return WEB_ENTITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WEB_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("webEntity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WebEntity.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateWebEntity_args.class, metaDataMap);
    }

    public updateWebEntity_args() {
    }

    public updateWebEntity_args(
      WebEntity webEntity)
    {
      this();
      this.webEntity = webEntity;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateWebEntity_args(updateWebEntity_args other) {
      if (other.isSetWebEntity()) {
        this.webEntity = new WebEntity(other.webEntity);
      }
    }

    public updateWebEntity_args deepCopy() {
      return new updateWebEntity_args(this);
    }

    @Override
    public void clear() {
      this.webEntity = null;
    }

    public WebEntity getWebEntity() {
      return this.webEntity;
    }

    public updateWebEntity_args setWebEntity(WebEntity webEntity) {
      this.webEntity = webEntity;
      return this;
    }

    public void unsetWebEntity() {
      this.webEntity = null;
    }

    /** Returns true if field webEntity is set (has been assigned a value) and false otherwise */
    public boolean isSetWebEntity() {
      return this.webEntity != null;
    }

    public void setWebEntityIsSet(boolean value) {
      if (!value) {
        this.webEntity = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WEB_ENTITY:
        if (value == null) {
          unsetWebEntity();
        } else {
          setWebEntity((WebEntity)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WEB_ENTITY:
        return getWebEntity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WEB_ENTITY:
        return isSetWebEntity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateWebEntity_args)
        return this.equals((updateWebEntity_args)that);
      return false;
    }

    public boolean equals(updateWebEntity_args that) {
      if (that == null)
        return false;

      boolean this_present_webEntity = true && this.isSetWebEntity();
      boolean that_present_webEntity = true && that.isSetWebEntity();
      if (this_present_webEntity || that_present_webEntity) {
        if (!(this_present_webEntity && that_present_webEntity))
          return false;
        if (!this.webEntity.equals(that.webEntity))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateWebEntity_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateWebEntity_args typedOther = (updateWebEntity_args)other;

      lastComparison = Boolean.valueOf(isSetWebEntity()).compareTo(typedOther.isSetWebEntity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWebEntity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.webEntity, typedOther.webEntity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateWebEntity_args(");
      boolean first = true;

      sb.append("webEntity:");
      if (this.webEntity == null) {
        sb.append("null");
      } else {
        sb.append(this.webEntity);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateWebEntity_argsStandardSchemeFactory implements SchemeFactory {
      public updateWebEntity_argsStandardScheme getScheme() {
        return new updateWebEntity_argsStandardScheme();
      }
    }

    private static class updateWebEntity_argsStandardScheme extends StandardScheme<updateWebEntity_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateWebEntity_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WEB_ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.webEntity = new WebEntity();
                struct.webEntity.read(iprot);
                struct.setWebEntityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateWebEntity_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.webEntity != null) {
          oprot.writeFieldBegin(WEB_ENTITY_FIELD_DESC);
          struct.webEntity.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateWebEntity_argsTupleSchemeFactory implements SchemeFactory {
      public updateWebEntity_argsTupleScheme getScheme() {
        return new updateWebEntity_argsTupleScheme();
      }
    }

    private static class updateWebEntity_argsTupleScheme extends TupleScheme<updateWebEntity_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateWebEntity_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWebEntity()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetWebEntity()) {
          struct.webEntity.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateWebEntity_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.webEntity = new WebEntity();
          struct.webEntity.read(iprot);
          struct.setWebEntityIsSet(true);
        }
      }
    }

  }

  public static class updateWebEntity_result implements org.apache.thrift.TBase<updateWebEntity_result, updateWebEntity_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateWebEntity_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField X_FIELD_DESC = new org.apache.thrift.protocol.TField("x", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateWebEntity_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateWebEntity_resultTupleSchemeFactory());
    }

    public String success; // required
    public MemoryStructureException x; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      X((short)1, "x");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // X
            return X;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.X, new org.apache.thrift.meta_data.FieldMetaData("x", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateWebEntity_result.class, metaDataMap);
    }

    public updateWebEntity_result() {
    }

    public updateWebEntity_result(
      String success,
      MemoryStructureException x)
    {
      this();
      this.success = success;
      this.x = x;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateWebEntity_result(updateWebEntity_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetX()) {
        this.x = new MemoryStructureException(other.x);
      }
    }

    public updateWebEntity_result deepCopy() {
      return new updateWebEntity_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.x = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public updateWebEntity_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public MemoryStructureException getX() {
      return this.x;
    }

    public updateWebEntity_result setX(MemoryStructureException x) {
      this.x = x;
      return this;
    }

    public void unsetX() {
      this.x = null;
    }

    /** Returns true if field x is set (has been assigned a value) and false otherwise */
    public boolean isSetX() {
      return this.x != null;
    }

    public void setXIsSet(boolean value) {
      if (!value) {
        this.x = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case X:
        if (value == null) {
          unsetX();
        } else {
          setX((MemoryStructureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case X:
        return getX();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case X:
        return isSetX();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateWebEntity_result)
        return this.equals((updateWebEntity_result)that);
      return false;
    }

    public boolean equals(updateWebEntity_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_x = true && this.isSetX();
      boolean that_present_x = true && that.isSetX();
      if (this_present_x || that_present_x) {
        if (!(this_present_x && that_present_x))
          return false;
        if (!this.x.equals(that.x))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateWebEntity_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateWebEntity_result typedOther = (updateWebEntity_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetX()).compareTo(typedOther.isSetX());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetX()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.x, typedOther.x);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateWebEntity_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("x:");
      if (this.x == null) {
        sb.append("null");
      } else {
        sb.append(this.x);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateWebEntity_resultStandardSchemeFactory implements SchemeFactory {
      public updateWebEntity_resultStandardScheme getScheme() {
        return new updateWebEntity_resultStandardScheme();
      }
    }

    private static class updateWebEntity_resultStandardScheme extends StandardScheme<updateWebEntity_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateWebEntity_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // X
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.x = new MemoryStructureException();
                struct.x.read(iprot);
                struct.setXIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateWebEntity_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.x != null) {
          oprot.writeFieldBegin(X_FIELD_DESC);
          struct.x.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateWebEntity_resultTupleSchemeFactory implements SchemeFactory {
      public updateWebEntity_resultTupleScheme getScheme() {
        return new updateWebEntity_resultTupleScheme();
      }
    }

    private static class updateWebEntity_resultTupleScheme extends TupleScheme<updateWebEntity_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateWebEntity_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetX()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetX()) {
          struct.x.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateWebEntity_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.x = new MemoryStructureException();
          struct.x.read(iprot);
          struct.setXIsSet(true);
        }
      }
    }

  }

  public static class createWebEntity_args implements org.apache.thrift.TBase<createWebEntity_args, createWebEntity_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createWebEntity_args");

    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LRUSET_FIELD_DESC = new org.apache.thrift.protocol.TField("LRUSet", org.apache.thrift.protocol.TType.SET, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createWebEntity_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createWebEntity_argsTupleSchemeFactory());
    }

    public String name; // required
    public Set<String> LRUSet; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAME((short)1, "name"),
      LRUSET((short)2, "LRUSet");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAME
            return NAME;
          case 2: // LRUSET
            return LRUSET;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LRUSET, new org.apache.thrift.meta_data.FieldMetaData("LRUSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createWebEntity_args.class, metaDataMap);
    }

    public createWebEntity_args() {
    }

    public createWebEntity_args(
      String name,
      Set<String> LRUSet)
    {
      this();
      this.name = name;
      this.LRUSet = LRUSet;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createWebEntity_args(createWebEntity_args other) {
      if (other.isSetName()) {
        this.name = other.name;
      }
      if (other.isSetLRUSet()) {
        Set<String> __this__LRUSet = new HashSet<String>();
        for (String other_element : other.LRUSet) {
          __this__LRUSet.add(other_element);
        }
        this.LRUSet = __this__LRUSet;
      }
    }

    public createWebEntity_args deepCopy() {
      return new createWebEntity_args(this);
    }

    @Override
    public void clear() {
      this.name = null;
      this.LRUSet = null;
    }

    public String getName() {
      return this.name;
    }

    public createWebEntity_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public int getLRUSetSize() {
      return (this.LRUSet == null) ? 0 : this.LRUSet.size();
    }

    public java.util.Iterator<String> getLRUSetIterator() {
      return (this.LRUSet == null) ? null : this.LRUSet.iterator();
    }

    public void addToLRUSet(String elem) {
      if (this.LRUSet == null) {
        this.LRUSet = new HashSet<String>();
      }
      this.LRUSet.add(elem);
    }

    public Set<String> getLRUSet() {
      return this.LRUSet;
    }

    public createWebEntity_args setLRUSet(Set<String> LRUSet) {
      this.LRUSet = LRUSet;
      return this;
    }

    public void unsetLRUSet() {
      this.LRUSet = null;
    }

    /** Returns true if field LRUSet is set (has been assigned a value) and false otherwise */
    public boolean isSetLRUSet() {
      return this.LRUSet != null;
    }

    public void setLRUSetIsSet(boolean value) {
      if (!value) {
        this.LRUSet = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      case LRUSET:
        if (value == null) {
          unsetLRUSet();
        } else {
          setLRUSet((Set<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NAME:
        return getName();

      case LRUSET:
        return getLRUSet();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NAME:
        return isSetName();
      case LRUSET:
        return isSetLRUSet();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createWebEntity_args)
        return this.equals((createWebEntity_args)that);
      return false;
    }

    public boolean equals(createWebEntity_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_LRUSet = true && this.isSetLRUSet();
      boolean that_present_LRUSet = true && that.isSetLRUSet();
      if (this_present_LRUSet || that_present_LRUSet) {
        if (!(this_present_LRUSet && that_present_LRUSet))
          return false;
        if (!this.LRUSet.equals(that.LRUSet))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createWebEntity_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createWebEntity_args typedOther = (createWebEntity_args)other;

      lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLRUSet()).compareTo(typedOther.isSetLRUSet());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLRUSet()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.LRUSet, typedOther.LRUSet);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createWebEntity_args(");
      boolean first = true;

      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("LRUSet:");
      if (this.LRUSet == null) {
        sb.append("null");
      } else {
        sb.append(this.LRUSet);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createWebEntity_argsStandardSchemeFactory implements SchemeFactory {
      public createWebEntity_argsStandardScheme getScheme() {
        return new createWebEntity_argsStandardScheme();
      }
    }

    private static class createWebEntity_argsStandardScheme extends StandardScheme<createWebEntity_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createWebEntity_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LRUSET
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set34 = iprot.readSetBegin();
                  struct.LRUSet = new HashSet<String>(2*_set34.size);
                  for (int _i35 = 0; _i35 < _set34.size; ++_i35)
                  {
                    String _elem36; // required
                    _elem36 = iprot.readString();
                    struct.LRUSet.add(_elem36);
                  }
                  iprot.readSetEnd();
                }
                struct.setLRUSetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createWebEntity_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        if (struct.LRUSet != null) {
          oprot.writeFieldBegin(LRUSET_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.LRUSet.size()));
            for (String _iter37 : struct.LRUSet)
            {
              oprot.writeString(_iter37);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createWebEntity_argsTupleSchemeFactory implements SchemeFactory {
      public createWebEntity_argsTupleScheme getScheme() {
        return new createWebEntity_argsTupleScheme();
      }
    }

    private static class createWebEntity_argsTupleScheme extends TupleScheme<createWebEntity_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createWebEntity_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetName()) {
          optionals.set(0);
        }
        if (struct.isSetLRUSet()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
        if (struct.isSetLRUSet()) {
          {
            oprot.writeI32(struct.LRUSet.size());
            for (String _iter38 : struct.LRUSet)
            {
              oprot.writeString(_iter38);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createWebEntity_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TSet _set39 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.LRUSet = new HashSet<String>(2*_set39.size);
            for (int _i40 = 0; _i40 < _set39.size; ++_i40)
            {
              String _elem41; // required
              _elem41 = iprot.readString();
              struct.LRUSet.add(_elem41);
            }
          }
          struct.setLRUSetIsSet(true);
        }
      }
    }

  }

  public static class createWebEntity_result implements org.apache.thrift.TBase<createWebEntity_result, createWebEntity_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createWebEntity_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField X_FIELD_DESC = new org.apache.thrift.protocol.TField("x", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createWebEntity_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createWebEntity_resultTupleSchemeFactory());
    }

    public WebEntity success; // required
    public MemoryStructureException x; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      X((short)1, "x");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // X
            return X;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WebEntity.class)));
      tmpMap.put(_Fields.X, new org.apache.thrift.meta_data.FieldMetaData("x", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createWebEntity_result.class, metaDataMap);
    }

    public createWebEntity_result() {
    }

    public createWebEntity_result(
      WebEntity success,
      MemoryStructureException x)
    {
      this();
      this.success = success;
      this.x = x;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createWebEntity_result(createWebEntity_result other) {
      if (other.isSetSuccess()) {
        this.success = new WebEntity(other.success);
      }
      if (other.isSetX()) {
        this.x = new MemoryStructureException(other.x);
      }
    }

    public createWebEntity_result deepCopy() {
      return new createWebEntity_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.x = null;
    }

    public WebEntity getSuccess() {
      return this.success;
    }

    public createWebEntity_result setSuccess(WebEntity success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public MemoryStructureException getX() {
      return this.x;
    }

    public createWebEntity_result setX(MemoryStructureException x) {
      this.x = x;
      return this;
    }

    public void unsetX() {
      this.x = null;
    }

    /** Returns true if field x is set (has been assigned a value) and false otherwise */
    public boolean isSetX() {
      return this.x != null;
    }

    public void setXIsSet(boolean value) {
      if (!value) {
        this.x = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((WebEntity)value);
        }
        break;

      case X:
        if (value == null) {
          unsetX();
        } else {
          setX((MemoryStructureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case X:
        return getX();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case X:
        return isSetX();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createWebEntity_result)
        return this.equals((createWebEntity_result)that);
      return false;
    }

    public boolean equals(createWebEntity_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_x = true && this.isSetX();
      boolean that_present_x = true && that.isSetX();
      if (this_present_x || that_present_x) {
        if (!(this_present_x && that_present_x))
          return false;
        if (!this.x.equals(that.x))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createWebEntity_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createWebEntity_result typedOther = (createWebEntity_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetX()).compareTo(typedOther.isSetX());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetX()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.x, typedOther.x);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createWebEntity_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("x:");
      if (this.x == null) {
        sb.append("null");
      } else {
        sb.append(this.x);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createWebEntity_resultStandardSchemeFactory implements SchemeFactory {
      public createWebEntity_resultStandardScheme getScheme() {
        return new createWebEntity_resultStandardScheme();
      }
    }

    private static class createWebEntity_resultStandardScheme extends StandardScheme<createWebEntity_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createWebEntity_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new WebEntity();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // X
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.x = new MemoryStructureException();
                struct.x.read(iprot);
                struct.setXIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createWebEntity_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.x != null) {
          oprot.writeFieldBegin(X_FIELD_DESC);
          struct.x.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createWebEntity_resultTupleSchemeFactory implements SchemeFactory {
      public createWebEntity_resultTupleScheme getScheme() {
        return new createWebEntity_resultTupleScheme();
      }
    }

    private static class createWebEntity_resultTupleScheme extends TupleScheme<createWebEntity_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createWebEntity_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetX()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetX()) {
          struct.x.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createWebEntity_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new WebEntity();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.x = new MemoryStructureException();
          struct.x.read(iprot);
          struct.setXIsSet(true);
        }
      }
    }

  }

  public static class getWebEntity_args implements org.apache.thrift.TBase<getWebEntity_args, getWebEntity_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWebEntity_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWebEntity_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWebEntity_argsTupleSchemeFactory());
    }

    public String id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWebEntity_args.class, metaDataMap);
    }

    public getWebEntity_args() {
    }

    public getWebEntity_args(
      String id)
    {
      this();
      this.id = id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWebEntity_args(getWebEntity_args other) {
      if (other.isSetId()) {
        this.id = other.id;
      }
    }

    public getWebEntity_args deepCopy() {
      return new getWebEntity_args(this);
    }

    @Override
    public void clear() {
      this.id = null;
    }

    public String getId() {
      return this.id;
    }

    public getWebEntity_args setId(String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWebEntity_args)
        return this.equals((getWebEntity_args)that);
      return false;
    }

    public boolean equals(getWebEntity_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getWebEntity_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getWebEntity_args typedOther = (getWebEntity_args)other;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWebEntity_args(");
      boolean first = true;

      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWebEntity_argsStandardSchemeFactory implements SchemeFactory {
      public getWebEntity_argsStandardScheme getScheme() {
        return new getWebEntity_argsStandardScheme();
      }
    }

    private static class getWebEntity_argsStandardScheme extends StandardScheme<getWebEntity_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWebEntity_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWebEntity_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWebEntity_argsTupleSchemeFactory implements SchemeFactory {
      public getWebEntity_argsTupleScheme getScheme() {
        return new getWebEntity_argsTupleScheme();
      }
    }

    private static class getWebEntity_argsTupleScheme extends TupleScheme<getWebEntity_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWebEntity_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeString(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWebEntity_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readString();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class getWebEntity_result implements org.apache.thrift.TBase<getWebEntity_result, getWebEntity_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWebEntity_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ME_FIELD_DESC = new org.apache.thrift.protocol.TField("me", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField X_FIELD_DESC = new org.apache.thrift.protocol.TField("x", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWebEntity_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWebEntity_resultTupleSchemeFactory());
    }

    public WebEntity success; // required
    public MemoryStructureException me; // required
    public ObjectNotFoundException x; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ME((short)1, "me"),
      X((short)2, "x");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ME
            return ME;
          case 2: // X
            return X;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WebEntity.class)));
      tmpMap.put(_Fields.ME, new org.apache.thrift.meta_data.FieldMetaData("me", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.X, new org.apache.thrift.meta_data.FieldMetaData("x", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWebEntity_result.class, metaDataMap);
    }

    public getWebEntity_result() {
    }

    public getWebEntity_result(
      WebEntity success,
      MemoryStructureException me,
      ObjectNotFoundException x)
    {
      this();
      this.success = success;
      this.me = me;
      this.x = x;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWebEntity_result(getWebEntity_result other) {
      if (other.isSetSuccess()) {
        this.success = new WebEntity(other.success);
      }
      if (other.isSetMe()) {
        this.me = new MemoryStructureException(other.me);
      }
      if (other.isSetX()) {
        this.x = new ObjectNotFoundException(other.x);
      }
    }

    public getWebEntity_result deepCopy() {
      return new getWebEntity_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.me = null;
      this.x = null;
    }

    public WebEntity getSuccess() {
      return this.success;
    }

    public getWebEntity_result setSuccess(WebEntity success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public MemoryStructureException getMe() {
      return this.me;
    }

    public getWebEntity_result setMe(MemoryStructureException me) {
      this.me = me;
      return this;
    }

    public void unsetMe() {
      this.me = null;
    }

    /** Returns true if field me is set (has been assigned a value) and false otherwise */
    public boolean isSetMe() {
      return this.me != null;
    }

    public void setMeIsSet(boolean value) {
      if (!value) {
        this.me = null;
      }
    }

    public ObjectNotFoundException getX() {
      return this.x;
    }

    public getWebEntity_result setX(ObjectNotFoundException x) {
      this.x = x;
      return this;
    }

    public void unsetX() {
      this.x = null;
    }

    /** Returns true if field x is set (has been assigned a value) and false otherwise */
    public boolean isSetX() {
      return this.x != null;
    }

    public void setXIsSet(boolean value) {
      if (!value) {
        this.x = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((WebEntity)value);
        }
        break;

      case ME:
        if (value == null) {
          unsetMe();
        } else {
          setMe((MemoryStructureException)value);
        }
        break;

      case X:
        if (value == null) {
          unsetX();
        } else {
          setX((ObjectNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ME:
        return getMe();

      case X:
        return getX();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ME:
        return isSetMe();
      case X:
        return isSetX();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWebEntity_result)
        return this.equals((getWebEntity_result)that);
      return false;
    }

    public boolean equals(getWebEntity_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_me = true && this.isSetMe();
      boolean that_present_me = true && that.isSetMe();
      if (this_present_me || that_present_me) {
        if (!(this_present_me && that_present_me))
          return false;
        if (!this.me.equals(that.me))
          return false;
      }

      boolean this_present_x = true && this.isSetX();
      boolean that_present_x = true && that.isSetX();
      if (this_present_x || that_present_x) {
        if (!(this_present_x && that_present_x))
          return false;
        if (!this.x.equals(that.x))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getWebEntity_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getWebEntity_result typedOther = (getWebEntity_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMe()).compareTo(typedOther.isSetMe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.me, typedOther.me);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetX()).compareTo(typedOther.isSetX());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetX()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.x, typedOther.x);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWebEntity_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("me:");
      if (this.me == null) {
        sb.append("null");
      } else {
        sb.append(this.me);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("x:");
      if (this.x == null) {
        sb.append("null");
      } else {
        sb.append(this.x);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWebEntity_resultStandardSchemeFactory implements SchemeFactory {
      public getWebEntity_resultStandardScheme getScheme() {
        return new getWebEntity_resultStandardScheme();
      }
    }

    private static class getWebEntity_resultStandardScheme extends StandardScheme<getWebEntity_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWebEntity_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new WebEntity();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.me = new MemoryStructureException();
                struct.me.read(iprot);
                struct.setMeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // X
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.x = new ObjectNotFoundException();
                struct.x.read(iprot);
                struct.setXIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWebEntity_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.me != null) {
          oprot.writeFieldBegin(ME_FIELD_DESC);
          struct.me.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.x != null) {
          oprot.writeFieldBegin(X_FIELD_DESC);
          struct.x.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWebEntity_resultTupleSchemeFactory implements SchemeFactory {
      public getWebEntity_resultTupleScheme getScheme() {
        return new getWebEntity_resultTupleScheme();
      }
    }

    private static class getWebEntity_resultTupleScheme extends TupleScheme<getWebEntity_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWebEntity_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMe()) {
          optionals.set(1);
        }
        if (struct.isSetX()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetMe()) {
          struct.me.write(oprot);
        }
        if (struct.isSetX()) {
          struct.x.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWebEntity_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new WebEntity();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.me = new MemoryStructureException();
          struct.me.read(iprot);
          struct.setMeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.x = new ObjectNotFoundException();
          struct.x.read(iprot);
          struct.setXIsSet(true);
        }
      }
    }

  }

  public static class getWebEntities_args implements org.apache.thrift.TBase<getWebEntities_args, getWebEntities_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWebEntities_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWebEntities_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWebEntities_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWebEntities_args.class, metaDataMap);
    }

    public getWebEntities_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWebEntities_args(getWebEntities_args other) {
    }

    public getWebEntities_args deepCopy() {
      return new getWebEntities_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWebEntities_args)
        return this.equals((getWebEntities_args)that);
      return false;
    }

    public boolean equals(getWebEntities_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getWebEntities_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getWebEntities_args typedOther = (getWebEntities_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWebEntities_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWebEntities_argsStandardSchemeFactory implements SchemeFactory {
      public getWebEntities_argsStandardScheme getScheme() {
        return new getWebEntities_argsStandardScheme();
      }
    }

    private static class getWebEntities_argsStandardScheme extends StandardScheme<getWebEntities_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWebEntities_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWebEntities_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWebEntities_argsTupleSchemeFactory implements SchemeFactory {
      public getWebEntities_argsTupleScheme getScheme() {
        return new getWebEntities_argsTupleScheme();
      }
    }

    private static class getWebEntities_argsTupleScheme extends TupleScheme<getWebEntities_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWebEntities_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWebEntities_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getWebEntities_result implements org.apache.thrift.TBase<getWebEntities_result, getWebEntities_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWebEntities_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.SET, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWebEntities_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWebEntities_resultTupleSchemeFactory());
    }

    public Set<WebEntity> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WebEntity.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWebEntities_result.class, metaDataMap);
    }

    public getWebEntities_result() {
    }

    public getWebEntities_result(
      Set<WebEntity> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWebEntities_result(getWebEntities_result other) {
      if (other.isSetSuccess()) {
        Set<WebEntity> __this__success = new HashSet<WebEntity>();
        for (WebEntity other_element : other.success) {
          __this__success.add(new WebEntity(other_element));
        }
        this.success = __this__success;
      }
    }

    public getWebEntities_result deepCopy() {
      return new getWebEntities_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<WebEntity> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(WebEntity elem) {
      if (this.success == null) {
        this.success = new HashSet<WebEntity>();
      }
      this.success.add(elem);
    }

    public Set<WebEntity> getSuccess() {
      return this.success;
    }

    public getWebEntities_result setSuccess(Set<WebEntity> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Set<WebEntity>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWebEntities_result)
        return this.equals((getWebEntities_result)that);
      return false;
    }

    public boolean equals(getWebEntities_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getWebEntities_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getWebEntities_result typedOther = (getWebEntities_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWebEntities_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWebEntities_resultStandardSchemeFactory implements SchemeFactory {
      public getWebEntities_resultStandardScheme getScheme() {
        return new getWebEntities_resultStandardScheme();
      }
    }

    private static class getWebEntities_resultStandardScheme extends StandardScheme<getWebEntities_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWebEntities_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set42 = iprot.readSetBegin();
                  struct.success = new HashSet<WebEntity>(2*_set42.size);
                  for (int _i43 = 0; _i43 < _set42.size; ++_i43)
                  {
                    WebEntity _elem44; // required
                    _elem44 = new WebEntity();
                    _elem44.read(iprot);
                    struct.success.add(_elem44);
                  }
                  iprot.readSetEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWebEntities_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (WebEntity _iter45 : struct.success)
            {
              _iter45.write(oprot);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWebEntities_resultTupleSchemeFactory implements SchemeFactory {
      public getWebEntities_resultTupleScheme getScheme() {
        return new getWebEntities_resultTupleScheme();
      }
    }

    private static class getWebEntities_resultTupleScheme extends TupleScheme<getWebEntities_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWebEntities_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (WebEntity _iter46 : struct.success)
            {
              _iter46.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWebEntities_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TSet _set47 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new HashSet<WebEntity>(2*_set47.size);
            for (int _i48 = 0; _i48 < _set47.size; ++_i48)
            {
              WebEntity _elem49; // required
              _elem49 = new WebEntity();
              _elem49.read(iprot);
              struct.success.add(_elem49);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getPagesFromWebEntity_args implements org.apache.thrift.TBase<getPagesFromWebEntity_args, getPagesFromWebEntity_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPagesFromWebEntity_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPagesFromWebEntity_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPagesFromWebEntity_argsTupleSchemeFactory());
    }

    public String id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPagesFromWebEntity_args.class, metaDataMap);
    }

    public getPagesFromWebEntity_args() {
    }

    public getPagesFromWebEntity_args(
      String id)
    {
      this();
      this.id = id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPagesFromWebEntity_args(getPagesFromWebEntity_args other) {
      if (other.isSetId()) {
        this.id = other.id;
      }
    }

    public getPagesFromWebEntity_args deepCopy() {
      return new getPagesFromWebEntity_args(this);
    }

    @Override
    public void clear() {
      this.id = null;
    }

    public String getId() {
      return this.id;
    }

    public getPagesFromWebEntity_args setId(String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPagesFromWebEntity_args)
        return this.equals((getPagesFromWebEntity_args)that);
      return false;
    }

    public boolean equals(getPagesFromWebEntity_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPagesFromWebEntity_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPagesFromWebEntity_args typedOther = (getPagesFromWebEntity_args)other;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPagesFromWebEntity_args(");
      boolean first = true;

      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPagesFromWebEntity_argsStandardSchemeFactory implements SchemeFactory {
      public getPagesFromWebEntity_argsStandardScheme getScheme() {
        return new getPagesFromWebEntity_argsStandardScheme();
      }
    }

    private static class getPagesFromWebEntity_argsStandardScheme extends StandardScheme<getPagesFromWebEntity_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPagesFromWebEntity_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPagesFromWebEntity_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPagesFromWebEntity_argsTupleSchemeFactory implements SchemeFactory {
      public getPagesFromWebEntity_argsTupleScheme getScheme() {
        return new getPagesFromWebEntity_argsTupleScheme();
      }
    }

    private static class getPagesFromWebEntity_argsTupleScheme extends TupleScheme<getPagesFromWebEntity_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPagesFromWebEntity_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeString(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPagesFromWebEntity_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readString();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class getPagesFromWebEntity_result implements org.apache.thrift.TBase<getPagesFromWebEntity_result, getPagesFromWebEntity_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPagesFromWebEntity_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.SET, (short)0);
    private static final org.apache.thrift.protocol.TField ME_FIELD_DESC = new org.apache.thrift.protocol.TField("me", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField X_FIELD_DESC = new org.apache.thrift.protocol.TField("x", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPagesFromWebEntity_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPagesFromWebEntity_resultTupleSchemeFactory());
    }

    public Set<PageItem> success; // required
    public MemoryStructureException me; // required
    public ObjectNotFoundException x; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ME((short)1, "me"),
      X((short)2, "x");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ME
            return ME;
          case 2: // X
            return X;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PageItem.class))));
      tmpMap.put(_Fields.ME, new org.apache.thrift.meta_data.FieldMetaData("me", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.X, new org.apache.thrift.meta_data.FieldMetaData("x", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPagesFromWebEntity_result.class, metaDataMap);
    }

    public getPagesFromWebEntity_result() {
    }

    public getPagesFromWebEntity_result(
      Set<PageItem> success,
      MemoryStructureException me,
      ObjectNotFoundException x)
    {
      this();
      this.success = success;
      this.me = me;
      this.x = x;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPagesFromWebEntity_result(getPagesFromWebEntity_result other) {
      if (other.isSetSuccess()) {
        Set<PageItem> __this__success = new HashSet<PageItem>();
        for (PageItem other_element : other.success) {
          __this__success.add(new PageItem(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetMe()) {
        this.me = new MemoryStructureException(other.me);
      }
      if (other.isSetX()) {
        this.x = new ObjectNotFoundException(other.x);
      }
    }

    public getPagesFromWebEntity_result deepCopy() {
      return new getPagesFromWebEntity_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.me = null;
      this.x = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<PageItem> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(PageItem elem) {
      if (this.success == null) {
        this.success = new HashSet<PageItem>();
      }
      this.success.add(elem);
    }

    public Set<PageItem> getSuccess() {
      return this.success;
    }

    public getPagesFromWebEntity_result setSuccess(Set<PageItem> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public MemoryStructureException getMe() {
      return this.me;
    }

    public getPagesFromWebEntity_result setMe(MemoryStructureException me) {
      this.me = me;
      return this;
    }

    public void unsetMe() {
      this.me = null;
    }

    /** Returns true if field me is set (has been assigned a value) and false otherwise */
    public boolean isSetMe() {
      return this.me != null;
    }

    public void setMeIsSet(boolean value) {
      if (!value) {
        this.me = null;
      }
    }

    public ObjectNotFoundException getX() {
      return this.x;
    }

    public getPagesFromWebEntity_result setX(ObjectNotFoundException x) {
      this.x = x;
      return this;
    }

    public void unsetX() {
      this.x = null;
    }

    /** Returns true if field x is set (has been assigned a value) and false otherwise */
    public boolean isSetX() {
      return this.x != null;
    }

    public void setXIsSet(boolean value) {
      if (!value) {
        this.x = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Set<PageItem>)value);
        }
        break;

      case ME:
        if (value == null) {
          unsetMe();
        } else {
          setMe((MemoryStructureException)value);
        }
        break;

      case X:
        if (value == null) {
          unsetX();
        } else {
          setX((ObjectNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ME:
        return getMe();

      case X:
        return getX();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ME:
        return isSetMe();
      case X:
        return isSetX();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPagesFromWebEntity_result)
        return this.equals((getPagesFromWebEntity_result)that);
      return false;
    }

    public boolean equals(getPagesFromWebEntity_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_me = true && this.isSetMe();
      boolean that_present_me = true && that.isSetMe();
      if (this_present_me || that_present_me) {
        if (!(this_present_me && that_present_me))
          return false;
        if (!this.me.equals(that.me))
          return false;
      }

      boolean this_present_x = true && this.isSetX();
      boolean that_present_x = true && that.isSetX();
      if (this_present_x || that_present_x) {
        if (!(this_present_x && that_present_x))
          return false;
        if (!this.x.equals(that.x))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPagesFromWebEntity_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPagesFromWebEntity_result typedOther = (getPagesFromWebEntity_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMe()).compareTo(typedOther.isSetMe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.me, typedOther.me);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetX()).compareTo(typedOther.isSetX());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetX()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.x, typedOther.x);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPagesFromWebEntity_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("me:");
      if (this.me == null) {
        sb.append("null");
      } else {
        sb.append(this.me);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("x:");
      if (this.x == null) {
        sb.append("null");
      } else {
        sb.append(this.x);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPagesFromWebEntity_resultStandardSchemeFactory implements SchemeFactory {
      public getPagesFromWebEntity_resultStandardScheme getScheme() {
        return new getPagesFromWebEntity_resultStandardScheme();
      }
    }

    private static class getPagesFromWebEntity_resultStandardScheme extends StandardScheme<getPagesFromWebEntity_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPagesFromWebEntity_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set50 = iprot.readSetBegin();
                  struct.success = new HashSet<PageItem>(2*_set50.size);
                  for (int _i51 = 0; _i51 < _set50.size; ++_i51)
                  {
                    PageItem _elem52; // required
                    _elem52 = new PageItem();
                    _elem52.read(iprot);
                    struct.success.add(_elem52);
                  }
                  iprot.readSetEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.me = new MemoryStructureException();
                struct.me.read(iprot);
                struct.setMeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // X
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.x = new ObjectNotFoundException();
                struct.x.read(iprot);
                struct.setXIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPagesFromWebEntity_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (PageItem _iter53 : struct.success)
            {
              _iter53.write(oprot);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.me != null) {
          oprot.writeFieldBegin(ME_FIELD_DESC);
          struct.me.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.x != null) {
          oprot.writeFieldBegin(X_FIELD_DESC);
          struct.x.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPagesFromWebEntity_resultTupleSchemeFactory implements SchemeFactory {
      public getPagesFromWebEntity_resultTupleScheme getScheme() {
        return new getPagesFromWebEntity_resultTupleScheme();
      }
    }

    private static class getPagesFromWebEntity_resultTupleScheme extends TupleScheme<getPagesFromWebEntity_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPagesFromWebEntity_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMe()) {
          optionals.set(1);
        }
        if (struct.isSetX()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (PageItem _iter54 : struct.success)
            {
              _iter54.write(oprot);
            }
          }
        }
        if (struct.isSetMe()) {
          struct.me.write(oprot);
        }
        if (struct.isSetX()) {
          struct.x.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPagesFromWebEntity_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TSet _set55 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new HashSet<PageItem>(2*_set55.size);
            for (int _i56 = 0; _i56 < _set55.size; ++_i56)
            {
              PageItem _elem57; // required
              _elem57 = new PageItem();
              _elem57.read(iprot);
              struct.success.add(_elem57);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.me = new MemoryStructureException();
          struct.me.read(iprot);
          struct.setMeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.x = new ObjectNotFoundException();
          struct.x.read(iprot);
          struct.setXIsSet(true);
        }
      }
    }

  }

  public static class generateWebEntityLinks_args implements org.apache.thrift.TBase<generateWebEntityLinks_args, generateWebEntityLinks_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("generateWebEntityLinks_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new generateWebEntityLinks_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new generateWebEntityLinks_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(generateWebEntityLinks_args.class, metaDataMap);
    }

    public generateWebEntityLinks_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public generateWebEntityLinks_args(generateWebEntityLinks_args other) {
    }

    public generateWebEntityLinks_args deepCopy() {
      return new generateWebEntityLinks_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof generateWebEntityLinks_args)
        return this.equals((generateWebEntityLinks_args)that);
      return false;
    }

    public boolean equals(generateWebEntityLinks_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(generateWebEntityLinks_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      generateWebEntityLinks_args typedOther = (generateWebEntityLinks_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("generateWebEntityLinks_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class generateWebEntityLinks_argsStandardSchemeFactory implements SchemeFactory {
      public generateWebEntityLinks_argsStandardScheme getScheme() {
        return new generateWebEntityLinks_argsStandardScheme();
      }
    }

    private static class generateWebEntityLinks_argsStandardScheme extends StandardScheme<generateWebEntityLinks_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, generateWebEntityLinks_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, generateWebEntityLinks_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class generateWebEntityLinks_argsTupleSchemeFactory implements SchemeFactory {
      public generateWebEntityLinks_argsTupleScheme getScheme() {
        return new generateWebEntityLinks_argsTupleScheme();
      }
    }

    private static class generateWebEntityLinks_argsTupleScheme extends TupleScheme<generateWebEntityLinks_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, generateWebEntityLinks_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, generateWebEntityLinks_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class generateWebEntityLinks_result implements org.apache.thrift.TBase<generateWebEntityLinks_result, generateWebEntityLinks_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("generateWebEntityLinks_result");

    private static final org.apache.thrift.protocol.TField X_FIELD_DESC = new org.apache.thrift.protocol.TField("x", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new generateWebEntityLinks_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new generateWebEntityLinks_resultTupleSchemeFactory());
    }

    public MemoryStructureException x; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      X((short)1, "x");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // X
            return X;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.X, new org.apache.thrift.meta_data.FieldMetaData("x", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(generateWebEntityLinks_result.class, metaDataMap);
    }

    public generateWebEntityLinks_result() {
    }

    public generateWebEntityLinks_result(
      MemoryStructureException x)
    {
      this();
      this.x = x;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public generateWebEntityLinks_result(generateWebEntityLinks_result other) {
      if (other.isSetX()) {
        this.x = new MemoryStructureException(other.x);
      }
    }

    public generateWebEntityLinks_result deepCopy() {
      return new generateWebEntityLinks_result(this);
    }

    @Override
    public void clear() {
      this.x = null;
    }

    public MemoryStructureException getX() {
      return this.x;
    }

    public generateWebEntityLinks_result setX(MemoryStructureException x) {
      this.x = x;
      return this;
    }

    public void unsetX() {
      this.x = null;
    }

    /** Returns true if field x is set (has been assigned a value) and false otherwise */
    public boolean isSetX() {
      return this.x != null;
    }

    public void setXIsSet(boolean value) {
      if (!value) {
        this.x = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case X:
        if (value == null) {
          unsetX();
        } else {
          setX((MemoryStructureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case X:
        return getX();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case X:
        return isSetX();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof generateWebEntityLinks_result)
        return this.equals((generateWebEntityLinks_result)that);
      return false;
    }

    public boolean equals(generateWebEntityLinks_result that) {
      if (that == null)
        return false;

      boolean this_present_x = true && this.isSetX();
      boolean that_present_x = true && that.isSetX();
      if (this_present_x || that_present_x) {
        if (!(this_present_x && that_present_x))
          return false;
        if (!this.x.equals(that.x))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(generateWebEntityLinks_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      generateWebEntityLinks_result typedOther = (generateWebEntityLinks_result)other;

      lastComparison = Boolean.valueOf(isSetX()).compareTo(typedOther.isSetX());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetX()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.x, typedOther.x);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("generateWebEntityLinks_result(");
      boolean first = true;

      sb.append("x:");
      if (this.x == null) {
        sb.append("null");
      } else {
        sb.append(this.x);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class generateWebEntityLinks_resultStandardSchemeFactory implements SchemeFactory {
      public generateWebEntityLinks_resultStandardScheme getScheme() {
        return new generateWebEntityLinks_resultStandardScheme();
      }
    }

    private static class generateWebEntityLinks_resultStandardScheme extends StandardScheme<generateWebEntityLinks_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, generateWebEntityLinks_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // X
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.x = new MemoryStructureException();
                struct.x.read(iprot);
                struct.setXIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, generateWebEntityLinks_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.x != null) {
          oprot.writeFieldBegin(X_FIELD_DESC);
          struct.x.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class generateWebEntityLinks_resultTupleSchemeFactory implements SchemeFactory {
      public generateWebEntityLinks_resultTupleScheme getScheme() {
        return new generateWebEntityLinks_resultTupleScheme();
      }
    }

    private static class generateWebEntityLinks_resultTupleScheme extends TupleScheme<generateWebEntityLinks_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, generateWebEntityLinks_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetX()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetX()) {
          struct.x.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, generateWebEntityLinks_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.x = new MemoryStructureException();
          struct.x.read(iprot);
          struct.setXIsSet(true);
        }
      }
    }

  }

  public static class clearIndex_args implements org.apache.thrift.TBase<clearIndex_args, clearIndex_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("clearIndex_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new clearIndex_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new clearIndex_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(clearIndex_args.class, metaDataMap);
    }

    public clearIndex_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public clearIndex_args(clearIndex_args other) {
    }

    public clearIndex_args deepCopy() {
      return new clearIndex_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof clearIndex_args)
        return this.equals((clearIndex_args)that);
      return false;
    }

    public boolean equals(clearIndex_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(clearIndex_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      clearIndex_args typedOther = (clearIndex_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("clearIndex_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class clearIndex_argsStandardSchemeFactory implements SchemeFactory {
      public clearIndex_argsStandardScheme getScheme() {
        return new clearIndex_argsStandardScheme();
      }
    }

    private static class clearIndex_argsStandardScheme extends StandardScheme<clearIndex_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, clearIndex_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, clearIndex_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class clearIndex_argsTupleSchemeFactory implements SchemeFactory {
      public clearIndex_argsTupleScheme getScheme() {
        return new clearIndex_argsTupleScheme();
      }
    }

    private static class clearIndex_argsTupleScheme extends TupleScheme<clearIndex_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, clearIndex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, clearIndex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class clearIndex_result implements org.apache.thrift.TBase<clearIndex_result, clearIndex_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("clearIndex_result");

    private static final org.apache.thrift.protocol.TField X_FIELD_DESC = new org.apache.thrift.protocol.TField("x", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new clearIndex_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new clearIndex_resultTupleSchemeFactory());
    }

    public MemoryStructureException x; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      X((short)1, "x");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // X
            return X;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.X, new org.apache.thrift.meta_data.FieldMetaData("x", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(clearIndex_result.class, metaDataMap);
    }

    public clearIndex_result() {
    }

    public clearIndex_result(
      MemoryStructureException x)
    {
      this();
      this.x = x;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public clearIndex_result(clearIndex_result other) {
      if (other.isSetX()) {
        this.x = new MemoryStructureException(other.x);
      }
    }

    public clearIndex_result deepCopy() {
      return new clearIndex_result(this);
    }

    @Override
    public void clear() {
      this.x = null;
    }

    public MemoryStructureException getX() {
      return this.x;
    }

    public clearIndex_result setX(MemoryStructureException x) {
      this.x = x;
      return this;
    }

    public void unsetX() {
      this.x = null;
    }

    /** Returns true if field x is set (has been assigned a value) and false otherwise */
    public boolean isSetX() {
      return this.x != null;
    }

    public void setXIsSet(boolean value) {
      if (!value) {
        this.x = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case X:
        if (value == null) {
          unsetX();
        } else {
          setX((MemoryStructureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case X:
        return getX();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case X:
        return isSetX();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof clearIndex_result)
        return this.equals((clearIndex_result)that);
      return false;
    }

    public boolean equals(clearIndex_result that) {
      if (that == null)
        return false;

      boolean this_present_x = true && this.isSetX();
      boolean that_present_x = true && that.isSetX();
      if (this_present_x || that_present_x) {
        if (!(this_present_x && that_present_x))
          return false;
        if (!this.x.equals(that.x))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(clearIndex_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      clearIndex_result typedOther = (clearIndex_result)other;

      lastComparison = Boolean.valueOf(isSetX()).compareTo(typedOther.isSetX());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetX()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.x, typedOther.x);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("clearIndex_result(");
      boolean first = true;

      sb.append("x:");
      if (this.x == null) {
        sb.append("null");
      } else {
        sb.append(this.x);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class clearIndex_resultStandardSchemeFactory implements SchemeFactory {
      public clearIndex_resultStandardScheme getScheme() {
        return new clearIndex_resultStandardScheme();
      }
    }

    private static class clearIndex_resultStandardScheme extends StandardScheme<clearIndex_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, clearIndex_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // X
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.x = new MemoryStructureException();
                struct.x.read(iprot);
                struct.setXIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, clearIndex_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.x != null) {
          oprot.writeFieldBegin(X_FIELD_DESC);
          struct.x.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class clearIndex_resultTupleSchemeFactory implements SchemeFactory {
      public clearIndex_resultTupleScheme getScheme() {
        return new clearIndex_resultTupleScheme();
      }
    }

    private static class clearIndex_resultTupleScheme extends TupleScheme<clearIndex_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, clearIndex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetX()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetX()) {
          struct.x.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, clearIndex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.x = new MemoryStructureException();
          struct.x.read(iprot);
          struct.setXIsSet(true);
        }
      }
    }

  }

  public static class createCache_args implements org.apache.thrift.TBase<createCache_args, createCache_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createCache_args");

    private static final org.apache.thrift.protocol.TField PAGE_ITEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("pageItems", org.apache.thrift.protocol.TType.SET, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createCache_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createCache_argsTupleSchemeFactory());
    }

    public Set<PageItem> pageItems; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE_ITEMS((short)1, "pageItems");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE_ITEMS
            return PAGE_ITEMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE_ITEMS, new org.apache.thrift.meta_data.FieldMetaData("pageItems", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PageItem.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createCache_args.class, metaDataMap);
    }

    public createCache_args() {
    }

    public createCache_args(
      Set<PageItem> pageItems)
    {
      this();
      this.pageItems = pageItems;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createCache_args(createCache_args other) {
      if (other.isSetPageItems()) {
        Set<PageItem> __this__pageItems = new HashSet<PageItem>();
        for (PageItem other_element : other.pageItems) {
          __this__pageItems.add(new PageItem(other_element));
        }
        this.pageItems = __this__pageItems;
      }
    }

    public createCache_args deepCopy() {
      return new createCache_args(this);
    }

    @Override
    public void clear() {
      this.pageItems = null;
    }

    public int getPageItemsSize() {
      return (this.pageItems == null) ? 0 : this.pageItems.size();
    }

    public java.util.Iterator<PageItem> getPageItemsIterator() {
      return (this.pageItems == null) ? null : this.pageItems.iterator();
    }

    public void addToPageItems(PageItem elem) {
      if (this.pageItems == null) {
        this.pageItems = new HashSet<PageItem>();
      }
      this.pageItems.add(elem);
    }

    public Set<PageItem> getPageItems() {
      return this.pageItems;
    }

    public createCache_args setPageItems(Set<PageItem> pageItems) {
      this.pageItems = pageItems;
      return this;
    }

    public void unsetPageItems() {
      this.pageItems = null;
    }

    /** Returns true if field pageItems is set (has been assigned a value) and false otherwise */
    public boolean isSetPageItems() {
      return this.pageItems != null;
    }

    public void setPageItemsIsSet(boolean value) {
      if (!value) {
        this.pageItems = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGE_ITEMS:
        if (value == null) {
          unsetPageItems();
        } else {
          setPageItems((Set<PageItem>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE_ITEMS:
        return getPageItems();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGE_ITEMS:
        return isSetPageItems();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createCache_args)
        return this.equals((createCache_args)that);
      return false;
    }

    public boolean equals(createCache_args that) {
      if (that == null)
        return false;

      boolean this_present_pageItems = true && this.isSetPageItems();
      boolean that_present_pageItems = true && that.isSetPageItems();
      if (this_present_pageItems || that_present_pageItems) {
        if (!(this_present_pageItems && that_present_pageItems))
          return false;
        if (!this.pageItems.equals(that.pageItems))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createCache_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createCache_args typedOther = (createCache_args)other;

      lastComparison = Boolean.valueOf(isSetPageItems()).compareTo(typedOther.isSetPageItems());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageItems()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageItems, typedOther.pageItems);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createCache_args(");
      boolean first = true;

      sb.append("pageItems:");
      if (this.pageItems == null) {
        sb.append("null");
      } else {
        sb.append(this.pageItems);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createCache_argsStandardSchemeFactory implements SchemeFactory {
      public createCache_argsStandardScheme getScheme() {
        return new createCache_argsStandardScheme();
      }
    }

    private static class createCache_argsStandardScheme extends StandardScheme<createCache_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createCache_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE_ITEMS
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set58 = iprot.readSetBegin();
                  struct.pageItems = new HashSet<PageItem>(2*_set58.size);
                  for (int _i59 = 0; _i59 < _set58.size; ++_i59)
                  {
                    PageItem _elem60; // required
                    _elem60 = new PageItem();
                    _elem60.read(iprot);
                    struct.pageItems.add(_elem60);
                  }
                  iprot.readSetEnd();
                }
                struct.setPageItemsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createCache_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pageItems != null) {
          oprot.writeFieldBegin(PAGE_ITEMS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.pageItems.size()));
            for (PageItem _iter61 : struct.pageItems)
            {
              _iter61.write(oprot);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createCache_argsTupleSchemeFactory implements SchemeFactory {
      public createCache_argsTupleScheme getScheme() {
        return new createCache_argsTupleScheme();
      }
    }

    private static class createCache_argsTupleScheme extends TupleScheme<createCache_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createCache_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPageItems()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPageItems()) {
          {
            oprot.writeI32(struct.pageItems.size());
            for (PageItem _iter62 : struct.pageItems)
            {
              _iter62.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createCache_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TSet _set63 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.pageItems = new HashSet<PageItem>(2*_set63.size);
            for (int _i64 = 0; _i64 < _set63.size; ++_i64)
            {
              PageItem _elem65; // required
              _elem65 = new PageItem();
              _elem65.read(iprot);
              struct.pageItems.add(_elem65);
            }
          }
          struct.setPageItemsIsSet(true);
        }
      }
    }

  }

  public static class createCache_result implements org.apache.thrift.TBase<createCache_result, createCache_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createCache_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField X_FIELD_DESC = new org.apache.thrift.protocol.TField("x", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createCache_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createCache_resultTupleSchemeFactory());
    }

    public String success; // required
    public MemoryStructureException x; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      X((short)1, "x");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // X
            return X;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.X, new org.apache.thrift.meta_data.FieldMetaData("x", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createCache_result.class, metaDataMap);
    }

    public createCache_result() {
    }

    public createCache_result(
      String success,
      MemoryStructureException x)
    {
      this();
      this.success = success;
      this.x = x;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createCache_result(createCache_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetX()) {
        this.x = new MemoryStructureException(other.x);
      }
    }

    public createCache_result deepCopy() {
      return new createCache_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.x = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public createCache_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public MemoryStructureException getX() {
      return this.x;
    }

    public createCache_result setX(MemoryStructureException x) {
      this.x = x;
      return this;
    }

    public void unsetX() {
      this.x = null;
    }

    /** Returns true if field x is set (has been assigned a value) and false otherwise */
    public boolean isSetX() {
      return this.x != null;
    }

    public void setXIsSet(boolean value) {
      if (!value) {
        this.x = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case X:
        if (value == null) {
          unsetX();
        } else {
          setX((MemoryStructureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case X:
        return getX();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case X:
        return isSetX();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createCache_result)
        return this.equals((createCache_result)that);
      return false;
    }

    public boolean equals(createCache_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_x = true && this.isSetX();
      boolean that_present_x = true && that.isSetX();
      if (this_present_x || that_present_x) {
        if (!(this_present_x && that_present_x))
          return false;
        if (!this.x.equals(that.x))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createCache_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createCache_result typedOther = (createCache_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetX()).compareTo(typedOther.isSetX());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetX()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.x, typedOther.x);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createCache_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("x:");
      if (this.x == null) {
        sb.append("null");
      } else {
        sb.append(this.x);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createCache_resultStandardSchemeFactory implements SchemeFactory {
      public createCache_resultStandardScheme getScheme() {
        return new createCache_resultStandardScheme();
      }
    }

    private static class createCache_resultStandardScheme extends StandardScheme<createCache_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createCache_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // X
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.x = new MemoryStructureException();
                struct.x.read(iprot);
                struct.setXIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createCache_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.x != null) {
          oprot.writeFieldBegin(X_FIELD_DESC);
          struct.x.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createCache_resultTupleSchemeFactory implements SchemeFactory {
      public createCache_resultTupleScheme getScheme() {
        return new createCache_resultTupleScheme();
      }
    }

    private static class createCache_resultTupleScheme extends TupleScheme<createCache_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createCache_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetX()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetX()) {
          struct.x.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createCache_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.x = new MemoryStructureException();
          struct.x.read(iprot);
          struct.setXIsSet(true);
        }
      }
    }

  }

  public static class indexCache_args implements org.apache.thrift.TBase<indexCache_args, indexCache_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("indexCache_args");

    private static final org.apache.thrift.protocol.TField CACHE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cacheId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new indexCache_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new indexCache_argsTupleSchemeFactory());
    }

    public String cacheId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CACHE_ID((short)1, "cacheId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CACHE_ID
            return CACHE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CACHE_ID, new org.apache.thrift.meta_data.FieldMetaData("cacheId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(indexCache_args.class, metaDataMap);
    }

    public indexCache_args() {
    }

    public indexCache_args(
      String cacheId)
    {
      this();
      this.cacheId = cacheId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public indexCache_args(indexCache_args other) {
      if (other.isSetCacheId()) {
        this.cacheId = other.cacheId;
      }
    }

    public indexCache_args deepCopy() {
      return new indexCache_args(this);
    }

    @Override
    public void clear() {
      this.cacheId = null;
    }

    public String getCacheId() {
      return this.cacheId;
    }

    public indexCache_args setCacheId(String cacheId) {
      this.cacheId = cacheId;
      return this;
    }

    public void unsetCacheId() {
      this.cacheId = null;
    }

    /** Returns true if field cacheId is set (has been assigned a value) and false otherwise */
    public boolean isSetCacheId() {
      return this.cacheId != null;
    }

    public void setCacheIdIsSet(boolean value) {
      if (!value) {
        this.cacheId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CACHE_ID:
        if (value == null) {
          unsetCacheId();
        } else {
          setCacheId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CACHE_ID:
        return getCacheId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CACHE_ID:
        return isSetCacheId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof indexCache_args)
        return this.equals((indexCache_args)that);
      return false;
    }

    public boolean equals(indexCache_args that) {
      if (that == null)
        return false;

      boolean this_present_cacheId = true && this.isSetCacheId();
      boolean that_present_cacheId = true && that.isSetCacheId();
      if (this_present_cacheId || that_present_cacheId) {
        if (!(this_present_cacheId && that_present_cacheId))
          return false;
        if (!this.cacheId.equals(that.cacheId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(indexCache_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      indexCache_args typedOther = (indexCache_args)other;

      lastComparison = Boolean.valueOf(isSetCacheId()).compareTo(typedOther.isSetCacheId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCacheId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cacheId, typedOther.cacheId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("indexCache_args(");
      boolean first = true;

      sb.append("cacheId:");
      if (this.cacheId == null) {
        sb.append("null");
      } else {
        sb.append(this.cacheId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class indexCache_argsStandardSchemeFactory implements SchemeFactory {
      public indexCache_argsStandardScheme getScheme() {
        return new indexCache_argsStandardScheme();
      }
    }

    private static class indexCache_argsStandardScheme extends StandardScheme<indexCache_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, indexCache_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CACHE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cacheId = iprot.readString();
                struct.setCacheIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, indexCache_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cacheId != null) {
          oprot.writeFieldBegin(CACHE_ID_FIELD_DESC);
          oprot.writeString(struct.cacheId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class indexCache_argsTupleSchemeFactory implements SchemeFactory {
      public indexCache_argsTupleScheme getScheme() {
        return new indexCache_argsTupleScheme();
      }
    }

    private static class indexCache_argsTupleScheme extends TupleScheme<indexCache_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, indexCache_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCacheId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCacheId()) {
          oprot.writeString(struct.cacheId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, indexCache_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.cacheId = iprot.readString();
          struct.setCacheIdIsSet(true);
        }
      }
    }

  }

  public static class indexCache_result implements org.apache.thrift.TBase<indexCache_result, indexCache_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("indexCache_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField ME_FIELD_DESC = new org.apache.thrift.protocol.TField("me", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField X_FIELD_DESC = new org.apache.thrift.protocol.TField("x", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new indexCache_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new indexCache_resultTupleSchemeFactory());
    }

    public int success; // required
    public MemoryStructureException me; // required
    public ObjectNotFoundException x; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ME((short)1, "me"),
      X((short)2, "x");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ME
            return ME;
          case 2: // X
            return X;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ME, new org.apache.thrift.meta_data.FieldMetaData("me", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.X, new org.apache.thrift.meta_data.FieldMetaData("x", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(indexCache_result.class, metaDataMap);
    }

    public indexCache_result() {
    }

    public indexCache_result(
      int success,
      MemoryStructureException me,
      ObjectNotFoundException x)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.me = me;
      this.x = x;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public indexCache_result(indexCache_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetMe()) {
        this.me = new MemoryStructureException(other.me);
      }
      if (other.isSetX()) {
        this.x = new ObjectNotFoundException(other.x);
      }
    }

    public indexCache_result deepCopy() {
      return new indexCache_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.me = null;
      this.x = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public indexCache_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public MemoryStructureException getMe() {
      return this.me;
    }

    public indexCache_result setMe(MemoryStructureException me) {
      this.me = me;
      return this;
    }

    public void unsetMe() {
      this.me = null;
    }

    /** Returns true if field me is set (has been assigned a value) and false otherwise */
    public boolean isSetMe() {
      return this.me != null;
    }

    public void setMeIsSet(boolean value) {
      if (!value) {
        this.me = null;
      }
    }

    public ObjectNotFoundException getX() {
      return this.x;
    }

    public indexCache_result setX(ObjectNotFoundException x) {
      this.x = x;
      return this;
    }

    public void unsetX() {
      this.x = null;
    }

    /** Returns true if field x is set (has been assigned a value) and false otherwise */
    public boolean isSetX() {
      return this.x != null;
    }

    public void setXIsSet(boolean value) {
      if (!value) {
        this.x = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case ME:
        if (value == null) {
          unsetMe();
        } else {
          setMe((MemoryStructureException)value);
        }
        break;

      case X:
        if (value == null) {
          unsetX();
        } else {
          setX((ObjectNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case ME:
        return getMe();

      case X:
        return getX();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ME:
        return isSetMe();
      case X:
        return isSetX();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof indexCache_result)
        return this.equals((indexCache_result)that);
      return false;
    }

    public boolean equals(indexCache_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_me = true && this.isSetMe();
      boolean that_present_me = true && that.isSetMe();
      if (this_present_me || that_present_me) {
        if (!(this_present_me && that_present_me))
          return false;
        if (!this.me.equals(that.me))
          return false;
      }

      boolean this_present_x = true && this.isSetX();
      boolean that_present_x = true && that.isSetX();
      if (this_present_x || that_present_x) {
        if (!(this_present_x && that_present_x))
          return false;
        if (!this.x.equals(that.x))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(indexCache_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      indexCache_result typedOther = (indexCache_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMe()).compareTo(typedOther.isSetMe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.me, typedOther.me);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetX()).compareTo(typedOther.isSetX());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetX()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.x, typedOther.x);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("indexCache_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("me:");
      if (this.me == null) {
        sb.append("null");
      } else {
        sb.append(this.me);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("x:");
      if (this.x == null) {
        sb.append("null");
      } else {
        sb.append(this.x);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class indexCache_resultStandardSchemeFactory implements SchemeFactory {
      public indexCache_resultStandardScheme getScheme() {
        return new indexCache_resultStandardScheme();
      }
    }

    private static class indexCache_resultStandardScheme extends StandardScheme<indexCache_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, indexCache_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.me = new MemoryStructureException();
                struct.me.read(iprot);
                struct.setMeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // X
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.x = new ObjectNotFoundException();
                struct.x.read(iprot);
                struct.setXIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, indexCache_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(struct.success);
        oprot.writeFieldEnd();
        if (struct.me != null) {
          oprot.writeFieldBegin(ME_FIELD_DESC);
          struct.me.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.x != null) {
          oprot.writeFieldBegin(X_FIELD_DESC);
          struct.x.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class indexCache_resultTupleSchemeFactory implements SchemeFactory {
      public indexCache_resultTupleScheme getScheme() {
        return new indexCache_resultTupleScheme();
      }
    }

    private static class indexCache_resultTupleScheme extends TupleScheme<indexCache_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, indexCache_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMe()) {
          optionals.set(1);
        }
        if (struct.isSetX()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetMe()) {
          struct.me.write(oprot);
        }
        if (struct.isSetX()) {
          struct.x.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, indexCache_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.me = new MemoryStructureException();
          struct.me.read(iprot);
          struct.setMeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.x = new ObjectNotFoundException();
          struct.x.read(iprot);
          struct.setXIsSet(true);
        }
      }
    }

  }

  public static class getPrecisionExceptionsFromCache_args implements org.apache.thrift.TBase<getPrecisionExceptionsFromCache_args, getPrecisionExceptionsFromCache_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPrecisionExceptionsFromCache_args");

    private static final org.apache.thrift.protocol.TField CACHE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cacheId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPrecisionExceptionsFromCache_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPrecisionExceptionsFromCache_argsTupleSchemeFactory());
    }

    public String cacheId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CACHE_ID((short)1, "cacheId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CACHE_ID
            return CACHE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CACHE_ID, new org.apache.thrift.meta_data.FieldMetaData("cacheId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPrecisionExceptionsFromCache_args.class, metaDataMap);
    }

    public getPrecisionExceptionsFromCache_args() {
    }

    public getPrecisionExceptionsFromCache_args(
      String cacheId)
    {
      this();
      this.cacheId = cacheId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPrecisionExceptionsFromCache_args(getPrecisionExceptionsFromCache_args other) {
      if (other.isSetCacheId()) {
        this.cacheId = other.cacheId;
      }
    }

    public getPrecisionExceptionsFromCache_args deepCopy() {
      return new getPrecisionExceptionsFromCache_args(this);
    }

    @Override
    public void clear() {
      this.cacheId = null;
    }

    public String getCacheId() {
      return this.cacheId;
    }

    public getPrecisionExceptionsFromCache_args setCacheId(String cacheId) {
      this.cacheId = cacheId;
      return this;
    }

    public void unsetCacheId() {
      this.cacheId = null;
    }

    /** Returns true if field cacheId is set (has been assigned a value) and false otherwise */
    public boolean isSetCacheId() {
      return this.cacheId != null;
    }

    public void setCacheIdIsSet(boolean value) {
      if (!value) {
        this.cacheId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CACHE_ID:
        if (value == null) {
          unsetCacheId();
        } else {
          setCacheId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CACHE_ID:
        return getCacheId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CACHE_ID:
        return isSetCacheId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPrecisionExceptionsFromCache_args)
        return this.equals((getPrecisionExceptionsFromCache_args)that);
      return false;
    }

    public boolean equals(getPrecisionExceptionsFromCache_args that) {
      if (that == null)
        return false;

      boolean this_present_cacheId = true && this.isSetCacheId();
      boolean that_present_cacheId = true && that.isSetCacheId();
      if (this_present_cacheId || that_present_cacheId) {
        if (!(this_present_cacheId && that_present_cacheId))
          return false;
        if (!this.cacheId.equals(that.cacheId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPrecisionExceptionsFromCache_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPrecisionExceptionsFromCache_args typedOther = (getPrecisionExceptionsFromCache_args)other;

      lastComparison = Boolean.valueOf(isSetCacheId()).compareTo(typedOther.isSetCacheId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCacheId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cacheId, typedOther.cacheId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPrecisionExceptionsFromCache_args(");
      boolean first = true;

      sb.append("cacheId:");
      if (this.cacheId == null) {
        sb.append("null");
      } else {
        sb.append(this.cacheId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPrecisionExceptionsFromCache_argsStandardSchemeFactory implements SchemeFactory {
      public getPrecisionExceptionsFromCache_argsStandardScheme getScheme() {
        return new getPrecisionExceptionsFromCache_argsStandardScheme();
      }
    }

    private static class getPrecisionExceptionsFromCache_argsStandardScheme extends StandardScheme<getPrecisionExceptionsFromCache_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPrecisionExceptionsFromCache_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CACHE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cacheId = iprot.readString();
                struct.setCacheIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPrecisionExceptionsFromCache_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cacheId != null) {
          oprot.writeFieldBegin(CACHE_ID_FIELD_DESC);
          oprot.writeString(struct.cacheId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPrecisionExceptionsFromCache_argsTupleSchemeFactory implements SchemeFactory {
      public getPrecisionExceptionsFromCache_argsTupleScheme getScheme() {
        return new getPrecisionExceptionsFromCache_argsTupleScheme();
      }
    }

    private static class getPrecisionExceptionsFromCache_argsTupleScheme extends TupleScheme<getPrecisionExceptionsFromCache_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPrecisionExceptionsFromCache_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCacheId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCacheId()) {
          oprot.writeString(struct.cacheId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPrecisionExceptionsFromCache_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.cacheId = iprot.readString();
          struct.setCacheIdIsSet(true);
        }
      }
    }

  }

  public static class getPrecisionExceptionsFromCache_result implements org.apache.thrift.TBase<getPrecisionExceptionsFromCache_result, getPrecisionExceptionsFromCache_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPrecisionExceptionsFromCache_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.SET, (short)0);
    private static final org.apache.thrift.protocol.TField ME_FIELD_DESC = new org.apache.thrift.protocol.TField("me", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField X_FIELD_DESC = new org.apache.thrift.protocol.TField("x", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPrecisionExceptionsFromCache_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPrecisionExceptionsFromCache_resultTupleSchemeFactory());
    }

    public Set<String> success; // required
    public MemoryStructureException me; // required
    public ObjectNotFoundException x; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ME((short)1, "me"),
      X((short)2, "x");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ME
            return ME;
          case 2: // X
            return X;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.ME, new org.apache.thrift.meta_data.FieldMetaData("me", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.X, new org.apache.thrift.meta_data.FieldMetaData("x", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPrecisionExceptionsFromCache_result.class, metaDataMap);
    }

    public getPrecisionExceptionsFromCache_result() {
    }

    public getPrecisionExceptionsFromCache_result(
      Set<String> success,
      MemoryStructureException me,
      ObjectNotFoundException x)
    {
      this();
      this.success = success;
      this.me = me;
      this.x = x;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPrecisionExceptionsFromCache_result(getPrecisionExceptionsFromCache_result other) {
      if (other.isSetSuccess()) {
        Set<String> __this__success = new HashSet<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetMe()) {
        this.me = new MemoryStructureException(other.me);
      }
      if (other.isSetX()) {
        this.x = new ObjectNotFoundException(other.x);
      }
    }

    public getPrecisionExceptionsFromCache_result deepCopy() {
      return new getPrecisionExceptionsFromCache_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.me = null;
      this.x = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new HashSet<String>();
      }
      this.success.add(elem);
    }

    public Set<String> getSuccess() {
      return this.success;
    }

    public getPrecisionExceptionsFromCache_result setSuccess(Set<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public MemoryStructureException getMe() {
      return this.me;
    }

    public getPrecisionExceptionsFromCache_result setMe(MemoryStructureException me) {
      this.me = me;
      return this;
    }

    public void unsetMe() {
      this.me = null;
    }

    /** Returns true if field me is set (has been assigned a value) and false otherwise */
    public boolean isSetMe() {
      return this.me != null;
    }

    public void setMeIsSet(boolean value) {
      if (!value) {
        this.me = null;
      }
    }

    public ObjectNotFoundException getX() {
      return this.x;
    }

    public getPrecisionExceptionsFromCache_result setX(ObjectNotFoundException x) {
      this.x = x;
      return this;
    }

    public void unsetX() {
      this.x = null;
    }

    /** Returns true if field x is set (has been assigned a value) and false otherwise */
    public boolean isSetX() {
      return this.x != null;
    }

    public void setXIsSet(boolean value) {
      if (!value) {
        this.x = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Set<String>)value);
        }
        break;

      case ME:
        if (value == null) {
          unsetMe();
        } else {
          setMe((MemoryStructureException)value);
        }
        break;

      case X:
        if (value == null) {
          unsetX();
        } else {
          setX((ObjectNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ME:
        return getMe();

      case X:
        return getX();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ME:
        return isSetMe();
      case X:
        return isSetX();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPrecisionExceptionsFromCache_result)
        return this.equals((getPrecisionExceptionsFromCache_result)that);
      return false;
    }

    public boolean equals(getPrecisionExceptionsFromCache_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_me = true && this.isSetMe();
      boolean that_present_me = true && that.isSetMe();
      if (this_present_me || that_present_me) {
        if (!(this_present_me && that_present_me))
          return false;
        if (!this.me.equals(that.me))
          return false;
      }

      boolean this_present_x = true && this.isSetX();
      boolean that_present_x = true && that.isSetX();
      if (this_present_x || that_present_x) {
        if (!(this_present_x && that_present_x))
          return false;
        if (!this.x.equals(that.x))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPrecisionExceptionsFromCache_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPrecisionExceptionsFromCache_result typedOther = (getPrecisionExceptionsFromCache_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMe()).compareTo(typedOther.isSetMe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.me, typedOther.me);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetX()).compareTo(typedOther.isSetX());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetX()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.x, typedOther.x);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPrecisionExceptionsFromCache_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("me:");
      if (this.me == null) {
        sb.append("null");
      } else {
        sb.append(this.me);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("x:");
      if (this.x == null) {
        sb.append("null");
      } else {
        sb.append(this.x);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPrecisionExceptionsFromCache_resultStandardSchemeFactory implements SchemeFactory {
      public getPrecisionExceptionsFromCache_resultStandardScheme getScheme() {
        return new getPrecisionExceptionsFromCache_resultStandardScheme();
      }
    }

    private static class getPrecisionExceptionsFromCache_resultStandardScheme extends StandardScheme<getPrecisionExceptionsFromCache_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPrecisionExceptionsFromCache_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set66 = iprot.readSetBegin();
                  struct.success = new HashSet<String>(2*_set66.size);
                  for (int _i67 = 0; _i67 < _set66.size; ++_i67)
                  {
                    String _elem68; // required
                    _elem68 = iprot.readString();
                    struct.success.add(_elem68);
                  }
                  iprot.readSetEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.me = new MemoryStructureException();
                struct.me.read(iprot);
                struct.setMeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // X
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.x = new ObjectNotFoundException();
                struct.x.read(iprot);
                struct.setXIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPrecisionExceptionsFromCache_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter69 : struct.success)
            {
              oprot.writeString(_iter69);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.me != null) {
          oprot.writeFieldBegin(ME_FIELD_DESC);
          struct.me.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.x != null) {
          oprot.writeFieldBegin(X_FIELD_DESC);
          struct.x.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPrecisionExceptionsFromCache_resultTupleSchemeFactory implements SchemeFactory {
      public getPrecisionExceptionsFromCache_resultTupleScheme getScheme() {
        return new getPrecisionExceptionsFromCache_resultTupleScheme();
      }
    }

    private static class getPrecisionExceptionsFromCache_resultTupleScheme extends TupleScheme<getPrecisionExceptionsFromCache_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPrecisionExceptionsFromCache_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMe()) {
          optionals.set(1);
        }
        if (struct.isSetX()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter70 : struct.success)
            {
              oprot.writeString(_iter70);
            }
          }
        }
        if (struct.isSetMe()) {
          struct.me.write(oprot);
        }
        if (struct.isSetX()) {
          struct.x.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPrecisionExceptionsFromCache_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TSet _set71 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashSet<String>(2*_set71.size);
            for (int _i72 = 0; _i72 < _set71.size; ++_i72)
            {
              String _elem73; // required
              _elem73 = iprot.readString();
              struct.success.add(_elem73);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.me = new MemoryStructureException();
          struct.me.read(iprot);
          struct.setMeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.x = new ObjectNotFoundException();
          struct.x.read(iprot);
          struct.setXIsSet(true);
        }
      }
    }

  }

  public static class createWebEntities_args implements org.apache.thrift.TBase<createWebEntities_args, createWebEntities_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createWebEntities_args");

    private static final org.apache.thrift.protocol.TField CACHE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cacheId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createWebEntities_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createWebEntities_argsTupleSchemeFactory());
    }

    public String cacheId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CACHE_ID((short)1, "cacheId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CACHE_ID
            return CACHE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CACHE_ID, new org.apache.thrift.meta_data.FieldMetaData("cacheId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createWebEntities_args.class, metaDataMap);
    }

    public createWebEntities_args() {
    }

    public createWebEntities_args(
      String cacheId)
    {
      this();
      this.cacheId = cacheId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createWebEntities_args(createWebEntities_args other) {
      if (other.isSetCacheId()) {
        this.cacheId = other.cacheId;
      }
    }

    public createWebEntities_args deepCopy() {
      return new createWebEntities_args(this);
    }

    @Override
    public void clear() {
      this.cacheId = null;
    }

    public String getCacheId() {
      return this.cacheId;
    }

    public createWebEntities_args setCacheId(String cacheId) {
      this.cacheId = cacheId;
      return this;
    }

    public void unsetCacheId() {
      this.cacheId = null;
    }

    /** Returns true if field cacheId is set (has been assigned a value) and false otherwise */
    public boolean isSetCacheId() {
      return this.cacheId != null;
    }

    public void setCacheIdIsSet(boolean value) {
      if (!value) {
        this.cacheId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CACHE_ID:
        if (value == null) {
          unsetCacheId();
        } else {
          setCacheId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CACHE_ID:
        return getCacheId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CACHE_ID:
        return isSetCacheId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createWebEntities_args)
        return this.equals((createWebEntities_args)that);
      return false;
    }

    public boolean equals(createWebEntities_args that) {
      if (that == null)
        return false;

      boolean this_present_cacheId = true && this.isSetCacheId();
      boolean that_present_cacheId = true && that.isSetCacheId();
      if (this_present_cacheId || that_present_cacheId) {
        if (!(this_present_cacheId && that_present_cacheId))
          return false;
        if (!this.cacheId.equals(that.cacheId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createWebEntities_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createWebEntities_args typedOther = (createWebEntities_args)other;

      lastComparison = Boolean.valueOf(isSetCacheId()).compareTo(typedOther.isSetCacheId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCacheId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cacheId, typedOther.cacheId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createWebEntities_args(");
      boolean first = true;

      sb.append("cacheId:");
      if (this.cacheId == null) {
        sb.append("null");
      } else {
        sb.append(this.cacheId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createWebEntities_argsStandardSchemeFactory implements SchemeFactory {
      public createWebEntities_argsStandardScheme getScheme() {
        return new createWebEntities_argsStandardScheme();
      }
    }

    private static class createWebEntities_argsStandardScheme extends StandardScheme<createWebEntities_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createWebEntities_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CACHE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cacheId = iprot.readString();
                struct.setCacheIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createWebEntities_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cacheId != null) {
          oprot.writeFieldBegin(CACHE_ID_FIELD_DESC);
          oprot.writeString(struct.cacheId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createWebEntities_argsTupleSchemeFactory implements SchemeFactory {
      public createWebEntities_argsTupleScheme getScheme() {
        return new createWebEntities_argsTupleScheme();
      }
    }

    private static class createWebEntities_argsTupleScheme extends TupleScheme<createWebEntities_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createWebEntities_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCacheId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCacheId()) {
          oprot.writeString(struct.cacheId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createWebEntities_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.cacheId = iprot.readString();
          struct.setCacheIdIsSet(true);
        }
      }
    }

  }

  public static class createWebEntities_result implements org.apache.thrift.TBase<createWebEntities_result, createWebEntities_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createWebEntities_result");

    private static final org.apache.thrift.protocol.TField ME_FIELD_DESC = new org.apache.thrift.protocol.TField("me", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField X_FIELD_DESC = new org.apache.thrift.protocol.TField("x", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createWebEntities_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createWebEntities_resultTupleSchemeFactory());
    }

    public MemoryStructureException me; // required
    public ObjectNotFoundException x; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ME((short)1, "me"),
      X((short)2, "x");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ME
            return ME;
          case 2: // X
            return X;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ME, new org.apache.thrift.meta_data.FieldMetaData("me", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.X, new org.apache.thrift.meta_data.FieldMetaData("x", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createWebEntities_result.class, metaDataMap);
    }

    public createWebEntities_result() {
    }

    public createWebEntities_result(
      MemoryStructureException me,
      ObjectNotFoundException x)
    {
      this();
      this.me = me;
      this.x = x;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createWebEntities_result(createWebEntities_result other) {
      if (other.isSetMe()) {
        this.me = new MemoryStructureException(other.me);
      }
      if (other.isSetX()) {
        this.x = new ObjectNotFoundException(other.x);
      }
    }

    public createWebEntities_result deepCopy() {
      return new createWebEntities_result(this);
    }

    @Override
    public void clear() {
      this.me = null;
      this.x = null;
    }

    public MemoryStructureException getMe() {
      return this.me;
    }

    public createWebEntities_result setMe(MemoryStructureException me) {
      this.me = me;
      return this;
    }

    public void unsetMe() {
      this.me = null;
    }

    /** Returns true if field me is set (has been assigned a value) and false otherwise */
    public boolean isSetMe() {
      return this.me != null;
    }

    public void setMeIsSet(boolean value) {
      if (!value) {
        this.me = null;
      }
    }

    public ObjectNotFoundException getX() {
      return this.x;
    }

    public createWebEntities_result setX(ObjectNotFoundException x) {
      this.x = x;
      return this;
    }

    public void unsetX() {
      this.x = null;
    }

    /** Returns true if field x is set (has been assigned a value) and false otherwise */
    public boolean isSetX() {
      return this.x != null;
    }

    public void setXIsSet(boolean value) {
      if (!value) {
        this.x = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ME:
        if (value == null) {
          unsetMe();
        } else {
          setMe((MemoryStructureException)value);
        }
        break;

      case X:
        if (value == null) {
          unsetX();
        } else {
          setX((ObjectNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ME:
        return getMe();

      case X:
        return getX();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ME:
        return isSetMe();
      case X:
        return isSetX();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createWebEntities_result)
        return this.equals((createWebEntities_result)that);
      return false;
    }

    public boolean equals(createWebEntities_result that) {
      if (that == null)
        return false;

      boolean this_present_me = true && this.isSetMe();
      boolean that_present_me = true && that.isSetMe();
      if (this_present_me || that_present_me) {
        if (!(this_present_me && that_present_me))
          return false;
        if (!this.me.equals(that.me))
          return false;
      }

      boolean this_present_x = true && this.isSetX();
      boolean that_present_x = true && that.isSetX();
      if (this_present_x || that_present_x) {
        if (!(this_present_x && that_present_x))
          return false;
        if (!this.x.equals(that.x))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createWebEntities_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createWebEntities_result typedOther = (createWebEntities_result)other;

      lastComparison = Boolean.valueOf(isSetMe()).compareTo(typedOther.isSetMe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.me, typedOther.me);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetX()).compareTo(typedOther.isSetX());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetX()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.x, typedOther.x);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createWebEntities_result(");
      boolean first = true;

      sb.append("me:");
      if (this.me == null) {
        sb.append("null");
      } else {
        sb.append(this.me);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("x:");
      if (this.x == null) {
        sb.append("null");
      } else {
        sb.append(this.x);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createWebEntities_resultStandardSchemeFactory implements SchemeFactory {
      public createWebEntities_resultStandardScheme getScheme() {
        return new createWebEntities_resultStandardScheme();
      }
    }

    private static class createWebEntities_resultStandardScheme extends StandardScheme<createWebEntities_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createWebEntities_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.me = new MemoryStructureException();
                struct.me.read(iprot);
                struct.setMeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // X
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.x = new ObjectNotFoundException();
                struct.x.read(iprot);
                struct.setXIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createWebEntities_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.me != null) {
          oprot.writeFieldBegin(ME_FIELD_DESC);
          struct.me.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.x != null) {
          oprot.writeFieldBegin(X_FIELD_DESC);
          struct.x.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createWebEntities_resultTupleSchemeFactory implements SchemeFactory {
      public createWebEntities_resultTupleScheme getScheme() {
        return new createWebEntities_resultTupleScheme();
      }
    }

    private static class createWebEntities_resultTupleScheme extends TupleScheme<createWebEntities_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createWebEntities_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMe()) {
          optionals.set(0);
        }
        if (struct.isSetX()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMe()) {
          struct.me.write(oprot);
        }
        if (struct.isSetX()) {
          struct.x.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createWebEntities_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.me = new MemoryStructureException();
          struct.me.read(iprot);
          struct.setMeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.x = new ObjectNotFoundException();
          struct.x.read(iprot);
          struct.setXIsSet(true);
        }
      }
    }

  }

  public static class deleteCache_args implements org.apache.thrift.TBase<deleteCache_args, deleteCache_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteCache_args");

    private static final org.apache.thrift.protocol.TField CACHE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cacheId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteCache_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteCache_argsTupleSchemeFactory());
    }

    public String cacheId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CACHE_ID((short)1, "cacheId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CACHE_ID
            return CACHE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CACHE_ID, new org.apache.thrift.meta_data.FieldMetaData("cacheId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteCache_args.class, metaDataMap);
    }

    public deleteCache_args() {
    }

    public deleteCache_args(
      String cacheId)
    {
      this();
      this.cacheId = cacheId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteCache_args(deleteCache_args other) {
      if (other.isSetCacheId()) {
        this.cacheId = other.cacheId;
      }
    }

    public deleteCache_args deepCopy() {
      return new deleteCache_args(this);
    }

    @Override
    public void clear() {
      this.cacheId = null;
    }

    public String getCacheId() {
      return this.cacheId;
    }

    public deleteCache_args setCacheId(String cacheId) {
      this.cacheId = cacheId;
      return this;
    }

    public void unsetCacheId() {
      this.cacheId = null;
    }

    /** Returns true if field cacheId is set (has been assigned a value) and false otherwise */
    public boolean isSetCacheId() {
      return this.cacheId != null;
    }

    public void setCacheIdIsSet(boolean value) {
      if (!value) {
        this.cacheId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CACHE_ID:
        if (value == null) {
          unsetCacheId();
        } else {
          setCacheId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CACHE_ID:
        return getCacheId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CACHE_ID:
        return isSetCacheId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteCache_args)
        return this.equals((deleteCache_args)that);
      return false;
    }

    public boolean equals(deleteCache_args that) {
      if (that == null)
        return false;

      boolean this_present_cacheId = true && this.isSetCacheId();
      boolean that_present_cacheId = true && that.isSetCacheId();
      if (this_present_cacheId || that_present_cacheId) {
        if (!(this_present_cacheId && that_present_cacheId))
          return false;
        if (!this.cacheId.equals(that.cacheId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteCache_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteCache_args typedOther = (deleteCache_args)other;

      lastComparison = Boolean.valueOf(isSetCacheId()).compareTo(typedOther.isSetCacheId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCacheId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cacheId, typedOther.cacheId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteCache_args(");
      boolean first = true;

      sb.append("cacheId:");
      if (this.cacheId == null) {
        sb.append("null");
      } else {
        sb.append(this.cacheId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteCache_argsStandardSchemeFactory implements SchemeFactory {
      public deleteCache_argsStandardScheme getScheme() {
        return new deleteCache_argsStandardScheme();
      }
    }

    private static class deleteCache_argsStandardScheme extends StandardScheme<deleteCache_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteCache_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CACHE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cacheId = iprot.readString();
                struct.setCacheIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteCache_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cacheId != null) {
          oprot.writeFieldBegin(CACHE_ID_FIELD_DESC);
          oprot.writeString(struct.cacheId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteCache_argsTupleSchemeFactory implements SchemeFactory {
      public deleteCache_argsTupleScheme getScheme() {
        return new deleteCache_argsTupleScheme();
      }
    }

    private static class deleteCache_argsTupleScheme extends TupleScheme<deleteCache_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteCache_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCacheId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCacheId()) {
          oprot.writeString(struct.cacheId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteCache_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.cacheId = iprot.readString();
          struct.setCacheIdIsSet(true);
        }
      }
    }

  }

  public static class deleteCache_result implements org.apache.thrift.TBase<deleteCache_result, deleteCache_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteCache_result");

    private static final org.apache.thrift.protocol.TField ME_FIELD_DESC = new org.apache.thrift.protocol.TField("me", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField X_FIELD_DESC = new org.apache.thrift.protocol.TField("x", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteCache_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteCache_resultTupleSchemeFactory());
    }

    public MemoryStructureException me; // required
    public ObjectNotFoundException x; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ME((short)1, "me"),
      X((short)2, "x");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ME
            return ME;
          case 2: // X
            return X;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ME, new org.apache.thrift.meta_data.FieldMetaData("me", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.X, new org.apache.thrift.meta_data.FieldMetaData("x", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteCache_result.class, metaDataMap);
    }

    public deleteCache_result() {
    }

    public deleteCache_result(
      MemoryStructureException me,
      ObjectNotFoundException x)
    {
      this();
      this.me = me;
      this.x = x;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteCache_result(deleteCache_result other) {
      if (other.isSetMe()) {
        this.me = new MemoryStructureException(other.me);
      }
      if (other.isSetX()) {
        this.x = new ObjectNotFoundException(other.x);
      }
    }

    public deleteCache_result deepCopy() {
      return new deleteCache_result(this);
    }

    @Override
    public void clear() {
      this.me = null;
      this.x = null;
    }

    public MemoryStructureException getMe() {
      return this.me;
    }

    public deleteCache_result setMe(MemoryStructureException me) {
      this.me = me;
      return this;
    }

    public void unsetMe() {
      this.me = null;
    }

    /** Returns true if field me is set (has been assigned a value) and false otherwise */
    public boolean isSetMe() {
      return this.me != null;
    }

    public void setMeIsSet(boolean value) {
      if (!value) {
        this.me = null;
      }
    }

    public ObjectNotFoundException getX() {
      return this.x;
    }

    public deleteCache_result setX(ObjectNotFoundException x) {
      this.x = x;
      return this;
    }

    public void unsetX() {
      this.x = null;
    }

    /** Returns true if field x is set (has been assigned a value) and false otherwise */
    public boolean isSetX() {
      return this.x != null;
    }

    public void setXIsSet(boolean value) {
      if (!value) {
        this.x = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ME:
        if (value == null) {
          unsetMe();
        } else {
          setMe((MemoryStructureException)value);
        }
        break;

      case X:
        if (value == null) {
          unsetX();
        } else {
          setX((ObjectNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ME:
        return getMe();

      case X:
        return getX();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ME:
        return isSetMe();
      case X:
        return isSetX();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteCache_result)
        return this.equals((deleteCache_result)that);
      return false;
    }

    public boolean equals(deleteCache_result that) {
      if (that == null)
        return false;

      boolean this_present_me = true && this.isSetMe();
      boolean that_present_me = true && that.isSetMe();
      if (this_present_me || that_present_me) {
        if (!(this_present_me && that_present_me))
          return false;
        if (!this.me.equals(that.me))
          return false;
      }

      boolean this_present_x = true && this.isSetX();
      boolean that_present_x = true && that.isSetX();
      if (this_present_x || that_present_x) {
        if (!(this_present_x && that_present_x))
          return false;
        if (!this.x.equals(that.x))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteCache_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteCache_result typedOther = (deleteCache_result)other;

      lastComparison = Boolean.valueOf(isSetMe()).compareTo(typedOther.isSetMe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.me, typedOther.me);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetX()).compareTo(typedOther.isSetX());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetX()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.x, typedOther.x);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteCache_result(");
      boolean first = true;

      sb.append("me:");
      if (this.me == null) {
        sb.append("null");
      } else {
        sb.append(this.me);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("x:");
      if (this.x == null) {
        sb.append("null");
      } else {
        sb.append(this.x);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteCache_resultStandardSchemeFactory implements SchemeFactory {
      public deleteCache_resultStandardScheme getScheme() {
        return new deleteCache_resultStandardScheme();
      }
    }

    private static class deleteCache_resultStandardScheme extends StandardScheme<deleteCache_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteCache_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.me = new MemoryStructureException();
                struct.me.read(iprot);
                struct.setMeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // X
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.x = new ObjectNotFoundException();
                struct.x.read(iprot);
                struct.setXIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteCache_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.me != null) {
          oprot.writeFieldBegin(ME_FIELD_DESC);
          struct.me.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.x != null) {
          oprot.writeFieldBegin(X_FIELD_DESC);
          struct.x.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteCache_resultTupleSchemeFactory implements SchemeFactory {
      public deleteCache_resultTupleScheme getScheme() {
        return new deleteCache_resultTupleScheme();
      }
    }

    private static class deleteCache_resultTupleScheme extends TupleScheme<deleteCache_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteCache_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMe()) {
          optionals.set(0);
        }
        if (struct.isSetX()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMe()) {
          struct.me.write(oprot);
        }
        if (struct.isSetX()) {
          struct.x.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteCache_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.me = new MemoryStructureException();
          struct.me.read(iprot);
          struct.setMeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.x = new ObjectNotFoundException();
          struct.x.read(iprot);
          struct.setXIsSet(true);
        }
      }
    }

  }

  public static class markPageWithPrecisionException_args implements org.apache.thrift.TBase<markPageWithPrecisionException_args, markPageWithPrecisionException_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("markPageWithPrecisionException_args");

    private static final org.apache.thrift.protocol.TField PAGE_ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pageItemId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new markPageWithPrecisionException_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new markPageWithPrecisionException_argsTupleSchemeFactory());
    }

    public String pageItemId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE_ITEM_ID((short)1, "pageItemId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE_ITEM_ID
            return PAGE_ITEM_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE_ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("pageItemId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(markPageWithPrecisionException_args.class, metaDataMap);
    }

    public markPageWithPrecisionException_args() {
    }

    public markPageWithPrecisionException_args(
      String pageItemId)
    {
      this();
      this.pageItemId = pageItemId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public markPageWithPrecisionException_args(markPageWithPrecisionException_args other) {
      if (other.isSetPageItemId()) {
        this.pageItemId = other.pageItemId;
      }
    }

    public markPageWithPrecisionException_args deepCopy() {
      return new markPageWithPrecisionException_args(this);
    }

    @Override
    public void clear() {
      this.pageItemId = null;
    }

    public String getPageItemId() {
      return this.pageItemId;
    }

    public markPageWithPrecisionException_args setPageItemId(String pageItemId) {
      this.pageItemId = pageItemId;
      return this;
    }

    public void unsetPageItemId() {
      this.pageItemId = null;
    }

    /** Returns true if field pageItemId is set (has been assigned a value) and false otherwise */
    public boolean isSetPageItemId() {
      return this.pageItemId != null;
    }

    public void setPageItemIdIsSet(boolean value) {
      if (!value) {
        this.pageItemId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGE_ITEM_ID:
        if (value == null) {
          unsetPageItemId();
        } else {
          setPageItemId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE_ITEM_ID:
        return getPageItemId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGE_ITEM_ID:
        return isSetPageItemId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof markPageWithPrecisionException_args)
        return this.equals((markPageWithPrecisionException_args)that);
      return false;
    }

    public boolean equals(markPageWithPrecisionException_args that) {
      if (that == null)
        return false;

      boolean this_present_pageItemId = true && this.isSetPageItemId();
      boolean that_present_pageItemId = true && that.isSetPageItemId();
      if (this_present_pageItemId || that_present_pageItemId) {
        if (!(this_present_pageItemId && that_present_pageItemId))
          return false;
        if (!this.pageItemId.equals(that.pageItemId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(markPageWithPrecisionException_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      markPageWithPrecisionException_args typedOther = (markPageWithPrecisionException_args)other;

      lastComparison = Boolean.valueOf(isSetPageItemId()).compareTo(typedOther.isSetPageItemId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageItemId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageItemId, typedOther.pageItemId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("markPageWithPrecisionException_args(");
      boolean first = true;

      sb.append("pageItemId:");
      if (this.pageItemId == null) {
        sb.append("null");
      } else {
        sb.append(this.pageItemId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class markPageWithPrecisionException_argsStandardSchemeFactory implements SchemeFactory {
      public markPageWithPrecisionException_argsStandardScheme getScheme() {
        return new markPageWithPrecisionException_argsStandardScheme();
      }
    }

    private static class markPageWithPrecisionException_argsStandardScheme extends StandardScheme<markPageWithPrecisionException_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, markPageWithPrecisionException_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE_ITEM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pageItemId = iprot.readString();
                struct.setPageItemIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, markPageWithPrecisionException_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pageItemId != null) {
          oprot.writeFieldBegin(PAGE_ITEM_ID_FIELD_DESC);
          oprot.writeString(struct.pageItemId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class markPageWithPrecisionException_argsTupleSchemeFactory implements SchemeFactory {
      public markPageWithPrecisionException_argsTupleScheme getScheme() {
        return new markPageWithPrecisionException_argsTupleScheme();
      }
    }

    private static class markPageWithPrecisionException_argsTupleScheme extends TupleScheme<markPageWithPrecisionException_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, markPageWithPrecisionException_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPageItemId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPageItemId()) {
          oprot.writeString(struct.pageItemId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, markPageWithPrecisionException_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pageItemId = iprot.readString();
          struct.setPageItemIdIsSet(true);
        }
      }
    }

  }

  public static class markPageWithPrecisionException_result implements org.apache.thrift.TBase<markPageWithPrecisionException_result, markPageWithPrecisionException_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("markPageWithPrecisionException_result");

    private static final org.apache.thrift.protocol.TField ME_FIELD_DESC = new org.apache.thrift.protocol.TField("me", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField X_FIELD_DESC = new org.apache.thrift.protocol.TField("x", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new markPageWithPrecisionException_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new markPageWithPrecisionException_resultTupleSchemeFactory());
    }

    public MemoryStructureException me; // required
    public ObjectNotFoundException x; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ME((short)1, "me"),
      X((short)2, "x");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ME
            return ME;
          case 2: // X
            return X;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ME, new org.apache.thrift.meta_data.FieldMetaData("me", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.X, new org.apache.thrift.meta_data.FieldMetaData("x", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(markPageWithPrecisionException_result.class, metaDataMap);
    }

    public markPageWithPrecisionException_result() {
    }

    public markPageWithPrecisionException_result(
      MemoryStructureException me,
      ObjectNotFoundException x)
    {
      this();
      this.me = me;
      this.x = x;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public markPageWithPrecisionException_result(markPageWithPrecisionException_result other) {
      if (other.isSetMe()) {
        this.me = new MemoryStructureException(other.me);
      }
      if (other.isSetX()) {
        this.x = new ObjectNotFoundException(other.x);
      }
    }

    public markPageWithPrecisionException_result deepCopy() {
      return new markPageWithPrecisionException_result(this);
    }

    @Override
    public void clear() {
      this.me = null;
      this.x = null;
    }

    public MemoryStructureException getMe() {
      return this.me;
    }

    public markPageWithPrecisionException_result setMe(MemoryStructureException me) {
      this.me = me;
      return this;
    }

    public void unsetMe() {
      this.me = null;
    }

    /** Returns true if field me is set (has been assigned a value) and false otherwise */
    public boolean isSetMe() {
      return this.me != null;
    }

    public void setMeIsSet(boolean value) {
      if (!value) {
        this.me = null;
      }
    }

    public ObjectNotFoundException getX() {
      return this.x;
    }

    public markPageWithPrecisionException_result setX(ObjectNotFoundException x) {
      this.x = x;
      return this;
    }

    public void unsetX() {
      this.x = null;
    }

    /** Returns true if field x is set (has been assigned a value) and false otherwise */
    public boolean isSetX() {
      return this.x != null;
    }

    public void setXIsSet(boolean value) {
      if (!value) {
        this.x = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ME:
        if (value == null) {
          unsetMe();
        } else {
          setMe((MemoryStructureException)value);
        }
        break;

      case X:
        if (value == null) {
          unsetX();
        } else {
          setX((ObjectNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ME:
        return getMe();

      case X:
        return getX();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ME:
        return isSetMe();
      case X:
        return isSetX();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof markPageWithPrecisionException_result)
        return this.equals((markPageWithPrecisionException_result)that);
      return false;
    }

    public boolean equals(markPageWithPrecisionException_result that) {
      if (that == null)
        return false;

      boolean this_present_me = true && this.isSetMe();
      boolean that_present_me = true && that.isSetMe();
      if (this_present_me || that_present_me) {
        if (!(this_present_me && that_present_me))
          return false;
        if (!this.me.equals(that.me))
          return false;
      }

      boolean this_present_x = true && this.isSetX();
      boolean that_present_x = true && that.isSetX();
      if (this_present_x || that_present_x) {
        if (!(this_present_x && that_present_x))
          return false;
        if (!this.x.equals(that.x))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(markPageWithPrecisionException_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      markPageWithPrecisionException_result typedOther = (markPageWithPrecisionException_result)other;

      lastComparison = Boolean.valueOf(isSetMe()).compareTo(typedOther.isSetMe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.me, typedOther.me);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetX()).compareTo(typedOther.isSetX());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetX()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.x, typedOther.x);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("markPageWithPrecisionException_result(");
      boolean first = true;

      sb.append("me:");
      if (this.me == null) {
        sb.append("null");
      } else {
        sb.append(this.me);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("x:");
      if (this.x == null) {
        sb.append("null");
      } else {
        sb.append(this.x);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class markPageWithPrecisionException_resultStandardSchemeFactory implements SchemeFactory {
      public markPageWithPrecisionException_resultStandardScheme getScheme() {
        return new markPageWithPrecisionException_resultStandardScheme();
      }
    }

    private static class markPageWithPrecisionException_resultStandardScheme extends StandardScheme<markPageWithPrecisionException_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, markPageWithPrecisionException_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.me = new MemoryStructureException();
                struct.me.read(iprot);
                struct.setMeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // X
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.x = new ObjectNotFoundException();
                struct.x.read(iprot);
                struct.setXIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, markPageWithPrecisionException_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.me != null) {
          oprot.writeFieldBegin(ME_FIELD_DESC);
          struct.me.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.x != null) {
          oprot.writeFieldBegin(X_FIELD_DESC);
          struct.x.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class markPageWithPrecisionException_resultTupleSchemeFactory implements SchemeFactory {
      public markPageWithPrecisionException_resultTupleScheme getScheme() {
        return new markPageWithPrecisionException_resultTupleScheme();
      }
    }

    private static class markPageWithPrecisionException_resultTupleScheme extends TupleScheme<markPageWithPrecisionException_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, markPageWithPrecisionException_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMe()) {
          optionals.set(0);
        }
        if (struct.isSetX()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMe()) {
          struct.me.write(oprot);
        }
        if (struct.isSetX()) {
          struct.x.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, markPageWithPrecisionException_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.me = new MemoryStructureException();
          struct.me.read(iprot);
          struct.setMeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.x = new ObjectNotFoundException();
          struct.x.read(iprot);
          struct.setXIsSet(true);
        }
      }
    }

  }

  public static class saveWebEntityCreationRule_args implements org.apache.thrift.TBase<saveWebEntityCreationRule_args, saveWebEntityCreationRule_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveWebEntityCreationRule_args");

    private static final org.apache.thrift.protocol.TField WEB_ENTITY_CREATION_RULE_FIELD_DESC = new org.apache.thrift.protocol.TField("webEntityCreationRule", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveWebEntityCreationRule_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveWebEntityCreationRule_argsTupleSchemeFactory());
    }

    public WebEntityCreationRule webEntityCreationRule; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WEB_ENTITY_CREATION_RULE((short)1, "webEntityCreationRule");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WEB_ENTITY_CREATION_RULE
            return WEB_ENTITY_CREATION_RULE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WEB_ENTITY_CREATION_RULE, new org.apache.thrift.meta_data.FieldMetaData("webEntityCreationRule", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WebEntityCreationRule.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveWebEntityCreationRule_args.class, metaDataMap);
    }

    public saveWebEntityCreationRule_args() {
    }

    public saveWebEntityCreationRule_args(
      WebEntityCreationRule webEntityCreationRule)
    {
      this();
      this.webEntityCreationRule = webEntityCreationRule;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveWebEntityCreationRule_args(saveWebEntityCreationRule_args other) {
      if (other.isSetWebEntityCreationRule()) {
        this.webEntityCreationRule = new WebEntityCreationRule(other.webEntityCreationRule);
      }
    }

    public saveWebEntityCreationRule_args deepCopy() {
      return new saveWebEntityCreationRule_args(this);
    }

    @Override
    public void clear() {
      this.webEntityCreationRule = null;
    }

    public WebEntityCreationRule getWebEntityCreationRule() {
      return this.webEntityCreationRule;
    }

    public saveWebEntityCreationRule_args setWebEntityCreationRule(WebEntityCreationRule webEntityCreationRule) {
      this.webEntityCreationRule = webEntityCreationRule;
      return this;
    }

    public void unsetWebEntityCreationRule() {
      this.webEntityCreationRule = null;
    }

    /** Returns true if field webEntityCreationRule is set (has been assigned a value) and false otherwise */
    public boolean isSetWebEntityCreationRule() {
      return this.webEntityCreationRule != null;
    }

    public void setWebEntityCreationRuleIsSet(boolean value) {
      if (!value) {
        this.webEntityCreationRule = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WEB_ENTITY_CREATION_RULE:
        if (value == null) {
          unsetWebEntityCreationRule();
        } else {
          setWebEntityCreationRule((WebEntityCreationRule)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WEB_ENTITY_CREATION_RULE:
        return getWebEntityCreationRule();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WEB_ENTITY_CREATION_RULE:
        return isSetWebEntityCreationRule();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveWebEntityCreationRule_args)
        return this.equals((saveWebEntityCreationRule_args)that);
      return false;
    }

    public boolean equals(saveWebEntityCreationRule_args that) {
      if (that == null)
        return false;

      boolean this_present_webEntityCreationRule = true && this.isSetWebEntityCreationRule();
      boolean that_present_webEntityCreationRule = true && that.isSetWebEntityCreationRule();
      if (this_present_webEntityCreationRule || that_present_webEntityCreationRule) {
        if (!(this_present_webEntityCreationRule && that_present_webEntityCreationRule))
          return false;
        if (!this.webEntityCreationRule.equals(that.webEntityCreationRule))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveWebEntityCreationRule_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveWebEntityCreationRule_args typedOther = (saveWebEntityCreationRule_args)other;

      lastComparison = Boolean.valueOf(isSetWebEntityCreationRule()).compareTo(typedOther.isSetWebEntityCreationRule());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWebEntityCreationRule()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.webEntityCreationRule, typedOther.webEntityCreationRule);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveWebEntityCreationRule_args(");
      boolean first = true;

      sb.append("webEntityCreationRule:");
      if (this.webEntityCreationRule == null) {
        sb.append("null");
      } else {
        sb.append(this.webEntityCreationRule);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveWebEntityCreationRule_argsStandardSchemeFactory implements SchemeFactory {
      public saveWebEntityCreationRule_argsStandardScheme getScheme() {
        return new saveWebEntityCreationRule_argsStandardScheme();
      }
    }

    private static class saveWebEntityCreationRule_argsStandardScheme extends StandardScheme<saveWebEntityCreationRule_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveWebEntityCreationRule_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WEB_ENTITY_CREATION_RULE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.webEntityCreationRule = new WebEntityCreationRule();
                struct.webEntityCreationRule.read(iprot);
                struct.setWebEntityCreationRuleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveWebEntityCreationRule_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.webEntityCreationRule != null) {
          oprot.writeFieldBegin(WEB_ENTITY_CREATION_RULE_FIELD_DESC);
          struct.webEntityCreationRule.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveWebEntityCreationRule_argsTupleSchemeFactory implements SchemeFactory {
      public saveWebEntityCreationRule_argsTupleScheme getScheme() {
        return new saveWebEntityCreationRule_argsTupleScheme();
      }
    }

    private static class saveWebEntityCreationRule_argsTupleScheme extends TupleScheme<saveWebEntityCreationRule_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveWebEntityCreationRule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWebEntityCreationRule()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetWebEntityCreationRule()) {
          struct.webEntityCreationRule.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveWebEntityCreationRule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.webEntityCreationRule = new WebEntityCreationRule();
          struct.webEntityCreationRule.read(iprot);
          struct.setWebEntityCreationRuleIsSet(true);
        }
      }
    }

  }

  public static class saveWebEntityCreationRule_result implements org.apache.thrift.TBase<saveWebEntityCreationRule_result, saveWebEntityCreationRule_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveWebEntityCreationRule_result");

    private static final org.apache.thrift.protocol.TField ME_FIELD_DESC = new org.apache.thrift.protocol.TField("me", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveWebEntityCreationRule_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveWebEntityCreationRule_resultTupleSchemeFactory());
    }

    public MemoryStructureException me; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ME((short)1, "me");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ME
            return ME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ME, new org.apache.thrift.meta_data.FieldMetaData("me", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveWebEntityCreationRule_result.class, metaDataMap);
    }

    public saveWebEntityCreationRule_result() {
    }

    public saveWebEntityCreationRule_result(
      MemoryStructureException me)
    {
      this();
      this.me = me;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveWebEntityCreationRule_result(saveWebEntityCreationRule_result other) {
      if (other.isSetMe()) {
        this.me = new MemoryStructureException(other.me);
      }
    }

    public saveWebEntityCreationRule_result deepCopy() {
      return new saveWebEntityCreationRule_result(this);
    }

    @Override
    public void clear() {
      this.me = null;
    }

    public MemoryStructureException getMe() {
      return this.me;
    }

    public saveWebEntityCreationRule_result setMe(MemoryStructureException me) {
      this.me = me;
      return this;
    }

    public void unsetMe() {
      this.me = null;
    }

    /** Returns true if field me is set (has been assigned a value) and false otherwise */
    public boolean isSetMe() {
      return this.me != null;
    }

    public void setMeIsSet(boolean value) {
      if (!value) {
        this.me = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ME:
        if (value == null) {
          unsetMe();
        } else {
          setMe((MemoryStructureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ME:
        return getMe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ME:
        return isSetMe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveWebEntityCreationRule_result)
        return this.equals((saveWebEntityCreationRule_result)that);
      return false;
    }

    public boolean equals(saveWebEntityCreationRule_result that) {
      if (that == null)
        return false;

      boolean this_present_me = true && this.isSetMe();
      boolean that_present_me = true && that.isSetMe();
      if (this_present_me || that_present_me) {
        if (!(this_present_me && that_present_me))
          return false;
        if (!this.me.equals(that.me))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveWebEntityCreationRule_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveWebEntityCreationRule_result typedOther = (saveWebEntityCreationRule_result)other;

      lastComparison = Boolean.valueOf(isSetMe()).compareTo(typedOther.isSetMe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.me, typedOther.me);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveWebEntityCreationRule_result(");
      boolean first = true;

      sb.append("me:");
      if (this.me == null) {
        sb.append("null");
      } else {
        sb.append(this.me);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveWebEntityCreationRule_resultStandardSchemeFactory implements SchemeFactory {
      public saveWebEntityCreationRule_resultStandardScheme getScheme() {
        return new saveWebEntityCreationRule_resultStandardScheme();
      }
    }

    private static class saveWebEntityCreationRule_resultStandardScheme extends StandardScheme<saveWebEntityCreationRule_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveWebEntityCreationRule_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.me = new MemoryStructureException();
                struct.me.read(iprot);
                struct.setMeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveWebEntityCreationRule_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.me != null) {
          oprot.writeFieldBegin(ME_FIELD_DESC);
          struct.me.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveWebEntityCreationRule_resultTupleSchemeFactory implements SchemeFactory {
      public saveWebEntityCreationRule_resultTupleScheme getScheme() {
        return new saveWebEntityCreationRule_resultTupleScheme();
      }
    }

    private static class saveWebEntityCreationRule_resultTupleScheme extends TupleScheme<saveWebEntityCreationRule_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveWebEntityCreationRule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMe()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMe()) {
          struct.me.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveWebEntityCreationRule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.me = new MemoryStructureException();
          struct.me.read(iprot);
          struct.setMeIsSet(true);
        }
      }
    }

  }

  public static class getWebEntityCreationRules_args implements org.apache.thrift.TBase<getWebEntityCreationRules_args, getWebEntityCreationRules_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWebEntityCreationRules_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWebEntityCreationRules_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWebEntityCreationRules_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWebEntityCreationRules_args.class, metaDataMap);
    }

    public getWebEntityCreationRules_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWebEntityCreationRules_args(getWebEntityCreationRules_args other) {
    }

    public getWebEntityCreationRules_args deepCopy() {
      return new getWebEntityCreationRules_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWebEntityCreationRules_args)
        return this.equals((getWebEntityCreationRules_args)that);
      return false;
    }

    public boolean equals(getWebEntityCreationRules_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getWebEntityCreationRules_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getWebEntityCreationRules_args typedOther = (getWebEntityCreationRules_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWebEntityCreationRules_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWebEntityCreationRules_argsStandardSchemeFactory implements SchemeFactory {
      public getWebEntityCreationRules_argsStandardScheme getScheme() {
        return new getWebEntityCreationRules_argsStandardScheme();
      }
    }

    private static class getWebEntityCreationRules_argsStandardScheme extends StandardScheme<getWebEntityCreationRules_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWebEntityCreationRules_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWebEntityCreationRules_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWebEntityCreationRules_argsTupleSchemeFactory implements SchemeFactory {
      public getWebEntityCreationRules_argsTupleScheme getScheme() {
        return new getWebEntityCreationRules_argsTupleScheme();
      }
    }

    private static class getWebEntityCreationRules_argsTupleScheme extends TupleScheme<getWebEntityCreationRules_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWebEntityCreationRules_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWebEntityCreationRules_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getWebEntityCreationRules_result implements org.apache.thrift.TBase<getWebEntityCreationRules_result, getWebEntityCreationRules_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWebEntityCreationRules_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.SET, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWebEntityCreationRules_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWebEntityCreationRules_resultTupleSchemeFactory());
    }

    public Set<WebEntityCreationRule> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WebEntityCreationRule.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWebEntityCreationRules_result.class, metaDataMap);
    }

    public getWebEntityCreationRules_result() {
    }

    public getWebEntityCreationRules_result(
      Set<WebEntityCreationRule> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWebEntityCreationRules_result(getWebEntityCreationRules_result other) {
      if (other.isSetSuccess()) {
        Set<WebEntityCreationRule> __this__success = new HashSet<WebEntityCreationRule>();
        for (WebEntityCreationRule other_element : other.success) {
          __this__success.add(new WebEntityCreationRule(other_element));
        }
        this.success = __this__success;
      }
    }

    public getWebEntityCreationRules_result deepCopy() {
      return new getWebEntityCreationRules_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<WebEntityCreationRule> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(WebEntityCreationRule elem) {
      if (this.success == null) {
        this.success = new HashSet<WebEntityCreationRule>();
      }
      this.success.add(elem);
    }

    public Set<WebEntityCreationRule> getSuccess() {
      return this.success;
    }

    public getWebEntityCreationRules_result setSuccess(Set<WebEntityCreationRule> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Set<WebEntityCreationRule>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWebEntityCreationRules_result)
        return this.equals((getWebEntityCreationRules_result)that);
      return false;
    }

    public boolean equals(getWebEntityCreationRules_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getWebEntityCreationRules_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getWebEntityCreationRules_result typedOther = (getWebEntityCreationRules_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWebEntityCreationRules_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWebEntityCreationRules_resultStandardSchemeFactory implements SchemeFactory {
      public getWebEntityCreationRules_resultStandardScheme getScheme() {
        return new getWebEntityCreationRules_resultStandardScheme();
      }
    }

    private static class getWebEntityCreationRules_resultStandardScheme extends StandardScheme<getWebEntityCreationRules_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWebEntityCreationRules_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set74 = iprot.readSetBegin();
                  struct.success = new HashSet<WebEntityCreationRule>(2*_set74.size);
                  for (int _i75 = 0; _i75 < _set74.size; ++_i75)
                  {
                    WebEntityCreationRule _elem76; // required
                    _elem76 = new WebEntityCreationRule();
                    _elem76.read(iprot);
                    struct.success.add(_elem76);
                  }
                  iprot.readSetEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWebEntityCreationRules_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (WebEntityCreationRule _iter77 : struct.success)
            {
              _iter77.write(oprot);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWebEntityCreationRules_resultTupleSchemeFactory implements SchemeFactory {
      public getWebEntityCreationRules_resultTupleScheme getScheme() {
        return new getWebEntityCreationRules_resultTupleScheme();
      }
    }

    private static class getWebEntityCreationRules_resultTupleScheme extends TupleScheme<getWebEntityCreationRules_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWebEntityCreationRules_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (WebEntityCreationRule _iter78 : struct.success)
            {
              _iter78.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWebEntityCreationRules_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TSet _set79 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new HashSet<WebEntityCreationRule>(2*_set79.size);
            for (int _i80 = 0; _i80 < _set79.size; ++_i80)
            {
              WebEntityCreationRule _elem81; // required
              _elem81 = new WebEntityCreationRule();
              _elem81.read(iprot);
              struct.success.add(_elem81);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteWebEntityCreationRule_args implements org.apache.thrift.TBase<deleteWebEntityCreationRule_args, deleteWebEntityCreationRule_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteWebEntityCreationRule_args");

    private static final org.apache.thrift.protocol.TField WEB_ENTITY_CREATION_RULE_FIELD_DESC = new org.apache.thrift.protocol.TField("webEntityCreationRule", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteWebEntityCreationRule_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteWebEntityCreationRule_argsTupleSchemeFactory());
    }

    public WebEntityCreationRule webEntityCreationRule; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WEB_ENTITY_CREATION_RULE((short)1, "webEntityCreationRule");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WEB_ENTITY_CREATION_RULE
            return WEB_ENTITY_CREATION_RULE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WEB_ENTITY_CREATION_RULE, new org.apache.thrift.meta_data.FieldMetaData("webEntityCreationRule", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WebEntityCreationRule.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteWebEntityCreationRule_args.class, metaDataMap);
    }

    public deleteWebEntityCreationRule_args() {
    }

    public deleteWebEntityCreationRule_args(
      WebEntityCreationRule webEntityCreationRule)
    {
      this();
      this.webEntityCreationRule = webEntityCreationRule;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteWebEntityCreationRule_args(deleteWebEntityCreationRule_args other) {
      if (other.isSetWebEntityCreationRule()) {
        this.webEntityCreationRule = new WebEntityCreationRule(other.webEntityCreationRule);
      }
    }

    public deleteWebEntityCreationRule_args deepCopy() {
      return new deleteWebEntityCreationRule_args(this);
    }

    @Override
    public void clear() {
      this.webEntityCreationRule = null;
    }

    public WebEntityCreationRule getWebEntityCreationRule() {
      return this.webEntityCreationRule;
    }

    public deleteWebEntityCreationRule_args setWebEntityCreationRule(WebEntityCreationRule webEntityCreationRule) {
      this.webEntityCreationRule = webEntityCreationRule;
      return this;
    }

    public void unsetWebEntityCreationRule() {
      this.webEntityCreationRule = null;
    }

    /** Returns true if field webEntityCreationRule is set (has been assigned a value) and false otherwise */
    public boolean isSetWebEntityCreationRule() {
      return this.webEntityCreationRule != null;
    }

    public void setWebEntityCreationRuleIsSet(boolean value) {
      if (!value) {
        this.webEntityCreationRule = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WEB_ENTITY_CREATION_RULE:
        if (value == null) {
          unsetWebEntityCreationRule();
        } else {
          setWebEntityCreationRule((WebEntityCreationRule)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WEB_ENTITY_CREATION_RULE:
        return getWebEntityCreationRule();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WEB_ENTITY_CREATION_RULE:
        return isSetWebEntityCreationRule();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteWebEntityCreationRule_args)
        return this.equals((deleteWebEntityCreationRule_args)that);
      return false;
    }

    public boolean equals(deleteWebEntityCreationRule_args that) {
      if (that == null)
        return false;

      boolean this_present_webEntityCreationRule = true && this.isSetWebEntityCreationRule();
      boolean that_present_webEntityCreationRule = true && that.isSetWebEntityCreationRule();
      if (this_present_webEntityCreationRule || that_present_webEntityCreationRule) {
        if (!(this_present_webEntityCreationRule && that_present_webEntityCreationRule))
          return false;
        if (!this.webEntityCreationRule.equals(that.webEntityCreationRule))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteWebEntityCreationRule_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteWebEntityCreationRule_args typedOther = (deleteWebEntityCreationRule_args)other;

      lastComparison = Boolean.valueOf(isSetWebEntityCreationRule()).compareTo(typedOther.isSetWebEntityCreationRule());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWebEntityCreationRule()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.webEntityCreationRule, typedOther.webEntityCreationRule);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteWebEntityCreationRule_args(");
      boolean first = true;

      sb.append("webEntityCreationRule:");
      if (this.webEntityCreationRule == null) {
        sb.append("null");
      } else {
        sb.append(this.webEntityCreationRule);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteWebEntityCreationRule_argsStandardSchemeFactory implements SchemeFactory {
      public deleteWebEntityCreationRule_argsStandardScheme getScheme() {
        return new deleteWebEntityCreationRule_argsStandardScheme();
      }
    }

    private static class deleteWebEntityCreationRule_argsStandardScheme extends StandardScheme<deleteWebEntityCreationRule_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteWebEntityCreationRule_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WEB_ENTITY_CREATION_RULE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.webEntityCreationRule = new WebEntityCreationRule();
                struct.webEntityCreationRule.read(iprot);
                struct.setWebEntityCreationRuleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteWebEntityCreationRule_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.webEntityCreationRule != null) {
          oprot.writeFieldBegin(WEB_ENTITY_CREATION_RULE_FIELD_DESC);
          struct.webEntityCreationRule.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteWebEntityCreationRule_argsTupleSchemeFactory implements SchemeFactory {
      public deleteWebEntityCreationRule_argsTupleScheme getScheme() {
        return new deleteWebEntityCreationRule_argsTupleScheme();
      }
    }

    private static class deleteWebEntityCreationRule_argsTupleScheme extends TupleScheme<deleteWebEntityCreationRule_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteWebEntityCreationRule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWebEntityCreationRule()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetWebEntityCreationRule()) {
          struct.webEntityCreationRule.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteWebEntityCreationRule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.webEntityCreationRule = new WebEntityCreationRule();
          struct.webEntityCreationRule.read(iprot);
          struct.setWebEntityCreationRuleIsSet(true);
        }
      }
    }

  }

  public static class deleteWebEntityCreationRule_result implements org.apache.thrift.TBase<deleteWebEntityCreationRule_result, deleteWebEntityCreationRule_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteWebEntityCreationRule_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteWebEntityCreationRule_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteWebEntityCreationRule_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteWebEntityCreationRule_result.class, metaDataMap);
    }

    public deleteWebEntityCreationRule_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteWebEntityCreationRule_result(deleteWebEntityCreationRule_result other) {
    }

    public deleteWebEntityCreationRule_result deepCopy() {
      return new deleteWebEntityCreationRule_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteWebEntityCreationRule_result)
        return this.equals((deleteWebEntityCreationRule_result)that);
      return false;
    }

    public boolean equals(deleteWebEntityCreationRule_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteWebEntityCreationRule_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteWebEntityCreationRule_result typedOther = (deleteWebEntityCreationRule_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteWebEntityCreationRule_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteWebEntityCreationRule_resultStandardSchemeFactory implements SchemeFactory {
      public deleteWebEntityCreationRule_resultStandardScheme getScheme() {
        return new deleteWebEntityCreationRule_resultStandardScheme();
      }
    }

    private static class deleteWebEntityCreationRule_resultStandardScheme extends StandardScheme<deleteWebEntityCreationRule_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteWebEntityCreationRule_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteWebEntityCreationRule_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteWebEntityCreationRule_resultTupleSchemeFactory implements SchemeFactory {
      public deleteWebEntityCreationRule_resultTupleScheme getScheme() {
        return new deleteWebEntityCreationRule_resultTupleScheme();
      }
    }

    private static class deleteWebEntityCreationRule_resultTupleScheme extends TupleScheme<deleteWebEntityCreationRule_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteWebEntityCreationRule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteWebEntityCreationRule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class savePageItems_args implements org.apache.thrift.TBase<savePageItems_args, savePageItems_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("savePageItems_args");

    private static final org.apache.thrift.protocol.TField PAGE_ITEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("pageItems", org.apache.thrift.protocol.TType.SET, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new savePageItems_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new savePageItems_argsTupleSchemeFactory());
    }

    public Set<PageItem> pageItems; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE_ITEMS((short)1, "pageItems");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE_ITEMS
            return PAGE_ITEMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE_ITEMS, new org.apache.thrift.meta_data.FieldMetaData("pageItems", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PageItem.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(savePageItems_args.class, metaDataMap);
    }

    public savePageItems_args() {
    }

    public savePageItems_args(
      Set<PageItem> pageItems)
    {
      this();
      this.pageItems = pageItems;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public savePageItems_args(savePageItems_args other) {
      if (other.isSetPageItems()) {
        Set<PageItem> __this__pageItems = new HashSet<PageItem>();
        for (PageItem other_element : other.pageItems) {
          __this__pageItems.add(new PageItem(other_element));
        }
        this.pageItems = __this__pageItems;
      }
    }

    public savePageItems_args deepCopy() {
      return new savePageItems_args(this);
    }

    @Override
    public void clear() {
      this.pageItems = null;
    }

    public int getPageItemsSize() {
      return (this.pageItems == null) ? 0 : this.pageItems.size();
    }

    public java.util.Iterator<PageItem> getPageItemsIterator() {
      return (this.pageItems == null) ? null : this.pageItems.iterator();
    }

    public void addToPageItems(PageItem elem) {
      if (this.pageItems == null) {
        this.pageItems = new HashSet<PageItem>();
      }
      this.pageItems.add(elem);
    }

    public Set<PageItem> getPageItems() {
      return this.pageItems;
    }

    public savePageItems_args setPageItems(Set<PageItem> pageItems) {
      this.pageItems = pageItems;
      return this;
    }

    public void unsetPageItems() {
      this.pageItems = null;
    }

    /** Returns true if field pageItems is set (has been assigned a value) and false otherwise */
    public boolean isSetPageItems() {
      return this.pageItems != null;
    }

    public void setPageItemsIsSet(boolean value) {
      if (!value) {
        this.pageItems = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGE_ITEMS:
        if (value == null) {
          unsetPageItems();
        } else {
          setPageItems((Set<PageItem>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE_ITEMS:
        return getPageItems();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGE_ITEMS:
        return isSetPageItems();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof savePageItems_args)
        return this.equals((savePageItems_args)that);
      return false;
    }

    public boolean equals(savePageItems_args that) {
      if (that == null)
        return false;

      boolean this_present_pageItems = true && this.isSetPageItems();
      boolean that_present_pageItems = true && that.isSetPageItems();
      if (this_present_pageItems || that_present_pageItems) {
        if (!(this_present_pageItems && that_present_pageItems))
          return false;
        if (!this.pageItems.equals(that.pageItems))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(savePageItems_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      savePageItems_args typedOther = (savePageItems_args)other;

      lastComparison = Boolean.valueOf(isSetPageItems()).compareTo(typedOther.isSetPageItems());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageItems()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageItems, typedOther.pageItems);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("savePageItems_args(");
      boolean first = true;

      sb.append("pageItems:");
      if (this.pageItems == null) {
        sb.append("null");
      } else {
        sb.append(this.pageItems);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class savePageItems_argsStandardSchemeFactory implements SchemeFactory {
      public savePageItems_argsStandardScheme getScheme() {
        return new savePageItems_argsStandardScheme();
      }
    }

    private static class savePageItems_argsStandardScheme extends StandardScheme<savePageItems_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, savePageItems_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE_ITEMS
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set82 = iprot.readSetBegin();
                  struct.pageItems = new HashSet<PageItem>(2*_set82.size);
                  for (int _i83 = 0; _i83 < _set82.size; ++_i83)
                  {
                    PageItem _elem84; // required
                    _elem84 = new PageItem();
                    _elem84.read(iprot);
                    struct.pageItems.add(_elem84);
                  }
                  iprot.readSetEnd();
                }
                struct.setPageItemsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, savePageItems_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pageItems != null) {
          oprot.writeFieldBegin(PAGE_ITEMS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.pageItems.size()));
            for (PageItem _iter85 : struct.pageItems)
            {
              _iter85.write(oprot);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class savePageItems_argsTupleSchemeFactory implements SchemeFactory {
      public savePageItems_argsTupleScheme getScheme() {
        return new savePageItems_argsTupleScheme();
      }
    }

    private static class savePageItems_argsTupleScheme extends TupleScheme<savePageItems_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, savePageItems_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPageItems()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPageItems()) {
          {
            oprot.writeI32(struct.pageItems.size());
            for (PageItem _iter86 : struct.pageItems)
            {
              _iter86.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, savePageItems_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TSet _set87 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.pageItems = new HashSet<PageItem>(2*_set87.size);
            for (int _i88 = 0; _i88 < _set87.size; ++_i88)
            {
              PageItem _elem89; // required
              _elem89 = new PageItem();
              _elem89.read(iprot);
              struct.pageItems.add(_elem89);
            }
          }
          struct.setPageItemsIsSet(true);
        }
      }
    }

  }

  public static class savePageItems_result implements org.apache.thrift.TBase<savePageItems_result, savePageItems_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("savePageItems_result");

    private static final org.apache.thrift.protocol.TField ME_FIELD_DESC = new org.apache.thrift.protocol.TField("me", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new savePageItems_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new savePageItems_resultTupleSchemeFactory());
    }

    public MemoryStructureException me; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ME((short)1, "me");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ME
            return ME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ME, new org.apache.thrift.meta_data.FieldMetaData("me", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(savePageItems_result.class, metaDataMap);
    }

    public savePageItems_result() {
    }

    public savePageItems_result(
      MemoryStructureException me)
    {
      this();
      this.me = me;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public savePageItems_result(savePageItems_result other) {
      if (other.isSetMe()) {
        this.me = new MemoryStructureException(other.me);
      }
    }

    public savePageItems_result deepCopy() {
      return new savePageItems_result(this);
    }

    @Override
    public void clear() {
      this.me = null;
    }

    public MemoryStructureException getMe() {
      return this.me;
    }

    public savePageItems_result setMe(MemoryStructureException me) {
      this.me = me;
      return this;
    }

    public void unsetMe() {
      this.me = null;
    }

    /** Returns true if field me is set (has been assigned a value) and false otherwise */
    public boolean isSetMe() {
      return this.me != null;
    }

    public void setMeIsSet(boolean value) {
      if (!value) {
        this.me = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ME:
        if (value == null) {
          unsetMe();
        } else {
          setMe((MemoryStructureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ME:
        return getMe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ME:
        return isSetMe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof savePageItems_result)
        return this.equals((savePageItems_result)that);
      return false;
    }

    public boolean equals(savePageItems_result that) {
      if (that == null)
        return false;

      boolean this_present_me = true && this.isSetMe();
      boolean that_present_me = true && that.isSetMe();
      if (this_present_me || that_present_me) {
        if (!(this_present_me && that_present_me))
          return false;
        if (!this.me.equals(that.me))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(savePageItems_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      savePageItems_result typedOther = (savePageItems_result)other;

      lastComparison = Boolean.valueOf(isSetMe()).compareTo(typedOther.isSetMe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.me, typedOther.me);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("savePageItems_result(");
      boolean first = true;

      sb.append("me:");
      if (this.me == null) {
        sb.append("null");
      } else {
        sb.append(this.me);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class savePageItems_resultStandardSchemeFactory implements SchemeFactory {
      public savePageItems_resultStandardScheme getScheme() {
        return new savePageItems_resultStandardScheme();
      }
    }

    private static class savePageItems_resultStandardScheme extends StandardScheme<savePageItems_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, savePageItems_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.me = new MemoryStructureException();
                struct.me.read(iprot);
                struct.setMeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, savePageItems_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.me != null) {
          oprot.writeFieldBegin(ME_FIELD_DESC);
          struct.me.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class savePageItems_resultTupleSchemeFactory implements SchemeFactory {
      public savePageItems_resultTupleScheme getScheme() {
        return new savePageItems_resultTupleScheme();
      }
    }

    private static class savePageItems_resultTupleScheme extends TupleScheme<savePageItems_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, savePageItems_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMe()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMe()) {
          struct.me.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, savePageItems_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.me = new MemoryStructureException();
          struct.me.read(iprot);
          struct.setMeIsSet(true);
        }
      }
    }

  }

  public static class saveNodeLinks_args implements org.apache.thrift.TBase<saveNodeLinks_args, saveNodeLinks_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveNodeLinks_args");

    private static final org.apache.thrift.protocol.TField NODE_LINKS_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeLinks", org.apache.thrift.protocol.TType.SET, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveNodeLinks_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveNodeLinks_argsTupleSchemeFactory());
    }

    public Set<NodeLink> nodeLinks; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NODE_LINKS((short)1, "nodeLinks");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NODE_LINKS
            return NODE_LINKS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NODE_LINKS, new org.apache.thrift.meta_data.FieldMetaData("nodeLinks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NodeLink.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveNodeLinks_args.class, metaDataMap);
    }

    public saveNodeLinks_args() {
    }

    public saveNodeLinks_args(
      Set<NodeLink> nodeLinks)
    {
      this();
      this.nodeLinks = nodeLinks;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveNodeLinks_args(saveNodeLinks_args other) {
      if (other.isSetNodeLinks()) {
        Set<NodeLink> __this__nodeLinks = new HashSet<NodeLink>();
        for (NodeLink other_element : other.nodeLinks) {
          __this__nodeLinks.add(new NodeLink(other_element));
        }
        this.nodeLinks = __this__nodeLinks;
      }
    }

    public saveNodeLinks_args deepCopy() {
      return new saveNodeLinks_args(this);
    }

    @Override
    public void clear() {
      this.nodeLinks = null;
    }

    public int getNodeLinksSize() {
      return (this.nodeLinks == null) ? 0 : this.nodeLinks.size();
    }

    public java.util.Iterator<NodeLink> getNodeLinksIterator() {
      return (this.nodeLinks == null) ? null : this.nodeLinks.iterator();
    }

    public void addToNodeLinks(NodeLink elem) {
      if (this.nodeLinks == null) {
        this.nodeLinks = new HashSet<NodeLink>();
      }
      this.nodeLinks.add(elem);
    }

    public Set<NodeLink> getNodeLinks() {
      return this.nodeLinks;
    }

    public saveNodeLinks_args setNodeLinks(Set<NodeLink> nodeLinks) {
      this.nodeLinks = nodeLinks;
      return this;
    }

    public void unsetNodeLinks() {
      this.nodeLinks = null;
    }

    /** Returns true if field nodeLinks is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeLinks() {
      return this.nodeLinks != null;
    }

    public void setNodeLinksIsSet(boolean value) {
      if (!value) {
        this.nodeLinks = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NODE_LINKS:
        if (value == null) {
          unsetNodeLinks();
        } else {
          setNodeLinks((Set<NodeLink>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NODE_LINKS:
        return getNodeLinks();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NODE_LINKS:
        return isSetNodeLinks();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveNodeLinks_args)
        return this.equals((saveNodeLinks_args)that);
      return false;
    }

    public boolean equals(saveNodeLinks_args that) {
      if (that == null)
        return false;

      boolean this_present_nodeLinks = true && this.isSetNodeLinks();
      boolean that_present_nodeLinks = true && that.isSetNodeLinks();
      if (this_present_nodeLinks || that_present_nodeLinks) {
        if (!(this_present_nodeLinks && that_present_nodeLinks))
          return false;
        if (!this.nodeLinks.equals(that.nodeLinks))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveNodeLinks_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveNodeLinks_args typedOther = (saveNodeLinks_args)other;

      lastComparison = Boolean.valueOf(isSetNodeLinks()).compareTo(typedOther.isSetNodeLinks());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeLinks()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeLinks, typedOther.nodeLinks);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveNodeLinks_args(");
      boolean first = true;

      sb.append("nodeLinks:");
      if (this.nodeLinks == null) {
        sb.append("null");
      } else {
        sb.append(this.nodeLinks);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveNodeLinks_argsStandardSchemeFactory implements SchemeFactory {
      public saveNodeLinks_argsStandardScheme getScheme() {
        return new saveNodeLinks_argsStandardScheme();
      }
    }

    private static class saveNodeLinks_argsStandardScheme extends StandardScheme<saveNodeLinks_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveNodeLinks_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NODE_LINKS
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set90 = iprot.readSetBegin();
                  struct.nodeLinks = new HashSet<NodeLink>(2*_set90.size);
                  for (int _i91 = 0; _i91 < _set90.size; ++_i91)
                  {
                    NodeLink _elem92; // required
                    _elem92 = new NodeLink();
                    _elem92.read(iprot);
                    struct.nodeLinks.add(_elem92);
                  }
                  iprot.readSetEnd();
                }
                struct.setNodeLinksIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveNodeLinks_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.nodeLinks != null) {
          oprot.writeFieldBegin(NODE_LINKS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.nodeLinks.size()));
            for (NodeLink _iter93 : struct.nodeLinks)
            {
              _iter93.write(oprot);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveNodeLinks_argsTupleSchemeFactory implements SchemeFactory {
      public saveNodeLinks_argsTupleScheme getScheme() {
        return new saveNodeLinks_argsTupleScheme();
      }
    }

    private static class saveNodeLinks_argsTupleScheme extends TupleScheme<saveNodeLinks_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveNodeLinks_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNodeLinks()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNodeLinks()) {
          {
            oprot.writeI32(struct.nodeLinks.size());
            for (NodeLink _iter94 : struct.nodeLinks)
            {
              _iter94.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveNodeLinks_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TSet _set95 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.nodeLinks = new HashSet<NodeLink>(2*_set95.size);
            for (int _i96 = 0; _i96 < _set95.size; ++_i96)
            {
              NodeLink _elem97; // required
              _elem97 = new NodeLink();
              _elem97.read(iprot);
              struct.nodeLinks.add(_elem97);
            }
          }
          struct.setNodeLinksIsSet(true);
        }
      }
    }

  }

  public static class saveNodeLinks_result implements org.apache.thrift.TBase<saveNodeLinks_result, saveNodeLinks_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveNodeLinks_result");

    private static final org.apache.thrift.protocol.TField ME_FIELD_DESC = new org.apache.thrift.protocol.TField("me", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveNodeLinks_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveNodeLinks_resultTupleSchemeFactory());
    }

    public MemoryStructureException me; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ME((short)1, "me");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ME
            return ME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ME, new org.apache.thrift.meta_data.FieldMetaData("me", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveNodeLinks_result.class, metaDataMap);
    }

    public saveNodeLinks_result() {
    }

    public saveNodeLinks_result(
      MemoryStructureException me)
    {
      this();
      this.me = me;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveNodeLinks_result(saveNodeLinks_result other) {
      if (other.isSetMe()) {
        this.me = new MemoryStructureException(other.me);
      }
    }

    public saveNodeLinks_result deepCopy() {
      return new saveNodeLinks_result(this);
    }

    @Override
    public void clear() {
      this.me = null;
    }

    public MemoryStructureException getMe() {
      return this.me;
    }

    public saveNodeLinks_result setMe(MemoryStructureException me) {
      this.me = me;
      return this;
    }

    public void unsetMe() {
      this.me = null;
    }

    /** Returns true if field me is set (has been assigned a value) and false otherwise */
    public boolean isSetMe() {
      return this.me != null;
    }

    public void setMeIsSet(boolean value) {
      if (!value) {
        this.me = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ME:
        if (value == null) {
          unsetMe();
        } else {
          setMe((MemoryStructureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ME:
        return getMe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ME:
        return isSetMe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveNodeLinks_result)
        return this.equals((saveNodeLinks_result)that);
      return false;
    }

    public boolean equals(saveNodeLinks_result that) {
      if (that == null)
        return false;

      boolean this_present_me = true && this.isSetMe();
      boolean that_present_me = true && that.isSetMe();
      if (this_present_me || that_present_me) {
        if (!(this_present_me && that_present_me))
          return false;
        if (!this.me.equals(that.me))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveNodeLinks_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveNodeLinks_result typedOther = (saveNodeLinks_result)other;

      lastComparison = Boolean.valueOf(isSetMe()).compareTo(typedOther.isSetMe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.me, typedOther.me);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveNodeLinks_result(");
      boolean first = true;

      sb.append("me:");
      if (this.me == null) {
        sb.append("null");
      } else {
        sb.append(this.me);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveNodeLinks_resultStandardSchemeFactory implements SchemeFactory {
      public saveNodeLinks_resultStandardScheme getScheme() {
        return new saveNodeLinks_resultStandardScheme();
      }
    }

    private static class saveNodeLinks_resultStandardScheme extends StandardScheme<saveNodeLinks_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveNodeLinks_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.me = new MemoryStructureException();
                struct.me.read(iprot);
                struct.setMeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveNodeLinks_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.me != null) {
          oprot.writeFieldBegin(ME_FIELD_DESC);
          struct.me.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveNodeLinks_resultTupleSchemeFactory implements SchemeFactory {
      public saveNodeLinks_resultTupleScheme getScheme() {
        return new saveNodeLinks_resultTupleScheme();
      }
    }

    private static class saveNodeLinks_resultTupleScheme extends TupleScheme<saveNodeLinks_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveNodeLinks_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMe()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMe()) {
          struct.me.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveNodeLinks_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.me = new MemoryStructureException();
          struct.me.read(iprot);
          struct.setMeIsSet(true);
        }
      }
    }

  }

  public static class addAliastoWebEntity_args implements org.apache.thrift.TBase<addAliastoWebEntity_args, addAliastoWebEntity_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addAliastoWebEntity_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LRU_FIELD_DESC = new org.apache.thrift.protocol.TField("lru", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addAliastoWebEntity_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addAliastoWebEntity_argsTupleSchemeFactory());
    }

    public String id; // required
    public String lru; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      LRU((short)2, "lru");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // LRU
            return LRU;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LRU, new org.apache.thrift.meta_data.FieldMetaData("lru", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addAliastoWebEntity_args.class, metaDataMap);
    }

    public addAliastoWebEntity_args() {
    }

    public addAliastoWebEntity_args(
      String id,
      String lru)
    {
      this();
      this.id = id;
      this.lru = lru;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addAliastoWebEntity_args(addAliastoWebEntity_args other) {
      if (other.isSetId()) {
        this.id = other.id;
      }
      if (other.isSetLru()) {
        this.lru = other.lru;
      }
    }

    public addAliastoWebEntity_args deepCopy() {
      return new addAliastoWebEntity_args(this);
    }

    @Override
    public void clear() {
      this.id = null;
      this.lru = null;
    }

    public String getId() {
      return this.id;
    }

    public addAliastoWebEntity_args setId(String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public String getLru() {
      return this.lru;
    }

    public addAliastoWebEntity_args setLru(String lru) {
      this.lru = lru;
      return this;
    }

    public void unsetLru() {
      this.lru = null;
    }

    /** Returns true if field lru is set (has been assigned a value) and false otherwise */
    public boolean isSetLru() {
      return this.lru != null;
    }

    public void setLruIsSet(boolean value) {
      if (!value) {
        this.lru = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((String)value);
        }
        break;

      case LRU:
        if (value == null) {
          unsetLru();
        } else {
          setLru((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      case LRU:
        return getLru();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case LRU:
        return isSetLru();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addAliastoWebEntity_args)
        return this.equals((addAliastoWebEntity_args)that);
      return false;
    }

    public boolean equals(addAliastoWebEntity_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      boolean this_present_lru = true && this.isSetLru();
      boolean that_present_lru = true && that.isSetLru();
      if (this_present_lru || that_present_lru) {
        if (!(this_present_lru && that_present_lru))
          return false;
        if (!this.lru.equals(that.lru))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addAliastoWebEntity_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addAliastoWebEntity_args typedOther = (addAliastoWebEntity_args)other;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLru()).compareTo(typedOther.isSetLru());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLru()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lru, typedOther.lru);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addAliastoWebEntity_args(");
      boolean first = true;

      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("lru:");
      if (this.lru == null) {
        sb.append("null");
      } else {
        sb.append(this.lru);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addAliastoWebEntity_argsStandardSchemeFactory implements SchemeFactory {
      public addAliastoWebEntity_argsStandardScheme getScheme() {
        return new addAliastoWebEntity_argsStandardScheme();
      }
    }

    private static class addAliastoWebEntity_argsStandardScheme extends StandardScheme<addAliastoWebEntity_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addAliastoWebEntity_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LRU
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.lru = iprot.readString();
                struct.setLruIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addAliastoWebEntity_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        if (struct.lru != null) {
          oprot.writeFieldBegin(LRU_FIELD_DESC);
          oprot.writeString(struct.lru);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addAliastoWebEntity_argsTupleSchemeFactory implements SchemeFactory {
      public addAliastoWebEntity_argsTupleScheme getScheme() {
        return new addAliastoWebEntity_argsTupleScheme();
      }
    }

    private static class addAliastoWebEntity_argsTupleScheme extends TupleScheme<addAliastoWebEntity_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addAliastoWebEntity_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetLru()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetId()) {
          oprot.writeString(struct.id);
        }
        if (struct.isSetLru()) {
          oprot.writeString(struct.lru);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addAliastoWebEntity_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.id = iprot.readString();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.lru = iprot.readString();
          struct.setLruIsSet(true);
        }
      }
    }

  }

  public static class addAliastoWebEntity_result implements org.apache.thrift.TBase<addAliastoWebEntity_result, addAliastoWebEntity_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addAliastoWebEntity_result");

    private static final org.apache.thrift.protocol.TField ME_FIELD_DESC = new org.apache.thrift.protocol.TField("me", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField X_FIELD_DESC = new org.apache.thrift.protocol.TField("x", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addAliastoWebEntity_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addAliastoWebEntity_resultTupleSchemeFactory());
    }

    public MemoryStructureException me; // required
    public ObjectNotFoundException x; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ME((short)1, "me"),
      X((short)2, "x");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ME
            return ME;
          case 2: // X
            return X;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ME, new org.apache.thrift.meta_data.FieldMetaData("me", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.X, new org.apache.thrift.meta_data.FieldMetaData("x", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addAliastoWebEntity_result.class, metaDataMap);
    }

    public addAliastoWebEntity_result() {
    }

    public addAliastoWebEntity_result(
      MemoryStructureException me,
      ObjectNotFoundException x)
    {
      this();
      this.me = me;
      this.x = x;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addAliastoWebEntity_result(addAliastoWebEntity_result other) {
      if (other.isSetMe()) {
        this.me = new MemoryStructureException(other.me);
      }
      if (other.isSetX()) {
        this.x = new ObjectNotFoundException(other.x);
      }
    }

    public addAliastoWebEntity_result deepCopy() {
      return new addAliastoWebEntity_result(this);
    }

    @Override
    public void clear() {
      this.me = null;
      this.x = null;
    }

    public MemoryStructureException getMe() {
      return this.me;
    }

    public addAliastoWebEntity_result setMe(MemoryStructureException me) {
      this.me = me;
      return this;
    }

    public void unsetMe() {
      this.me = null;
    }

    /** Returns true if field me is set (has been assigned a value) and false otherwise */
    public boolean isSetMe() {
      return this.me != null;
    }

    public void setMeIsSet(boolean value) {
      if (!value) {
        this.me = null;
      }
    }

    public ObjectNotFoundException getX() {
      return this.x;
    }

    public addAliastoWebEntity_result setX(ObjectNotFoundException x) {
      this.x = x;
      return this;
    }

    public void unsetX() {
      this.x = null;
    }

    /** Returns true if field x is set (has been assigned a value) and false otherwise */
    public boolean isSetX() {
      return this.x != null;
    }

    public void setXIsSet(boolean value) {
      if (!value) {
        this.x = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ME:
        if (value == null) {
          unsetMe();
        } else {
          setMe((MemoryStructureException)value);
        }
        break;

      case X:
        if (value == null) {
          unsetX();
        } else {
          setX((ObjectNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ME:
        return getMe();

      case X:
        return getX();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ME:
        return isSetMe();
      case X:
        return isSetX();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addAliastoWebEntity_result)
        return this.equals((addAliastoWebEntity_result)that);
      return false;
    }

    public boolean equals(addAliastoWebEntity_result that) {
      if (that == null)
        return false;

      boolean this_present_me = true && this.isSetMe();
      boolean that_present_me = true && that.isSetMe();
      if (this_present_me || that_present_me) {
        if (!(this_present_me && that_present_me))
          return false;
        if (!this.me.equals(that.me))
          return false;
      }

      boolean this_present_x = true && this.isSetX();
      boolean that_present_x = true && that.isSetX();
      if (this_present_x || that_present_x) {
        if (!(this_present_x && that_present_x))
          return false;
        if (!this.x.equals(that.x))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addAliastoWebEntity_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addAliastoWebEntity_result typedOther = (addAliastoWebEntity_result)other;

      lastComparison = Boolean.valueOf(isSetMe()).compareTo(typedOther.isSetMe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.me, typedOther.me);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetX()).compareTo(typedOther.isSetX());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetX()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.x, typedOther.x);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addAliastoWebEntity_result(");
      boolean first = true;

      sb.append("me:");
      if (this.me == null) {
        sb.append("null");
      } else {
        sb.append(this.me);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("x:");
      if (this.x == null) {
        sb.append("null");
      } else {
        sb.append(this.x);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addAliastoWebEntity_resultStandardSchemeFactory implements SchemeFactory {
      public addAliastoWebEntity_resultStandardScheme getScheme() {
        return new addAliastoWebEntity_resultStandardScheme();
      }
    }

    private static class addAliastoWebEntity_resultStandardScheme extends StandardScheme<addAliastoWebEntity_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addAliastoWebEntity_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.me = new MemoryStructureException();
                struct.me.read(iprot);
                struct.setMeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // X
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.x = new ObjectNotFoundException();
                struct.x.read(iprot);
                struct.setXIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addAliastoWebEntity_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.me != null) {
          oprot.writeFieldBegin(ME_FIELD_DESC);
          struct.me.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.x != null) {
          oprot.writeFieldBegin(X_FIELD_DESC);
          struct.x.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addAliastoWebEntity_resultTupleSchemeFactory implements SchemeFactory {
      public addAliastoWebEntity_resultTupleScheme getScheme() {
        return new addAliastoWebEntity_resultTupleScheme();
      }
    }

    private static class addAliastoWebEntity_resultTupleScheme extends TupleScheme<addAliastoWebEntity_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addAliastoWebEntity_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMe()) {
          optionals.set(0);
        }
        if (struct.isSetX()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMe()) {
          struct.me.write(oprot);
        }
        if (struct.isSetX()) {
          struct.x.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addAliastoWebEntity_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.me = new MemoryStructureException();
          struct.me.read(iprot);
          struct.setMeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.x = new ObjectNotFoundException();
          struct.x.read(iprot);
          struct.setXIsSet(true);
        }
      }
    }

  }

  public static class getWebEntityNetwork_args implements org.apache.thrift.TBase<getWebEntityNetwork_args, getWebEntityNetwork_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWebEntityNetwork_args");

    private static final org.apache.thrift.protocol.TField FORMAT_FIELD_DESC = new org.apache.thrift.protocol.TField("format", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWebEntityNetwork_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWebEntityNetwork_argsTupleSchemeFactory());
    }

    public String format; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FORMAT((short)1, "format");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FORMAT
            return FORMAT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FORMAT, new org.apache.thrift.meta_data.FieldMetaData("format", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWebEntityNetwork_args.class, metaDataMap);
    }

    public getWebEntityNetwork_args() {
    }

    public getWebEntityNetwork_args(
      String format)
    {
      this();
      this.format = format;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWebEntityNetwork_args(getWebEntityNetwork_args other) {
      if (other.isSetFormat()) {
        this.format = other.format;
      }
    }

    public getWebEntityNetwork_args deepCopy() {
      return new getWebEntityNetwork_args(this);
    }

    @Override
    public void clear() {
      this.format = null;
    }

    public String getFormat() {
      return this.format;
    }

    public getWebEntityNetwork_args setFormat(String format) {
      this.format = format;
      return this;
    }

    public void unsetFormat() {
      this.format = null;
    }

    /** Returns true if field format is set (has been assigned a value) and false otherwise */
    public boolean isSetFormat() {
      return this.format != null;
    }

    public void setFormatIsSet(boolean value) {
      if (!value) {
        this.format = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FORMAT:
        if (value == null) {
          unsetFormat();
        } else {
          setFormat((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FORMAT:
        return getFormat();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FORMAT:
        return isSetFormat();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWebEntityNetwork_args)
        return this.equals((getWebEntityNetwork_args)that);
      return false;
    }

    public boolean equals(getWebEntityNetwork_args that) {
      if (that == null)
        return false;

      boolean this_present_format = true && this.isSetFormat();
      boolean that_present_format = true && that.isSetFormat();
      if (this_present_format || that_present_format) {
        if (!(this_present_format && that_present_format))
          return false;
        if (!this.format.equals(that.format))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getWebEntityNetwork_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getWebEntityNetwork_args typedOther = (getWebEntityNetwork_args)other;

      lastComparison = Boolean.valueOf(isSetFormat()).compareTo(typedOther.isSetFormat());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFormat()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.format, typedOther.format);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWebEntityNetwork_args(");
      boolean first = true;

      sb.append("format:");
      if (this.format == null) {
        sb.append("null");
      } else {
        sb.append(this.format);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWebEntityNetwork_argsStandardSchemeFactory implements SchemeFactory {
      public getWebEntityNetwork_argsStandardScheme getScheme() {
        return new getWebEntityNetwork_argsStandardScheme();
      }
    }

    private static class getWebEntityNetwork_argsStandardScheme extends StandardScheme<getWebEntityNetwork_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWebEntityNetwork_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FORMAT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.format = iprot.readString();
                struct.setFormatIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWebEntityNetwork_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.format != null) {
          oprot.writeFieldBegin(FORMAT_FIELD_DESC);
          oprot.writeString(struct.format);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWebEntityNetwork_argsTupleSchemeFactory implements SchemeFactory {
      public getWebEntityNetwork_argsTupleScheme getScheme() {
        return new getWebEntityNetwork_argsTupleScheme();
      }
    }

    private static class getWebEntityNetwork_argsTupleScheme extends TupleScheme<getWebEntityNetwork_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWebEntityNetwork_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFormat()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFormat()) {
          oprot.writeString(struct.format);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWebEntityNetwork_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.format = iprot.readString();
          struct.setFormatIsSet(true);
        }
      }
    }

  }

  public static class getWebEntityNetwork_result implements org.apache.thrift.TBase<getWebEntityNetwork_result, getWebEntityNetwork_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWebEntityNetwork_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField ME_FIELD_DESC = new org.apache.thrift.protocol.TField("me", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWebEntityNetwork_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWebEntityNetwork_resultTupleSchemeFactory());
    }

    public String success; // required
    public MemoryStructureException me; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ME((short)1, "me");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ME
            return ME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ME, new org.apache.thrift.meta_data.FieldMetaData("me", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWebEntityNetwork_result.class, metaDataMap);
    }

    public getWebEntityNetwork_result() {
    }

    public getWebEntityNetwork_result(
      String success,
      MemoryStructureException me)
    {
      this();
      this.success = success;
      this.me = me;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWebEntityNetwork_result(getWebEntityNetwork_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetMe()) {
        this.me = new MemoryStructureException(other.me);
      }
    }

    public getWebEntityNetwork_result deepCopy() {
      return new getWebEntityNetwork_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.me = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getWebEntityNetwork_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public MemoryStructureException getMe() {
      return this.me;
    }

    public getWebEntityNetwork_result setMe(MemoryStructureException me) {
      this.me = me;
      return this;
    }

    public void unsetMe() {
      this.me = null;
    }

    /** Returns true if field me is set (has been assigned a value) and false otherwise */
    public boolean isSetMe() {
      return this.me != null;
    }

    public void setMeIsSet(boolean value) {
      if (!value) {
        this.me = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case ME:
        if (value == null) {
          unsetMe();
        } else {
          setMe((MemoryStructureException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ME:
        return getMe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ME:
        return isSetMe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWebEntityNetwork_result)
        return this.equals((getWebEntityNetwork_result)that);
      return false;
    }

    public boolean equals(getWebEntityNetwork_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_me = true && this.isSetMe();
      boolean that_present_me = true && that.isSetMe();
      if (this_present_me || that_present_me) {
        if (!(this_present_me && that_present_me))
          return false;
        if (!this.me.equals(that.me))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getWebEntityNetwork_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getWebEntityNetwork_result typedOther = (getWebEntityNetwork_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMe()).compareTo(typedOther.isSetMe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.me, typedOther.me);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWebEntityNetwork_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("me:");
      if (this.me == null) {
        sb.append("null");
      } else {
        sb.append(this.me);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWebEntityNetwork_resultStandardSchemeFactory implements SchemeFactory {
      public getWebEntityNetwork_resultStandardScheme getScheme() {
        return new getWebEntityNetwork_resultStandardScheme();
      }
    }

    private static class getWebEntityNetwork_resultStandardScheme extends StandardScheme<getWebEntityNetwork_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWebEntityNetwork_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.me = new MemoryStructureException();
                struct.me.read(iprot);
                struct.setMeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWebEntityNetwork_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.me != null) {
          oprot.writeFieldBegin(ME_FIELD_DESC);
          struct.me.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWebEntityNetwork_resultTupleSchemeFactory implements SchemeFactory {
      public getWebEntityNetwork_resultTupleScheme getScheme() {
        return new getWebEntityNetwork_resultTupleScheme();
      }
    }

    private static class getWebEntityNetwork_resultTupleScheme extends TupleScheme<getWebEntityNetwork_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWebEntityNetwork_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetMe()) {
          struct.me.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWebEntityNetwork_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.me = new MemoryStructureException();
          struct.me.read(iprot);
          struct.setMeIsSet(true);
        }
      }
    }

  }

  public static class getWebEntityEgoNetwork_args implements org.apache.thrift.TBase<getWebEntityEgoNetwork_args, getWebEntityEgoNetwork_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWebEntityEgoNetwork_args");

    private static final org.apache.thrift.protocol.TField WEB_ENTITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("webEntityId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DISTANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("distance", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField FORMAT_FIELD_DESC = new org.apache.thrift.protocol.TField("format", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWebEntityEgoNetwork_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWebEntityEgoNetwork_argsTupleSchemeFactory());
    }

    public String webEntityId; // required
    public int distance; // required
    public String format; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WEB_ENTITY_ID((short)1, "webEntityId"),
      DISTANCE((short)2, "distance"),
      FORMAT((short)3, "format");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WEB_ENTITY_ID
            return WEB_ENTITY_ID;
          case 2: // DISTANCE
            return DISTANCE;
          case 3: // FORMAT
            return FORMAT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DISTANCE_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WEB_ENTITY_ID, new org.apache.thrift.meta_data.FieldMetaData("webEntityId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DISTANCE, new org.apache.thrift.meta_data.FieldMetaData("distance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.FORMAT, new org.apache.thrift.meta_data.FieldMetaData("format", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWebEntityEgoNetwork_args.class, metaDataMap);
    }

    public getWebEntityEgoNetwork_args() {
    }

    public getWebEntityEgoNetwork_args(
      String webEntityId,
      int distance,
      String format)
    {
      this();
      this.webEntityId = webEntityId;
      this.distance = distance;
      setDistanceIsSet(true);
      this.format = format;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWebEntityEgoNetwork_args(getWebEntityEgoNetwork_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetWebEntityId()) {
        this.webEntityId = other.webEntityId;
      }
      this.distance = other.distance;
      if (other.isSetFormat()) {
        this.format = other.format;
      }
    }

    public getWebEntityEgoNetwork_args deepCopy() {
      return new getWebEntityEgoNetwork_args(this);
    }

    @Override
    public void clear() {
      this.webEntityId = null;
      setDistanceIsSet(false);
      this.distance = 0;
      this.format = null;
    }

    public String getWebEntityId() {
      return this.webEntityId;
    }

    public getWebEntityEgoNetwork_args setWebEntityId(String webEntityId) {
      this.webEntityId = webEntityId;
      return this;
    }

    public void unsetWebEntityId() {
      this.webEntityId = null;
    }

    /** Returns true if field webEntityId is set (has been assigned a value) and false otherwise */
    public boolean isSetWebEntityId() {
      return this.webEntityId != null;
    }

    public void setWebEntityIdIsSet(boolean value) {
      if (!value) {
        this.webEntityId = null;
      }
    }

    public int getDistance() {
      return this.distance;
    }

    public getWebEntityEgoNetwork_args setDistance(int distance) {
      this.distance = distance;
      setDistanceIsSet(true);
      return this;
    }

    public void unsetDistance() {
      __isset_bit_vector.clear(__DISTANCE_ISSET_ID);
    }

    /** Returns true if field distance is set (has been assigned a value) and false otherwise */
    public boolean isSetDistance() {
      return __isset_bit_vector.get(__DISTANCE_ISSET_ID);
    }

    public void setDistanceIsSet(boolean value) {
      __isset_bit_vector.set(__DISTANCE_ISSET_ID, value);
    }

    public String getFormat() {
      return this.format;
    }

    public getWebEntityEgoNetwork_args setFormat(String format) {
      this.format = format;
      return this;
    }

    public void unsetFormat() {
      this.format = null;
    }

    /** Returns true if field format is set (has been assigned a value) and false otherwise */
    public boolean isSetFormat() {
      return this.format != null;
    }

    public void setFormatIsSet(boolean value) {
      if (!value) {
        this.format = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WEB_ENTITY_ID:
        if (value == null) {
          unsetWebEntityId();
        } else {
          setWebEntityId((String)value);
        }
        break;

      case DISTANCE:
        if (value == null) {
          unsetDistance();
        } else {
          setDistance((Integer)value);
        }
        break;

      case FORMAT:
        if (value == null) {
          unsetFormat();
        } else {
          setFormat((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WEB_ENTITY_ID:
        return getWebEntityId();

      case DISTANCE:
        return Integer.valueOf(getDistance());

      case FORMAT:
        return getFormat();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WEB_ENTITY_ID:
        return isSetWebEntityId();
      case DISTANCE:
        return isSetDistance();
      case FORMAT:
        return isSetFormat();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWebEntityEgoNetwork_args)
        return this.equals((getWebEntityEgoNetwork_args)that);
      return false;
    }

    public boolean equals(getWebEntityEgoNetwork_args that) {
      if (that == null)
        return false;

      boolean this_present_webEntityId = true && this.isSetWebEntityId();
      boolean that_present_webEntityId = true && that.isSetWebEntityId();
      if (this_present_webEntityId || that_present_webEntityId) {
        if (!(this_present_webEntityId && that_present_webEntityId))
          return false;
        if (!this.webEntityId.equals(that.webEntityId))
          return false;
      }

      boolean this_present_distance = true;
      boolean that_present_distance = true;
      if (this_present_distance || that_present_distance) {
        if (!(this_present_distance && that_present_distance))
          return false;
        if (this.distance != that.distance)
          return false;
      }

      boolean this_present_format = true && this.isSetFormat();
      boolean that_present_format = true && that.isSetFormat();
      if (this_present_format || that_present_format) {
        if (!(this_present_format && that_present_format))
          return false;
        if (!this.format.equals(that.format))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getWebEntityEgoNetwork_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getWebEntityEgoNetwork_args typedOther = (getWebEntityEgoNetwork_args)other;

      lastComparison = Boolean.valueOf(isSetWebEntityId()).compareTo(typedOther.isSetWebEntityId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWebEntityId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.webEntityId, typedOther.webEntityId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDistance()).compareTo(typedOther.isSetDistance());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDistance()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.distance, typedOther.distance);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFormat()).compareTo(typedOther.isSetFormat());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFormat()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.format, typedOther.format);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWebEntityEgoNetwork_args(");
      boolean first = true;

      sb.append("webEntityId:");
      if (this.webEntityId == null) {
        sb.append("null");
      } else {
        sb.append(this.webEntityId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("distance:");
      sb.append(this.distance);
      first = false;
      if (!first) sb.append(", ");
      sb.append("format:");
      if (this.format == null) {
        sb.append("null");
      } else {
        sb.append(this.format);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWebEntityEgoNetwork_argsStandardSchemeFactory implements SchemeFactory {
      public getWebEntityEgoNetwork_argsStandardScheme getScheme() {
        return new getWebEntityEgoNetwork_argsStandardScheme();
      }
    }

    private static class getWebEntityEgoNetwork_argsStandardScheme extends StandardScheme<getWebEntityEgoNetwork_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWebEntityEgoNetwork_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WEB_ENTITY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.webEntityId = iprot.readString();
                struct.setWebEntityIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DISTANCE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.distance = iprot.readI32();
                struct.setDistanceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FORMAT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.format = iprot.readString();
                struct.setFormatIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWebEntityEgoNetwork_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.webEntityId != null) {
          oprot.writeFieldBegin(WEB_ENTITY_ID_FIELD_DESC);
          oprot.writeString(struct.webEntityId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(DISTANCE_FIELD_DESC);
        oprot.writeI32(struct.distance);
        oprot.writeFieldEnd();
        if (struct.format != null) {
          oprot.writeFieldBegin(FORMAT_FIELD_DESC);
          oprot.writeString(struct.format);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWebEntityEgoNetwork_argsTupleSchemeFactory implements SchemeFactory {
      public getWebEntityEgoNetwork_argsTupleScheme getScheme() {
        return new getWebEntityEgoNetwork_argsTupleScheme();
      }
    }

    private static class getWebEntityEgoNetwork_argsTupleScheme extends TupleScheme<getWebEntityEgoNetwork_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWebEntityEgoNetwork_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWebEntityId()) {
          optionals.set(0);
        }
        if (struct.isSetDistance()) {
          optionals.set(1);
        }
        if (struct.isSetFormat()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetWebEntityId()) {
          oprot.writeString(struct.webEntityId);
        }
        if (struct.isSetDistance()) {
          oprot.writeI32(struct.distance);
        }
        if (struct.isSetFormat()) {
          oprot.writeString(struct.format);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWebEntityEgoNetwork_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.webEntityId = iprot.readString();
          struct.setWebEntityIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.distance = iprot.readI32();
          struct.setDistanceIsSet(true);
        }
        if (incoming.get(2)) {
          struct.format = iprot.readString();
          struct.setFormatIsSet(true);
        }
      }
    }

  }

  public static class getWebEntityEgoNetwork_result implements org.apache.thrift.TBase<getWebEntityEgoNetwork_result, getWebEntityEgoNetwork_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWebEntityEgoNetwork_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField ME_FIELD_DESC = new org.apache.thrift.protocol.TField("me", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField X_FIELD_DESC = new org.apache.thrift.protocol.TField("x", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWebEntityEgoNetwork_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWebEntityEgoNetwork_resultTupleSchemeFactory());
    }

    public String success; // required
    public MemoryStructureException me; // required
    public ObjectNotFoundException x; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ME((short)1, "me"),
      X((short)2, "x");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ME
            return ME;
          case 2: // X
            return X;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ME, new org.apache.thrift.meta_data.FieldMetaData("me", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.X, new org.apache.thrift.meta_data.FieldMetaData("x", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWebEntityEgoNetwork_result.class, metaDataMap);
    }

    public getWebEntityEgoNetwork_result() {
    }

    public getWebEntityEgoNetwork_result(
      String success,
      MemoryStructureException me,
      ObjectNotFoundException x)
    {
      this();
      this.success = success;
      this.me = me;
      this.x = x;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWebEntityEgoNetwork_result(getWebEntityEgoNetwork_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetMe()) {
        this.me = new MemoryStructureException(other.me);
      }
      if (other.isSetX()) {
        this.x = new ObjectNotFoundException(other.x);
      }
    }

    public getWebEntityEgoNetwork_result deepCopy() {
      return new getWebEntityEgoNetwork_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.me = null;
      this.x = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getWebEntityEgoNetwork_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public MemoryStructureException getMe() {
      return this.me;
    }

    public getWebEntityEgoNetwork_result setMe(MemoryStructureException me) {
      this.me = me;
      return this;
    }

    public void unsetMe() {
      this.me = null;
    }

    /** Returns true if field me is set (has been assigned a value) and false otherwise */
    public boolean isSetMe() {
      return this.me != null;
    }

    public void setMeIsSet(boolean value) {
      if (!value) {
        this.me = null;
      }
    }

    public ObjectNotFoundException getX() {
      return this.x;
    }

    public getWebEntityEgoNetwork_result setX(ObjectNotFoundException x) {
      this.x = x;
      return this;
    }

    public void unsetX() {
      this.x = null;
    }

    /** Returns true if field x is set (has been assigned a value) and false otherwise */
    public boolean isSetX() {
      return this.x != null;
    }

    public void setXIsSet(boolean value) {
      if (!value) {
        this.x = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case ME:
        if (value == null) {
          unsetMe();
        } else {
          setMe((MemoryStructureException)value);
        }
        break;

      case X:
        if (value == null) {
          unsetX();
        } else {
          setX((ObjectNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ME:
        return getMe();

      case X:
        return getX();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ME:
        return isSetMe();
      case X:
        return isSetX();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWebEntityEgoNetwork_result)
        return this.equals((getWebEntityEgoNetwork_result)that);
      return false;
    }

    public boolean equals(getWebEntityEgoNetwork_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_me = true && this.isSetMe();
      boolean that_present_me = true && that.isSetMe();
      if (this_present_me || that_present_me) {
        if (!(this_present_me && that_present_me))
          return false;
        if (!this.me.equals(that.me))
          return false;
      }

      boolean this_present_x = true && this.isSetX();
      boolean that_present_x = true && that.isSetX();
      if (this_present_x || that_present_x) {
        if (!(this_present_x && that_present_x))
          return false;
        if (!this.x.equals(that.x))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getWebEntityEgoNetwork_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getWebEntityEgoNetwork_result typedOther = (getWebEntityEgoNetwork_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMe()).compareTo(typedOther.isSetMe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.me, typedOther.me);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetX()).compareTo(typedOther.isSetX());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetX()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.x, typedOther.x);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWebEntityEgoNetwork_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("me:");
      if (this.me == null) {
        sb.append("null");
      } else {
        sb.append(this.me);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("x:");
      if (this.x == null) {
        sb.append("null");
      } else {
        sb.append(this.x);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWebEntityEgoNetwork_resultStandardSchemeFactory implements SchemeFactory {
      public getWebEntityEgoNetwork_resultStandardScheme getScheme() {
        return new getWebEntityEgoNetwork_resultStandardScheme();
      }
    }

    private static class getWebEntityEgoNetwork_resultStandardScheme extends StandardScheme<getWebEntityEgoNetwork_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWebEntityEgoNetwork_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.me = new MemoryStructureException();
                struct.me.read(iprot);
                struct.setMeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // X
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.x = new ObjectNotFoundException();
                struct.x.read(iprot);
                struct.setXIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWebEntityEgoNetwork_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.me != null) {
          oprot.writeFieldBegin(ME_FIELD_DESC);
          struct.me.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.x != null) {
          oprot.writeFieldBegin(X_FIELD_DESC);
          struct.x.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWebEntityEgoNetwork_resultTupleSchemeFactory implements SchemeFactory {
      public getWebEntityEgoNetwork_resultTupleScheme getScheme() {
        return new getWebEntityEgoNetwork_resultTupleScheme();
      }
    }

    private static class getWebEntityEgoNetwork_resultTupleScheme extends TupleScheme<getWebEntityEgoNetwork_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWebEntityEgoNetwork_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMe()) {
          optionals.set(1);
        }
        if (struct.isSetX()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetMe()) {
          struct.me.write(oprot);
        }
        if (struct.isSetX()) {
          struct.x.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWebEntityEgoNetwork_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.me = new MemoryStructureException();
          struct.me.read(iprot);
          struct.setMeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.x = new ObjectNotFoundException();
          struct.x.read(iprot);
          struct.setXIsSet(true);
        }
      }
    }

  }

}
