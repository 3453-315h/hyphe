/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package fr.sciencespo.medialab.hci.memorystructure.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MemoryStructure {

  public interface Iface {

    /**
     * @param 1 lruItems : list of LRUItem objects
     * @return id of the created cache
     * 
     * @param lruItems
     */
    public String createCache(List<LRUItem> lruItems) throws org.apache.thrift.TException;

    /**
     * @param 1 cacheId : id of the cache
     * @return acknowledgement
     * 
     * @param cacheId
     */
    public String indexCache(String cacheId) throws org.apache.thrift.TException;

    /**
     * @param 1 cacheId : id of the cache
     * @return list of lru prefixes
     * 
     * @param cacheId
     */
    public List<String> getPrecisionExceptionsFromCache(String cacheId) throws org.apache.thrift.TException;

    /**
     * @param 1 cacheId : id of the cache
     * @return list of WebEntityInfo
     * 
     * @param cacheId
     */
    public List<WebEntityInfo> getWebEntitiesFromCache(String cacheId) throws org.apache.thrift.TException;

    /**
     * @param 1 cacheId : id of the cache
     * @return status
     * 
     * @param cacheId
     */
    public int deleteCache(String cacheId) throws org.apache.thrift.TException;

    /**
     * @param 1 precisionException: LRU of page excepted from PRECISION_LIMIT
     * @return status
     * 
     * @param precisionException
     */
    public int setPrecisionException(String precisionException) throws org.apache.thrift.TException;

    /**
     *  *
     *  * @param 1 lruItems : list of LRUItem objects
     *  * @return true if success, false else
     * *
     * 
     * @param lruItems
     */
    public boolean storeLRUItems(List<LRUItem> lruItems) throws org.apache.thrift.TException;

    /**
     *  *
     *  * @param 1 nodeLinks : list of NodeLink objects
     *  * @return true if success, false else
     * *
     * 
     * @param nodeLinks
     */
    public boolean storeNodeLinks(List<NodeLink> nodeLinks) throws org.apache.thrift.TException;

    /**
     *  *
     *  * @param 1 lruItem : the lruItem to be marked as WebEntity
     *  * @return true if success, false else
     * *
     * 
     * @param lruItem
     */
    public boolean storeWebEntity(LRUItem lruItem) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void createCache(List<LRUItem> lruItems, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.createCache_call> resultHandler) throws org.apache.thrift.TException;

    public void indexCache(String cacheId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.indexCache_call> resultHandler) throws org.apache.thrift.TException;

    public void getPrecisionExceptionsFromCache(String cacheId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getPrecisionExceptionsFromCache_call> resultHandler) throws org.apache.thrift.TException;

    public void getWebEntitiesFromCache(String cacheId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getWebEntitiesFromCache_call> resultHandler) throws org.apache.thrift.TException;

    public void deleteCache(String cacheId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deleteCache_call> resultHandler) throws org.apache.thrift.TException;

    public void setPrecisionException(String precisionException, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.setPrecisionException_call> resultHandler) throws org.apache.thrift.TException;

    public void storeLRUItems(List<LRUItem> lruItems, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.storeLRUItems_call> resultHandler) throws org.apache.thrift.TException;

    public void storeNodeLinks(List<NodeLink> nodeLinks, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.storeNodeLinks_call> resultHandler) throws org.apache.thrift.TException;

    public void storeWebEntity(LRUItem lruItem, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.storeWebEntity_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String createCache(List<LRUItem> lruItems) throws org.apache.thrift.TException
    {
      send_createCache(lruItems);
      return recv_createCache();
    }

    public void send_createCache(List<LRUItem> lruItems) throws org.apache.thrift.TException
    {
      createCache_args args = new createCache_args();
      args.setLruItems(lruItems);
      sendBase("createCache", args);
    }

    public String recv_createCache() throws org.apache.thrift.TException
    {
      createCache_result result = new createCache_result();
      receiveBase(result, "createCache");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createCache failed: unknown result");
    }

    public String indexCache(String cacheId) throws org.apache.thrift.TException
    {
      send_indexCache(cacheId);
      return recv_indexCache();
    }

    public void send_indexCache(String cacheId) throws org.apache.thrift.TException
    {
      indexCache_args args = new indexCache_args();
      args.setCacheId(cacheId);
      sendBase("indexCache", args);
    }

    public String recv_indexCache() throws org.apache.thrift.TException
    {
      indexCache_result result = new indexCache_result();
      receiveBase(result, "indexCache");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "indexCache failed: unknown result");
    }

    public List<String> getPrecisionExceptionsFromCache(String cacheId) throws org.apache.thrift.TException
    {
      send_getPrecisionExceptionsFromCache(cacheId);
      return recv_getPrecisionExceptionsFromCache();
    }

    public void send_getPrecisionExceptionsFromCache(String cacheId) throws org.apache.thrift.TException
    {
      getPrecisionExceptionsFromCache_args args = new getPrecisionExceptionsFromCache_args();
      args.setCacheId(cacheId);
      sendBase("getPrecisionExceptionsFromCache", args);
    }

    public List<String> recv_getPrecisionExceptionsFromCache() throws org.apache.thrift.TException
    {
      getPrecisionExceptionsFromCache_result result = new getPrecisionExceptionsFromCache_result();
      receiveBase(result, "getPrecisionExceptionsFromCache");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPrecisionExceptionsFromCache failed: unknown result");
    }

    public List<WebEntityInfo> getWebEntitiesFromCache(String cacheId) throws org.apache.thrift.TException
    {
      send_getWebEntitiesFromCache(cacheId);
      return recv_getWebEntitiesFromCache();
    }

    public void send_getWebEntitiesFromCache(String cacheId) throws org.apache.thrift.TException
    {
      getWebEntitiesFromCache_args args = new getWebEntitiesFromCache_args();
      args.setCacheId(cacheId);
      sendBase("getWebEntitiesFromCache", args);
    }

    public List<WebEntityInfo> recv_getWebEntitiesFromCache() throws org.apache.thrift.TException
    {
      getWebEntitiesFromCache_result result = new getWebEntitiesFromCache_result();
      receiveBase(result, "getWebEntitiesFromCache");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getWebEntitiesFromCache failed: unknown result");
    }

    public int deleteCache(String cacheId) throws org.apache.thrift.TException
    {
      send_deleteCache(cacheId);
      return recv_deleteCache();
    }

    public void send_deleteCache(String cacheId) throws org.apache.thrift.TException
    {
      deleteCache_args args = new deleteCache_args();
      args.setCacheId(cacheId);
      sendBase("deleteCache", args);
    }

    public int recv_deleteCache() throws org.apache.thrift.TException
    {
      deleteCache_result result = new deleteCache_result();
      receiveBase(result, "deleteCache");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteCache failed: unknown result");
    }

    public int setPrecisionException(String precisionException) throws org.apache.thrift.TException
    {
      send_setPrecisionException(precisionException);
      return recv_setPrecisionException();
    }

    public void send_setPrecisionException(String precisionException) throws org.apache.thrift.TException
    {
      setPrecisionException_args args = new setPrecisionException_args();
      args.setPrecisionException(precisionException);
      sendBase("setPrecisionException", args);
    }

    public int recv_setPrecisionException() throws org.apache.thrift.TException
    {
      setPrecisionException_result result = new setPrecisionException_result();
      receiveBase(result, "setPrecisionException");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setPrecisionException failed: unknown result");
    }

    public boolean storeLRUItems(List<LRUItem> lruItems) throws org.apache.thrift.TException
    {
      send_storeLRUItems(lruItems);
      return recv_storeLRUItems();
    }

    public void send_storeLRUItems(List<LRUItem> lruItems) throws org.apache.thrift.TException
    {
      storeLRUItems_args args = new storeLRUItems_args();
      args.setLruItems(lruItems);
      sendBase("storeLRUItems", args);
    }

    public boolean recv_storeLRUItems() throws org.apache.thrift.TException
    {
      storeLRUItems_result result = new storeLRUItems_result();
      receiveBase(result, "storeLRUItems");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "storeLRUItems failed: unknown result");
    }

    public boolean storeNodeLinks(List<NodeLink> nodeLinks) throws org.apache.thrift.TException
    {
      send_storeNodeLinks(nodeLinks);
      return recv_storeNodeLinks();
    }

    public void send_storeNodeLinks(List<NodeLink> nodeLinks) throws org.apache.thrift.TException
    {
      storeNodeLinks_args args = new storeNodeLinks_args();
      args.setNodeLinks(nodeLinks);
      sendBase("storeNodeLinks", args);
    }

    public boolean recv_storeNodeLinks() throws org.apache.thrift.TException
    {
      storeNodeLinks_result result = new storeNodeLinks_result();
      receiveBase(result, "storeNodeLinks");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "storeNodeLinks failed: unknown result");
    }

    public boolean storeWebEntity(LRUItem lruItem) throws org.apache.thrift.TException
    {
      send_storeWebEntity(lruItem);
      return recv_storeWebEntity();
    }

    public void send_storeWebEntity(LRUItem lruItem) throws org.apache.thrift.TException
    {
      storeWebEntity_args args = new storeWebEntity_args();
      args.setLruItem(lruItem);
      sendBase("storeWebEntity", args);
    }

    public boolean recv_storeWebEntity() throws org.apache.thrift.TException
    {
      storeWebEntity_result result = new storeWebEntity_result();
      receiveBase(result, "storeWebEntity");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "storeWebEntity failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void createCache(List<LRUItem> lruItems, org.apache.thrift.async.AsyncMethodCallback<createCache_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createCache_call method_call = new createCache_call(lruItems, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createCache_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<LRUItem> lruItems;
      public createCache_call(List<LRUItem> lruItems, org.apache.thrift.async.AsyncMethodCallback<createCache_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lruItems = lruItems;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createCache", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createCache_args args = new createCache_args();
        args.setLruItems(lruItems);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createCache();
      }
    }

    public void indexCache(String cacheId, org.apache.thrift.async.AsyncMethodCallback<indexCache_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      indexCache_call method_call = new indexCache_call(cacheId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class indexCache_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String cacheId;
      public indexCache_call(String cacheId, org.apache.thrift.async.AsyncMethodCallback<indexCache_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cacheId = cacheId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("indexCache", org.apache.thrift.protocol.TMessageType.CALL, 0));
        indexCache_args args = new indexCache_args();
        args.setCacheId(cacheId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_indexCache();
      }
    }

    public void getPrecisionExceptionsFromCache(String cacheId, org.apache.thrift.async.AsyncMethodCallback<getPrecisionExceptionsFromCache_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPrecisionExceptionsFromCache_call method_call = new getPrecisionExceptionsFromCache_call(cacheId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPrecisionExceptionsFromCache_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String cacheId;
      public getPrecisionExceptionsFromCache_call(String cacheId, org.apache.thrift.async.AsyncMethodCallback<getPrecisionExceptionsFromCache_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cacheId = cacheId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPrecisionExceptionsFromCache", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPrecisionExceptionsFromCache_args args = new getPrecisionExceptionsFromCache_args();
        args.setCacheId(cacheId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPrecisionExceptionsFromCache();
      }
    }

    public void getWebEntitiesFromCache(String cacheId, org.apache.thrift.async.AsyncMethodCallback<getWebEntitiesFromCache_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getWebEntitiesFromCache_call method_call = new getWebEntitiesFromCache_call(cacheId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getWebEntitiesFromCache_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String cacheId;
      public getWebEntitiesFromCache_call(String cacheId, org.apache.thrift.async.AsyncMethodCallback<getWebEntitiesFromCache_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cacheId = cacheId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getWebEntitiesFromCache", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getWebEntitiesFromCache_args args = new getWebEntitiesFromCache_args();
        args.setCacheId(cacheId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<WebEntityInfo> getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getWebEntitiesFromCache();
      }
    }

    public void deleteCache(String cacheId, org.apache.thrift.async.AsyncMethodCallback<deleteCache_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteCache_call method_call = new deleteCache_call(cacheId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteCache_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String cacheId;
      public deleteCache_call(String cacheId, org.apache.thrift.async.AsyncMethodCallback<deleteCache_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cacheId = cacheId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteCache", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteCache_args args = new deleteCache_args();
        args.setCacheId(cacheId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteCache();
      }
    }

    public void setPrecisionException(String precisionException, org.apache.thrift.async.AsyncMethodCallback<setPrecisionException_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setPrecisionException_call method_call = new setPrecisionException_call(precisionException, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setPrecisionException_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String precisionException;
      public setPrecisionException_call(String precisionException, org.apache.thrift.async.AsyncMethodCallback<setPrecisionException_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.precisionException = precisionException;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setPrecisionException", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setPrecisionException_args args = new setPrecisionException_args();
        args.setPrecisionException(precisionException);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setPrecisionException();
      }
    }

    public void storeLRUItems(List<LRUItem> lruItems, org.apache.thrift.async.AsyncMethodCallback<storeLRUItems_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      storeLRUItems_call method_call = new storeLRUItems_call(lruItems, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class storeLRUItems_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<LRUItem> lruItems;
      public storeLRUItems_call(List<LRUItem> lruItems, org.apache.thrift.async.AsyncMethodCallback<storeLRUItems_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lruItems = lruItems;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("storeLRUItems", org.apache.thrift.protocol.TMessageType.CALL, 0));
        storeLRUItems_args args = new storeLRUItems_args();
        args.setLruItems(lruItems);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_storeLRUItems();
      }
    }

    public void storeNodeLinks(List<NodeLink> nodeLinks, org.apache.thrift.async.AsyncMethodCallback<storeNodeLinks_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      storeNodeLinks_call method_call = new storeNodeLinks_call(nodeLinks, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class storeNodeLinks_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<NodeLink> nodeLinks;
      public storeNodeLinks_call(List<NodeLink> nodeLinks, org.apache.thrift.async.AsyncMethodCallback<storeNodeLinks_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nodeLinks = nodeLinks;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("storeNodeLinks", org.apache.thrift.protocol.TMessageType.CALL, 0));
        storeNodeLinks_args args = new storeNodeLinks_args();
        args.setNodeLinks(nodeLinks);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_storeNodeLinks();
      }
    }

    public void storeWebEntity(LRUItem lruItem, org.apache.thrift.async.AsyncMethodCallback<storeWebEntity_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      storeWebEntity_call method_call = new storeWebEntity_call(lruItem, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class storeWebEntity_call extends org.apache.thrift.async.TAsyncMethodCall {
      private LRUItem lruItem;
      public storeWebEntity_call(LRUItem lruItem, org.apache.thrift.async.AsyncMethodCallback<storeWebEntity_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lruItem = lruItem;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("storeWebEntity", org.apache.thrift.protocol.TMessageType.CALL, 0));
        storeWebEntity_args args = new storeWebEntity_args();
        args.setLruItem(lruItem);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_storeWebEntity();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("createCache", new createCache());
      processMap.put("indexCache", new indexCache());
      processMap.put("getPrecisionExceptionsFromCache", new getPrecisionExceptionsFromCache());
      processMap.put("getWebEntitiesFromCache", new getWebEntitiesFromCache());
      processMap.put("deleteCache", new deleteCache());
      processMap.put("setPrecisionException", new setPrecisionException());
      processMap.put("storeLRUItems", new storeLRUItems());
      processMap.put("storeNodeLinks", new storeNodeLinks());
      processMap.put("storeWebEntity", new storeWebEntity());
      return processMap;
    }

    private static class createCache<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createCache_args> {
      public createCache() {
        super("createCache");
      }

      protected createCache_args getEmptyArgsInstance() {
        return new createCache_args();
      }

      protected createCache_result getResult(I iface, createCache_args args) throws org.apache.thrift.TException {
        createCache_result result = new createCache_result();
        result.success = iface.createCache(args.lruItems);
        return result;
      }
    }

    private static class indexCache<I extends Iface> extends org.apache.thrift.ProcessFunction<I, indexCache_args> {
      public indexCache() {
        super("indexCache");
      }

      protected indexCache_args getEmptyArgsInstance() {
        return new indexCache_args();
      }

      protected indexCache_result getResult(I iface, indexCache_args args) throws org.apache.thrift.TException {
        indexCache_result result = new indexCache_result();
        result.success = iface.indexCache(args.cacheId);
        return result;
      }
    }

    private static class getPrecisionExceptionsFromCache<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPrecisionExceptionsFromCache_args> {
      public getPrecisionExceptionsFromCache() {
        super("getPrecisionExceptionsFromCache");
      }

      protected getPrecisionExceptionsFromCache_args getEmptyArgsInstance() {
        return new getPrecisionExceptionsFromCache_args();
      }

      protected getPrecisionExceptionsFromCache_result getResult(I iface, getPrecisionExceptionsFromCache_args args) throws org.apache.thrift.TException {
        getPrecisionExceptionsFromCache_result result = new getPrecisionExceptionsFromCache_result();
        result.success = iface.getPrecisionExceptionsFromCache(args.cacheId);
        return result;
      }
    }

    private static class getWebEntitiesFromCache<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getWebEntitiesFromCache_args> {
      public getWebEntitiesFromCache() {
        super("getWebEntitiesFromCache");
      }

      protected getWebEntitiesFromCache_args getEmptyArgsInstance() {
        return new getWebEntitiesFromCache_args();
      }

      protected getWebEntitiesFromCache_result getResult(I iface, getWebEntitiesFromCache_args args) throws org.apache.thrift.TException {
        getWebEntitiesFromCache_result result = new getWebEntitiesFromCache_result();
        result.success = iface.getWebEntitiesFromCache(args.cacheId);
        return result;
      }
    }

    private static class deleteCache<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteCache_args> {
      public deleteCache() {
        super("deleteCache");
      }

      protected deleteCache_args getEmptyArgsInstance() {
        return new deleteCache_args();
      }

      protected deleteCache_result getResult(I iface, deleteCache_args args) throws org.apache.thrift.TException {
        deleteCache_result result = new deleteCache_result();
        result.success = iface.deleteCache(args.cacheId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class setPrecisionException<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setPrecisionException_args> {
      public setPrecisionException() {
        super("setPrecisionException");
      }

      protected setPrecisionException_args getEmptyArgsInstance() {
        return new setPrecisionException_args();
      }

      protected setPrecisionException_result getResult(I iface, setPrecisionException_args args) throws org.apache.thrift.TException {
        setPrecisionException_result result = new setPrecisionException_result();
        result.success = iface.setPrecisionException(args.precisionException);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class storeLRUItems<I extends Iface> extends org.apache.thrift.ProcessFunction<I, storeLRUItems_args> {
      public storeLRUItems() {
        super("storeLRUItems");
      }

      protected storeLRUItems_args getEmptyArgsInstance() {
        return new storeLRUItems_args();
      }

      protected storeLRUItems_result getResult(I iface, storeLRUItems_args args) throws org.apache.thrift.TException {
        storeLRUItems_result result = new storeLRUItems_result();
        result.success = iface.storeLRUItems(args.lruItems);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class storeNodeLinks<I extends Iface> extends org.apache.thrift.ProcessFunction<I, storeNodeLinks_args> {
      public storeNodeLinks() {
        super("storeNodeLinks");
      }

      protected storeNodeLinks_args getEmptyArgsInstance() {
        return new storeNodeLinks_args();
      }

      protected storeNodeLinks_result getResult(I iface, storeNodeLinks_args args) throws org.apache.thrift.TException {
        storeNodeLinks_result result = new storeNodeLinks_result();
        result.success = iface.storeNodeLinks(args.nodeLinks);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class storeWebEntity<I extends Iface> extends org.apache.thrift.ProcessFunction<I, storeWebEntity_args> {
      public storeWebEntity() {
        super("storeWebEntity");
      }

      protected storeWebEntity_args getEmptyArgsInstance() {
        return new storeWebEntity_args();
      }

      protected storeWebEntity_result getResult(I iface, storeWebEntity_args args) throws org.apache.thrift.TException {
        storeWebEntity_result result = new storeWebEntity_result();
        result.success = iface.storeWebEntity(args.lruItem);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class createCache_args implements org.apache.thrift.TBase<createCache_args, createCache_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createCache_args");

    private static final org.apache.thrift.protocol.TField LRU_ITEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("lruItems", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createCache_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createCache_argsTupleSchemeFactory());
    }

    public List<LRUItem> lruItems; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LRU_ITEMS((short)1, "lruItems");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LRU_ITEMS
            return LRU_ITEMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LRU_ITEMS, new org.apache.thrift.meta_data.FieldMetaData("lruItems", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LRUItem.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createCache_args.class, metaDataMap);
    }

    public createCache_args() {
    }

    public createCache_args(
      List<LRUItem> lruItems)
    {
      this();
      this.lruItems = lruItems;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createCache_args(createCache_args other) {
      if (other.isSetLruItems()) {
        List<LRUItem> __this__lruItems = new ArrayList<LRUItem>();
        for (LRUItem other_element : other.lruItems) {
          __this__lruItems.add(new LRUItem(other_element));
        }
        this.lruItems = __this__lruItems;
      }
    }

    public createCache_args deepCopy() {
      return new createCache_args(this);
    }

    @Override
    public void clear() {
      this.lruItems = null;
    }

    public int getLruItemsSize() {
      return (this.lruItems == null) ? 0 : this.lruItems.size();
    }

    public java.util.Iterator<LRUItem> getLruItemsIterator() {
      return (this.lruItems == null) ? null : this.lruItems.iterator();
    }

    public void addToLruItems(LRUItem elem) {
      if (this.lruItems == null) {
        this.lruItems = new ArrayList<LRUItem>();
      }
      this.lruItems.add(elem);
    }

    public List<LRUItem> getLruItems() {
      return this.lruItems;
    }

    public createCache_args setLruItems(List<LRUItem> lruItems) {
      this.lruItems = lruItems;
      return this;
    }

    public void unsetLruItems() {
      this.lruItems = null;
    }

    /** Returns true if field lruItems is set (has been assigned a value) and false otherwise */
    public boolean isSetLruItems() {
      return this.lruItems != null;
    }

    public void setLruItemsIsSet(boolean value) {
      if (!value) {
        this.lruItems = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LRU_ITEMS:
        if (value == null) {
          unsetLruItems();
        } else {
          setLruItems((List<LRUItem>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LRU_ITEMS:
        return getLruItems();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LRU_ITEMS:
        return isSetLruItems();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createCache_args)
        return this.equals((createCache_args)that);
      return false;
    }

    public boolean equals(createCache_args that) {
      if (that == null)
        return false;

      boolean this_present_lruItems = true && this.isSetLruItems();
      boolean that_present_lruItems = true && that.isSetLruItems();
      if (this_present_lruItems || that_present_lruItems) {
        if (!(this_present_lruItems && that_present_lruItems))
          return false;
        if (!this.lruItems.equals(that.lruItems))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createCache_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createCache_args typedOther = (createCache_args)other;

      lastComparison = Boolean.valueOf(isSetLruItems()).compareTo(typedOther.isSetLruItems());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLruItems()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lruItems, typedOther.lruItems);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createCache_args(");
      boolean first = true;

      sb.append("lruItems:");
      if (this.lruItems == null) {
        sb.append("null");
      } else {
        sb.append(this.lruItems);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createCache_argsStandardSchemeFactory implements SchemeFactory {
      public createCache_argsStandardScheme getScheme() {
        return new createCache_argsStandardScheme();
      }
    }

    private static class createCache_argsStandardScheme extends StandardScheme<createCache_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createCache_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LRU_ITEMS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.lruItems = new ArrayList<LRUItem>(_list8.size);
                  for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                  {
                    LRUItem _elem10; // required
                    _elem10 = new LRUItem();
                    _elem10.read(iprot);
                    struct.lruItems.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setLruItemsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createCache_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.lruItems != null) {
          oprot.writeFieldBegin(LRU_ITEMS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.lruItems.size()));
            for (LRUItem _iter11 : struct.lruItems)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createCache_argsTupleSchemeFactory implements SchemeFactory {
      public createCache_argsTupleScheme getScheme() {
        return new createCache_argsTupleScheme();
      }
    }

    private static class createCache_argsTupleScheme extends TupleScheme<createCache_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createCache_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLruItems()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLruItems()) {
          {
            oprot.writeI32(struct.lruItems.size());
            for (LRUItem _iter12 : struct.lruItems)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createCache_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.lruItems = new ArrayList<LRUItem>(_list13.size);
            for (int _i14 = 0; _i14 < _list13.size; ++_i14)
            {
              LRUItem _elem15; // required
              _elem15 = new LRUItem();
              _elem15.read(iprot);
              struct.lruItems.add(_elem15);
            }
          }
          struct.setLruItemsIsSet(true);
        }
      }
    }

  }

  public static class createCache_result implements org.apache.thrift.TBase<createCache_result, createCache_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createCache_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createCache_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createCache_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createCache_result.class, metaDataMap);
    }

    public createCache_result() {
    }

    public createCache_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createCache_result(createCache_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public createCache_result deepCopy() {
      return new createCache_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public createCache_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createCache_result)
        return this.equals((createCache_result)that);
      return false;
    }

    public boolean equals(createCache_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createCache_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createCache_result typedOther = (createCache_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createCache_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createCache_resultStandardSchemeFactory implements SchemeFactory {
      public createCache_resultStandardScheme getScheme() {
        return new createCache_resultStandardScheme();
      }
    }

    private static class createCache_resultStandardScheme extends StandardScheme<createCache_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createCache_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createCache_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createCache_resultTupleSchemeFactory implements SchemeFactory {
      public createCache_resultTupleScheme getScheme() {
        return new createCache_resultTupleScheme();
      }
    }

    private static class createCache_resultTupleScheme extends TupleScheme<createCache_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createCache_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createCache_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class indexCache_args implements org.apache.thrift.TBase<indexCache_args, indexCache_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("indexCache_args");

    private static final org.apache.thrift.protocol.TField CACHE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cacheId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new indexCache_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new indexCache_argsTupleSchemeFactory());
    }

    public String cacheId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CACHE_ID((short)1, "cacheId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CACHE_ID
            return CACHE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CACHE_ID, new org.apache.thrift.meta_data.FieldMetaData("cacheId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(indexCache_args.class, metaDataMap);
    }

    public indexCache_args() {
    }

    public indexCache_args(
      String cacheId)
    {
      this();
      this.cacheId = cacheId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public indexCache_args(indexCache_args other) {
      if (other.isSetCacheId()) {
        this.cacheId = other.cacheId;
      }
    }

    public indexCache_args deepCopy() {
      return new indexCache_args(this);
    }

    @Override
    public void clear() {
      this.cacheId = null;
    }

    public String getCacheId() {
      return this.cacheId;
    }

    public indexCache_args setCacheId(String cacheId) {
      this.cacheId = cacheId;
      return this;
    }

    public void unsetCacheId() {
      this.cacheId = null;
    }

    /** Returns true if field cacheId is set (has been assigned a value) and false otherwise */
    public boolean isSetCacheId() {
      return this.cacheId != null;
    }

    public void setCacheIdIsSet(boolean value) {
      if (!value) {
        this.cacheId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CACHE_ID:
        if (value == null) {
          unsetCacheId();
        } else {
          setCacheId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CACHE_ID:
        return getCacheId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CACHE_ID:
        return isSetCacheId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof indexCache_args)
        return this.equals((indexCache_args)that);
      return false;
    }

    public boolean equals(indexCache_args that) {
      if (that == null)
        return false;

      boolean this_present_cacheId = true && this.isSetCacheId();
      boolean that_present_cacheId = true && that.isSetCacheId();
      if (this_present_cacheId || that_present_cacheId) {
        if (!(this_present_cacheId && that_present_cacheId))
          return false;
        if (!this.cacheId.equals(that.cacheId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(indexCache_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      indexCache_args typedOther = (indexCache_args)other;

      lastComparison = Boolean.valueOf(isSetCacheId()).compareTo(typedOther.isSetCacheId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCacheId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cacheId, typedOther.cacheId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("indexCache_args(");
      boolean first = true;

      sb.append("cacheId:");
      if (this.cacheId == null) {
        sb.append("null");
      } else {
        sb.append(this.cacheId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class indexCache_argsStandardSchemeFactory implements SchemeFactory {
      public indexCache_argsStandardScheme getScheme() {
        return new indexCache_argsStandardScheme();
      }
    }

    private static class indexCache_argsStandardScheme extends StandardScheme<indexCache_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, indexCache_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CACHE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cacheId = iprot.readString();
                struct.setCacheIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, indexCache_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cacheId != null) {
          oprot.writeFieldBegin(CACHE_ID_FIELD_DESC);
          oprot.writeString(struct.cacheId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class indexCache_argsTupleSchemeFactory implements SchemeFactory {
      public indexCache_argsTupleScheme getScheme() {
        return new indexCache_argsTupleScheme();
      }
    }

    private static class indexCache_argsTupleScheme extends TupleScheme<indexCache_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, indexCache_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCacheId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCacheId()) {
          oprot.writeString(struct.cacheId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, indexCache_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.cacheId = iprot.readString();
          struct.setCacheIdIsSet(true);
        }
      }
    }

  }

  public static class indexCache_result implements org.apache.thrift.TBase<indexCache_result, indexCache_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("indexCache_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new indexCache_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new indexCache_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(indexCache_result.class, metaDataMap);
    }

    public indexCache_result() {
    }

    public indexCache_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public indexCache_result(indexCache_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public indexCache_result deepCopy() {
      return new indexCache_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public indexCache_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof indexCache_result)
        return this.equals((indexCache_result)that);
      return false;
    }

    public boolean equals(indexCache_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(indexCache_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      indexCache_result typedOther = (indexCache_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("indexCache_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class indexCache_resultStandardSchemeFactory implements SchemeFactory {
      public indexCache_resultStandardScheme getScheme() {
        return new indexCache_resultStandardScheme();
      }
    }

    private static class indexCache_resultStandardScheme extends StandardScheme<indexCache_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, indexCache_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, indexCache_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class indexCache_resultTupleSchemeFactory implements SchemeFactory {
      public indexCache_resultTupleScheme getScheme() {
        return new indexCache_resultTupleScheme();
      }
    }

    private static class indexCache_resultTupleScheme extends TupleScheme<indexCache_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, indexCache_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, indexCache_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getPrecisionExceptionsFromCache_args implements org.apache.thrift.TBase<getPrecisionExceptionsFromCache_args, getPrecisionExceptionsFromCache_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPrecisionExceptionsFromCache_args");

    private static final org.apache.thrift.protocol.TField CACHE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cacheId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPrecisionExceptionsFromCache_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPrecisionExceptionsFromCache_argsTupleSchemeFactory());
    }

    public String cacheId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CACHE_ID((short)1, "cacheId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CACHE_ID
            return CACHE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CACHE_ID, new org.apache.thrift.meta_data.FieldMetaData("cacheId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPrecisionExceptionsFromCache_args.class, metaDataMap);
    }

    public getPrecisionExceptionsFromCache_args() {
    }

    public getPrecisionExceptionsFromCache_args(
      String cacheId)
    {
      this();
      this.cacheId = cacheId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPrecisionExceptionsFromCache_args(getPrecisionExceptionsFromCache_args other) {
      if (other.isSetCacheId()) {
        this.cacheId = other.cacheId;
      }
    }

    public getPrecisionExceptionsFromCache_args deepCopy() {
      return new getPrecisionExceptionsFromCache_args(this);
    }

    @Override
    public void clear() {
      this.cacheId = null;
    }

    public String getCacheId() {
      return this.cacheId;
    }

    public getPrecisionExceptionsFromCache_args setCacheId(String cacheId) {
      this.cacheId = cacheId;
      return this;
    }

    public void unsetCacheId() {
      this.cacheId = null;
    }

    /** Returns true if field cacheId is set (has been assigned a value) and false otherwise */
    public boolean isSetCacheId() {
      return this.cacheId != null;
    }

    public void setCacheIdIsSet(boolean value) {
      if (!value) {
        this.cacheId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CACHE_ID:
        if (value == null) {
          unsetCacheId();
        } else {
          setCacheId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CACHE_ID:
        return getCacheId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CACHE_ID:
        return isSetCacheId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPrecisionExceptionsFromCache_args)
        return this.equals((getPrecisionExceptionsFromCache_args)that);
      return false;
    }

    public boolean equals(getPrecisionExceptionsFromCache_args that) {
      if (that == null)
        return false;

      boolean this_present_cacheId = true && this.isSetCacheId();
      boolean that_present_cacheId = true && that.isSetCacheId();
      if (this_present_cacheId || that_present_cacheId) {
        if (!(this_present_cacheId && that_present_cacheId))
          return false;
        if (!this.cacheId.equals(that.cacheId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPrecisionExceptionsFromCache_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPrecisionExceptionsFromCache_args typedOther = (getPrecisionExceptionsFromCache_args)other;

      lastComparison = Boolean.valueOf(isSetCacheId()).compareTo(typedOther.isSetCacheId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCacheId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cacheId, typedOther.cacheId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPrecisionExceptionsFromCache_args(");
      boolean first = true;

      sb.append("cacheId:");
      if (this.cacheId == null) {
        sb.append("null");
      } else {
        sb.append(this.cacheId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPrecisionExceptionsFromCache_argsStandardSchemeFactory implements SchemeFactory {
      public getPrecisionExceptionsFromCache_argsStandardScheme getScheme() {
        return new getPrecisionExceptionsFromCache_argsStandardScheme();
      }
    }

    private static class getPrecisionExceptionsFromCache_argsStandardScheme extends StandardScheme<getPrecisionExceptionsFromCache_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPrecisionExceptionsFromCache_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CACHE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cacheId = iprot.readString();
                struct.setCacheIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPrecisionExceptionsFromCache_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cacheId != null) {
          oprot.writeFieldBegin(CACHE_ID_FIELD_DESC);
          oprot.writeString(struct.cacheId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPrecisionExceptionsFromCache_argsTupleSchemeFactory implements SchemeFactory {
      public getPrecisionExceptionsFromCache_argsTupleScheme getScheme() {
        return new getPrecisionExceptionsFromCache_argsTupleScheme();
      }
    }

    private static class getPrecisionExceptionsFromCache_argsTupleScheme extends TupleScheme<getPrecisionExceptionsFromCache_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPrecisionExceptionsFromCache_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCacheId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCacheId()) {
          oprot.writeString(struct.cacheId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPrecisionExceptionsFromCache_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.cacheId = iprot.readString();
          struct.setCacheIdIsSet(true);
        }
      }
    }

  }

  public static class getPrecisionExceptionsFromCache_result implements org.apache.thrift.TBase<getPrecisionExceptionsFromCache_result, getPrecisionExceptionsFromCache_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPrecisionExceptionsFromCache_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPrecisionExceptionsFromCache_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPrecisionExceptionsFromCache_resultTupleSchemeFactory());
    }

    public List<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPrecisionExceptionsFromCache_result.class, metaDataMap);
    }

    public getPrecisionExceptionsFromCache_result() {
    }

    public getPrecisionExceptionsFromCache_result(
      List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPrecisionExceptionsFromCache_result(getPrecisionExceptionsFromCache_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
    }

    public getPrecisionExceptionsFromCache_result deepCopy() {
      return new getPrecisionExceptionsFromCache_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public getPrecisionExceptionsFromCache_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPrecisionExceptionsFromCache_result)
        return this.equals((getPrecisionExceptionsFromCache_result)that);
      return false;
    }

    public boolean equals(getPrecisionExceptionsFromCache_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPrecisionExceptionsFromCache_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPrecisionExceptionsFromCache_result typedOther = (getPrecisionExceptionsFromCache_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPrecisionExceptionsFromCache_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPrecisionExceptionsFromCache_resultStandardSchemeFactory implements SchemeFactory {
      public getPrecisionExceptionsFromCache_resultStandardScheme getScheme() {
        return new getPrecisionExceptionsFromCache_resultStandardScheme();
      }
    }

    private static class getPrecisionExceptionsFromCache_resultStandardScheme extends StandardScheme<getPrecisionExceptionsFromCache_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPrecisionExceptionsFromCache_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list16.size);
                  for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                  {
                    String _elem18; // required
                    _elem18 = iprot.readString();
                    struct.success.add(_elem18);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPrecisionExceptionsFromCache_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter19 : struct.success)
            {
              oprot.writeString(_iter19);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPrecisionExceptionsFromCache_resultTupleSchemeFactory implements SchemeFactory {
      public getPrecisionExceptionsFromCache_resultTupleScheme getScheme() {
        return new getPrecisionExceptionsFromCache_resultTupleScheme();
      }
    }

    private static class getPrecisionExceptionsFromCache_resultTupleScheme extends TupleScheme<getPrecisionExceptionsFromCache_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPrecisionExceptionsFromCache_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter20 : struct.success)
            {
              oprot.writeString(_iter20);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPrecisionExceptionsFromCache_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list21.size);
            for (int _i22 = 0; _i22 < _list21.size; ++_i22)
            {
              String _elem23; // required
              _elem23 = iprot.readString();
              struct.success.add(_elem23);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getWebEntitiesFromCache_args implements org.apache.thrift.TBase<getWebEntitiesFromCache_args, getWebEntitiesFromCache_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWebEntitiesFromCache_args");

    private static final org.apache.thrift.protocol.TField CACHE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cacheId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWebEntitiesFromCache_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWebEntitiesFromCache_argsTupleSchemeFactory());
    }

    public String cacheId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CACHE_ID((short)1, "cacheId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CACHE_ID
            return CACHE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CACHE_ID, new org.apache.thrift.meta_data.FieldMetaData("cacheId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWebEntitiesFromCache_args.class, metaDataMap);
    }

    public getWebEntitiesFromCache_args() {
    }

    public getWebEntitiesFromCache_args(
      String cacheId)
    {
      this();
      this.cacheId = cacheId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWebEntitiesFromCache_args(getWebEntitiesFromCache_args other) {
      if (other.isSetCacheId()) {
        this.cacheId = other.cacheId;
      }
    }

    public getWebEntitiesFromCache_args deepCopy() {
      return new getWebEntitiesFromCache_args(this);
    }

    @Override
    public void clear() {
      this.cacheId = null;
    }

    public String getCacheId() {
      return this.cacheId;
    }

    public getWebEntitiesFromCache_args setCacheId(String cacheId) {
      this.cacheId = cacheId;
      return this;
    }

    public void unsetCacheId() {
      this.cacheId = null;
    }

    /** Returns true if field cacheId is set (has been assigned a value) and false otherwise */
    public boolean isSetCacheId() {
      return this.cacheId != null;
    }

    public void setCacheIdIsSet(boolean value) {
      if (!value) {
        this.cacheId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CACHE_ID:
        if (value == null) {
          unsetCacheId();
        } else {
          setCacheId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CACHE_ID:
        return getCacheId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CACHE_ID:
        return isSetCacheId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWebEntitiesFromCache_args)
        return this.equals((getWebEntitiesFromCache_args)that);
      return false;
    }

    public boolean equals(getWebEntitiesFromCache_args that) {
      if (that == null)
        return false;

      boolean this_present_cacheId = true && this.isSetCacheId();
      boolean that_present_cacheId = true && that.isSetCacheId();
      if (this_present_cacheId || that_present_cacheId) {
        if (!(this_present_cacheId && that_present_cacheId))
          return false;
        if (!this.cacheId.equals(that.cacheId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getWebEntitiesFromCache_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getWebEntitiesFromCache_args typedOther = (getWebEntitiesFromCache_args)other;

      lastComparison = Boolean.valueOf(isSetCacheId()).compareTo(typedOther.isSetCacheId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCacheId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cacheId, typedOther.cacheId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWebEntitiesFromCache_args(");
      boolean first = true;

      sb.append("cacheId:");
      if (this.cacheId == null) {
        sb.append("null");
      } else {
        sb.append(this.cacheId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWebEntitiesFromCache_argsStandardSchemeFactory implements SchemeFactory {
      public getWebEntitiesFromCache_argsStandardScheme getScheme() {
        return new getWebEntitiesFromCache_argsStandardScheme();
      }
    }

    private static class getWebEntitiesFromCache_argsStandardScheme extends StandardScheme<getWebEntitiesFromCache_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWebEntitiesFromCache_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CACHE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cacheId = iprot.readString();
                struct.setCacheIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWebEntitiesFromCache_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cacheId != null) {
          oprot.writeFieldBegin(CACHE_ID_FIELD_DESC);
          oprot.writeString(struct.cacheId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWebEntitiesFromCache_argsTupleSchemeFactory implements SchemeFactory {
      public getWebEntitiesFromCache_argsTupleScheme getScheme() {
        return new getWebEntitiesFromCache_argsTupleScheme();
      }
    }

    private static class getWebEntitiesFromCache_argsTupleScheme extends TupleScheme<getWebEntitiesFromCache_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWebEntitiesFromCache_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCacheId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCacheId()) {
          oprot.writeString(struct.cacheId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWebEntitiesFromCache_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.cacheId = iprot.readString();
          struct.setCacheIdIsSet(true);
        }
      }
    }

  }

  public static class getWebEntitiesFromCache_result implements org.apache.thrift.TBase<getWebEntitiesFromCache_result, getWebEntitiesFromCache_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWebEntitiesFromCache_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWebEntitiesFromCache_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWebEntitiesFromCache_resultTupleSchemeFactory());
    }

    public List<WebEntityInfo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WebEntityInfo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWebEntitiesFromCache_result.class, metaDataMap);
    }

    public getWebEntitiesFromCache_result() {
    }

    public getWebEntitiesFromCache_result(
      List<WebEntityInfo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWebEntitiesFromCache_result(getWebEntitiesFromCache_result other) {
      if (other.isSetSuccess()) {
        List<WebEntityInfo> __this__success = new ArrayList<WebEntityInfo>();
        for (WebEntityInfo other_element : other.success) {
          __this__success.add(new WebEntityInfo(other_element));
        }
        this.success = __this__success;
      }
    }

    public getWebEntitiesFromCache_result deepCopy() {
      return new getWebEntitiesFromCache_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<WebEntityInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(WebEntityInfo elem) {
      if (this.success == null) {
        this.success = new ArrayList<WebEntityInfo>();
      }
      this.success.add(elem);
    }

    public List<WebEntityInfo> getSuccess() {
      return this.success;
    }

    public getWebEntitiesFromCache_result setSuccess(List<WebEntityInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<WebEntityInfo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWebEntitiesFromCache_result)
        return this.equals((getWebEntitiesFromCache_result)that);
      return false;
    }

    public boolean equals(getWebEntitiesFromCache_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getWebEntitiesFromCache_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getWebEntitiesFromCache_result typedOther = (getWebEntitiesFromCache_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWebEntitiesFromCache_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWebEntitiesFromCache_resultStandardSchemeFactory implements SchemeFactory {
      public getWebEntitiesFromCache_resultStandardScheme getScheme() {
        return new getWebEntitiesFromCache_resultStandardScheme();
      }
    }

    private static class getWebEntitiesFromCache_resultStandardScheme extends StandardScheme<getWebEntitiesFromCache_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWebEntitiesFromCache_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new ArrayList<WebEntityInfo>(_list24.size);
                  for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                  {
                    WebEntityInfo _elem26; // required
                    _elem26 = new WebEntityInfo();
                    _elem26.read(iprot);
                    struct.success.add(_elem26);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWebEntitiesFromCache_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (WebEntityInfo _iter27 : struct.success)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWebEntitiesFromCache_resultTupleSchemeFactory implements SchemeFactory {
      public getWebEntitiesFromCache_resultTupleScheme getScheme() {
        return new getWebEntitiesFromCache_resultTupleScheme();
      }
    }

    private static class getWebEntitiesFromCache_resultTupleScheme extends TupleScheme<getWebEntitiesFromCache_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWebEntitiesFromCache_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (WebEntityInfo _iter28 : struct.success)
            {
              _iter28.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWebEntitiesFromCache_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<WebEntityInfo>(_list29.size);
            for (int _i30 = 0; _i30 < _list29.size; ++_i30)
            {
              WebEntityInfo _elem31; // required
              _elem31 = new WebEntityInfo();
              _elem31.read(iprot);
              struct.success.add(_elem31);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteCache_args implements org.apache.thrift.TBase<deleteCache_args, deleteCache_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteCache_args");

    private static final org.apache.thrift.protocol.TField CACHE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cacheId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteCache_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteCache_argsTupleSchemeFactory());
    }

    public String cacheId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CACHE_ID((short)1, "cacheId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CACHE_ID
            return CACHE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CACHE_ID, new org.apache.thrift.meta_data.FieldMetaData("cacheId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteCache_args.class, metaDataMap);
    }

    public deleteCache_args() {
    }

    public deleteCache_args(
      String cacheId)
    {
      this();
      this.cacheId = cacheId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteCache_args(deleteCache_args other) {
      if (other.isSetCacheId()) {
        this.cacheId = other.cacheId;
      }
    }

    public deleteCache_args deepCopy() {
      return new deleteCache_args(this);
    }

    @Override
    public void clear() {
      this.cacheId = null;
    }

    public String getCacheId() {
      return this.cacheId;
    }

    public deleteCache_args setCacheId(String cacheId) {
      this.cacheId = cacheId;
      return this;
    }

    public void unsetCacheId() {
      this.cacheId = null;
    }

    /** Returns true if field cacheId is set (has been assigned a value) and false otherwise */
    public boolean isSetCacheId() {
      return this.cacheId != null;
    }

    public void setCacheIdIsSet(boolean value) {
      if (!value) {
        this.cacheId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CACHE_ID:
        if (value == null) {
          unsetCacheId();
        } else {
          setCacheId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CACHE_ID:
        return getCacheId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CACHE_ID:
        return isSetCacheId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteCache_args)
        return this.equals((deleteCache_args)that);
      return false;
    }

    public boolean equals(deleteCache_args that) {
      if (that == null)
        return false;

      boolean this_present_cacheId = true && this.isSetCacheId();
      boolean that_present_cacheId = true && that.isSetCacheId();
      if (this_present_cacheId || that_present_cacheId) {
        if (!(this_present_cacheId && that_present_cacheId))
          return false;
        if (!this.cacheId.equals(that.cacheId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteCache_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteCache_args typedOther = (deleteCache_args)other;

      lastComparison = Boolean.valueOf(isSetCacheId()).compareTo(typedOther.isSetCacheId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCacheId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cacheId, typedOther.cacheId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteCache_args(");
      boolean first = true;

      sb.append("cacheId:");
      if (this.cacheId == null) {
        sb.append("null");
      } else {
        sb.append(this.cacheId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteCache_argsStandardSchemeFactory implements SchemeFactory {
      public deleteCache_argsStandardScheme getScheme() {
        return new deleteCache_argsStandardScheme();
      }
    }

    private static class deleteCache_argsStandardScheme extends StandardScheme<deleteCache_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteCache_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CACHE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cacheId = iprot.readString();
                struct.setCacheIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteCache_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cacheId != null) {
          oprot.writeFieldBegin(CACHE_ID_FIELD_DESC);
          oprot.writeString(struct.cacheId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteCache_argsTupleSchemeFactory implements SchemeFactory {
      public deleteCache_argsTupleScheme getScheme() {
        return new deleteCache_argsTupleScheme();
      }
    }

    private static class deleteCache_argsTupleScheme extends TupleScheme<deleteCache_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteCache_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCacheId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCacheId()) {
          oprot.writeString(struct.cacheId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteCache_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.cacheId = iprot.readString();
          struct.setCacheIdIsSet(true);
        }
      }
    }

  }

  public static class deleteCache_result implements org.apache.thrift.TBase<deleteCache_result, deleteCache_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteCache_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteCache_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteCache_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteCache_result.class, metaDataMap);
    }

    public deleteCache_result() {
    }

    public deleteCache_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteCache_result(deleteCache_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public deleteCache_result deepCopy() {
      return new deleteCache_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public deleteCache_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteCache_result)
        return this.equals((deleteCache_result)that);
      return false;
    }

    public boolean equals(deleteCache_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteCache_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteCache_result typedOther = (deleteCache_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteCache_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteCache_resultStandardSchemeFactory implements SchemeFactory {
      public deleteCache_resultStandardScheme getScheme() {
        return new deleteCache_resultStandardScheme();
      }
    }

    private static class deleteCache_resultStandardScheme extends StandardScheme<deleteCache_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteCache_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteCache_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteCache_resultTupleSchemeFactory implements SchemeFactory {
      public deleteCache_resultTupleScheme getScheme() {
        return new deleteCache_resultTupleScheme();
      }
    }

    private static class deleteCache_resultTupleScheme extends TupleScheme<deleteCache_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteCache_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteCache_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class setPrecisionException_args implements org.apache.thrift.TBase<setPrecisionException_args, setPrecisionException_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setPrecisionException_args");

    private static final org.apache.thrift.protocol.TField PRECISION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("precisionException", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setPrecisionException_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setPrecisionException_argsTupleSchemeFactory());
    }

    public String precisionException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRECISION_EXCEPTION((short)1, "precisionException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRECISION_EXCEPTION
            return PRECISION_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRECISION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("precisionException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setPrecisionException_args.class, metaDataMap);
    }

    public setPrecisionException_args() {
    }

    public setPrecisionException_args(
      String precisionException)
    {
      this();
      this.precisionException = precisionException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setPrecisionException_args(setPrecisionException_args other) {
      if (other.isSetPrecisionException()) {
        this.precisionException = other.precisionException;
      }
    }

    public setPrecisionException_args deepCopy() {
      return new setPrecisionException_args(this);
    }

    @Override
    public void clear() {
      this.precisionException = null;
    }

    public String getPrecisionException() {
      return this.precisionException;
    }

    public setPrecisionException_args setPrecisionException(String precisionException) {
      this.precisionException = precisionException;
      return this;
    }

    public void unsetPrecisionException() {
      this.precisionException = null;
    }

    /** Returns true if field precisionException is set (has been assigned a value) and false otherwise */
    public boolean isSetPrecisionException() {
      return this.precisionException != null;
    }

    public void setPrecisionExceptionIsSet(boolean value) {
      if (!value) {
        this.precisionException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRECISION_EXCEPTION:
        if (value == null) {
          unsetPrecisionException();
        } else {
          setPrecisionException((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRECISION_EXCEPTION:
        return getPrecisionException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRECISION_EXCEPTION:
        return isSetPrecisionException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setPrecisionException_args)
        return this.equals((setPrecisionException_args)that);
      return false;
    }

    public boolean equals(setPrecisionException_args that) {
      if (that == null)
        return false;

      boolean this_present_precisionException = true && this.isSetPrecisionException();
      boolean that_present_precisionException = true && that.isSetPrecisionException();
      if (this_present_precisionException || that_present_precisionException) {
        if (!(this_present_precisionException && that_present_precisionException))
          return false;
        if (!this.precisionException.equals(that.precisionException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setPrecisionException_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setPrecisionException_args typedOther = (setPrecisionException_args)other;

      lastComparison = Boolean.valueOf(isSetPrecisionException()).compareTo(typedOther.isSetPrecisionException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrecisionException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.precisionException, typedOther.precisionException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setPrecisionException_args(");
      boolean first = true;

      sb.append("precisionException:");
      if (this.precisionException == null) {
        sb.append("null");
      } else {
        sb.append(this.precisionException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setPrecisionException_argsStandardSchemeFactory implements SchemeFactory {
      public setPrecisionException_argsStandardScheme getScheme() {
        return new setPrecisionException_argsStandardScheme();
      }
    }

    private static class setPrecisionException_argsStandardScheme extends StandardScheme<setPrecisionException_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setPrecisionException_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRECISION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.precisionException = iprot.readString();
                struct.setPrecisionExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setPrecisionException_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.precisionException != null) {
          oprot.writeFieldBegin(PRECISION_EXCEPTION_FIELD_DESC);
          oprot.writeString(struct.precisionException);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setPrecisionException_argsTupleSchemeFactory implements SchemeFactory {
      public setPrecisionException_argsTupleScheme getScheme() {
        return new setPrecisionException_argsTupleScheme();
      }
    }

    private static class setPrecisionException_argsTupleScheme extends TupleScheme<setPrecisionException_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setPrecisionException_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPrecisionException()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPrecisionException()) {
          oprot.writeString(struct.precisionException);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setPrecisionException_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.precisionException = iprot.readString();
          struct.setPrecisionExceptionIsSet(true);
        }
      }
    }

  }

  public static class setPrecisionException_result implements org.apache.thrift.TBase<setPrecisionException_result, setPrecisionException_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setPrecisionException_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setPrecisionException_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setPrecisionException_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setPrecisionException_result.class, metaDataMap);
    }

    public setPrecisionException_result() {
    }

    public setPrecisionException_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setPrecisionException_result(setPrecisionException_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public setPrecisionException_result deepCopy() {
      return new setPrecisionException_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public setPrecisionException_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setPrecisionException_result)
        return this.equals((setPrecisionException_result)that);
      return false;
    }

    public boolean equals(setPrecisionException_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setPrecisionException_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setPrecisionException_result typedOther = (setPrecisionException_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setPrecisionException_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setPrecisionException_resultStandardSchemeFactory implements SchemeFactory {
      public setPrecisionException_resultStandardScheme getScheme() {
        return new setPrecisionException_resultStandardScheme();
      }
    }

    private static class setPrecisionException_resultStandardScheme extends StandardScheme<setPrecisionException_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setPrecisionException_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setPrecisionException_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setPrecisionException_resultTupleSchemeFactory implements SchemeFactory {
      public setPrecisionException_resultTupleScheme getScheme() {
        return new setPrecisionException_resultTupleScheme();
      }
    }

    private static class setPrecisionException_resultTupleScheme extends TupleScheme<setPrecisionException_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setPrecisionException_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setPrecisionException_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class storeLRUItems_args implements org.apache.thrift.TBase<storeLRUItems_args, storeLRUItems_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("storeLRUItems_args");

    private static final org.apache.thrift.protocol.TField LRU_ITEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("lruItems", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new storeLRUItems_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new storeLRUItems_argsTupleSchemeFactory());
    }

    public List<LRUItem> lruItems; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LRU_ITEMS((short)1, "lruItems");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LRU_ITEMS
            return LRU_ITEMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LRU_ITEMS, new org.apache.thrift.meta_data.FieldMetaData("lruItems", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LRUItem.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(storeLRUItems_args.class, metaDataMap);
    }

    public storeLRUItems_args() {
    }

    public storeLRUItems_args(
      List<LRUItem> lruItems)
    {
      this();
      this.lruItems = lruItems;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public storeLRUItems_args(storeLRUItems_args other) {
      if (other.isSetLruItems()) {
        List<LRUItem> __this__lruItems = new ArrayList<LRUItem>();
        for (LRUItem other_element : other.lruItems) {
          __this__lruItems.add(new LRUItem(other_element));
        }
        this.lruItems = __this__lruItems;
      }
    }

    public storeLRUItems_args deepCopy() {
      return new storeLRUItems_args(this);
    }

    @Override
    public void clear() {
      this.lruItems = null;
    }

    public int getLruItemsSize() {
      return (this.lruItems == null) ? 0 : this.lruItems.size();
    }

    public java.util.Iterator<LRUItem> getLruItemsIterator() {
      return (this.lruItems == null) ? null : this.lruItems.iterator();
    }

    public void addToLruItems(LRUItem elem) {
      if (this.lruItems == null) {
        this.lruItems = new ArrayList<LRUItem>();
      }
      this.lruItems.add(elem);
    }

    public List<LRUItem> getLruItems() {
      return this.lruItems;
    }

    public storeLRUItems_args setLruItems(List<LRUItem> lruItems) {
      this.lruItems = lruItems;
      return this;
    }

    public void unsetLruItems() {
      this.lruItems = null;
    }

    /** Returns true if field lruItems is set (has been assigned a value) and false otherwise */
    public boolean isSetLruItems() {
      return this.lruItems != null;
    }

    public void setLruItemsIsSet(boolean value) {
      if (!value) {
        this.lruItems = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LRU_ITEMS:
        if (value == null) {
          unsetLruItems();
        } else {
          setLruItems((List<LRUItem>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LRU_ITEMS:
        return getLruItems();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LRU_ITEMS:
        return isSetLruItems();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof storeLRUItems_args)
        return this.equals((storeLRUItems_args)that);
      return false;
    }

    public boolean equals(storeLRUItems_args that) {
      if (that == null)
        return false;

      boolean this_present_lruItems = true && this.isSetLruItems();
      boolean that_present_lruItems = true && that.isSetLruItems();
      if (this_present_lruItems || that_present_lruItems) {
        if (!(this_present_lruItems && that_present_lruItems))
          return false;
        if (!this.lruItems.equals(that.lruItems))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(storeLRUItems_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      storeLRUItems_args typedOther = (storeLRUItems_args)other;

      lastComparison = Boolean.valueOf(isSetLruItems()).compareTo(typedOther.isSetLruItems());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLruItems()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lruItems, typedOther.lruItems);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("storeLRUItems_args(");
      boolean first = true;

      sb.append("lruItems:");
      if (this.lruItems == null) {
        sb.append("null");
      } else {
        sb.append(this.lruItems);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class storeLRUItems_argsStandardSchemeFactory implements SchemeFactory {
      public storeLRUItems_argsStandardScheme getScheme() {
        return new storeLRUItems_argsStandardScheme();
      }
    }

    private static class storeLRUItems_argsStandardScheme extends StandardScheme<storeLRUItems_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, storeLRUItems_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LRU_ITEMS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.lruItems = new ArrayList<LRUItem>(_list32.size);
                  for (int _i33 = 0; _i33 < _list32.size; ++_i33)
                  {
                    LRUItem _elem34; // required
                    _elem34 = new LRUItem();
                    _elem34.read(iprot);
                    struct.lruItems.add(_elem34);
                  }
                  iprot.readListEnd();
                }
                struct.setLruItemsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, storeLRUItems_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.lruItems != null) {
          oprot.writeFieldBegin(LRU_ITEMS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.lruItems.size()));
            for (LRUItem _iter35 : struct.lruItems)
            {
              _iter35.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class storeLRUItems_argsTupleSchemeFactory implements SchemeFactory {
      public storeLRUItems_argsTupleScheme getScheme() {
        return new storeLRUItems_argsTupleScheme();
      }
    }

    private static class storeLRUItems_argsTupleScheme extends TupleScheme<storeLRUItems_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, storeLRUItems_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLruItems()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLruItems()) {
          {
            oprot.writeI32(struct.lruItems.size());
            for (LRUItem _iter36 : struct.lruItems)
            {
              _iter36.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, storeLRUItems_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.lruItems = new ArrayList<LRUItem>(_list37.size);
            for (int _i38 = 0; _i38 < _list37.size; ++_i38)
            {
              LRUItem _elem39; // required
              _elem39 = new LRUItem();
              _elem39.read(iprot);
              struct.lruItems.add(_elem39);
            }
          }
          struct.setLruItemsIsSet(true);
        }
      }
    }

  }

  public static class storeLRUItems_result implements org.apache.thrift.TBase<storeLRUItems_result, storeLRUItems_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("storeLRUItems_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new storeLRUItems_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new storeLRUItems_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(storeLRUItems_result.class, metaDataMap);
    }

    public storeLRUItems_result() {
    }

    public storeLRUItems_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public storeLRUItems_result(storeLRUItems_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public storeLRUItems_result deepCopy() {
      return new storeLRUItems_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public storeLRUItems_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof storeLRUItems_result)
        return this.equals((storeLRUItems_result)that);
      return false;
    }

    public boolean equals(storeLRUItems_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(storeLRUItems_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      storeLRUItems_result typedOther = (storeLRUItems_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("storeLRUItems_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class storeLRUItems_resultStandardSchemeFactory implements SchemeFactory {
      public storeLRUItems_resultStandardScheme getScheme() {
        return new storeLRUItems_resultStandardScheme();
      }
    }

    private static class storeLRUItems_resultStandardScheme extends StandardScheme<storeLRUItems_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, storeLRUItems_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, storeLRUItems_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class storeLRUItems_resultTupleSchemeFactory implements SchemeFactory {
      public storeLRUItems_resultTupleScheme getScheme() {
        return new storeLRUItems_resultTupleScheme();
      }
    }

    private static class storeLRUItems_resultTupleScheme extends TupleScheme<storeLRUItems_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, storeLRUItems_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, storeLRUItems_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class storeNodeLinks_args implements org.apache.thrift.TBase<storeNodeLinks_args, storeNodeLinks_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("storeNodeLinks_args");

    private static final org.apache.thrift.protocol.TField NODE_LINKS_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeLinks", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new storeNodeLinks_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new storeNodeLinks_argsTupleSchemeFactory());
    }

    public List<NodeLink> nodeLinks; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NODE_LINKS((short)1, "nodeLinks");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NODE_LINKS
            return NODE_LINKS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NODE_LINKS, new org.apache.thrift.meta_data.FieldMetaData("nodeLinks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NodeLink.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(storeNodeLinks_args.class, metaDataMap);
    }

    public storeNodeLinks_args() {
    }

    public storeNodeLinks_args(
      List<NodeLink> nodeLinks)
    {
      this();
      this.nodeLinks = nodeLinks;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public storeNodeLinks_args(storeNodeLinks_args other) {
      if (other.isSetNodeLinks()) {
        List<NodeLink> __this__nodeLinks = new ArrayList<NodeLink>();
        for (NodeLink other_element : other.nodeLinks) {
          __this__nodeLinks.add(new NodeLink(other_element));
        }
        this.nodeLinks = __this__nodeLinks;
      }
    }

    public storeNodeLinks_args deepCopy() {
      return new storeNodeLinks_args(this);
    }

    @Override
    public void clear() {
      this.nodeLinks = null;
    }

    public int getNodeLinksSize() {
      return (this.nodeLinks == null) ? 0 : this.nodeLinks.size();
    }

    public java.util.Iterator<NodeLink> getNodeLinksIterator() {
      return (this.nodeLinks == null) ? null : this.nodeLinks.iterator();
    }

    public void addToNodeLinks(NodeLink elem) {
      if (this.nodeLinks == null) {
        this.nodeLinks = new ArrayList<NodeLink>();
      }
      this.nodeLinks.add(elem);
    }

    public List<NodeLink> getNodeLinks() {
      return this.nodeLinks;
    }

    public storeNodeLinks_args setNodeLinks(List<NodeLink> nodeLinks) {
      this.nodeLinks = nodeLinks;
      return this;
    }

    public void unsetNodeLinks() {
      this.nodeLinks = null;
    }

    /** Returns true if field nodeLinks is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeLinks() {
      return this.nodeLinks != null;
    }

    public void setNodeLinksIsSet(boolean value) {
      if (!value) {
        this.nodeLinks = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NODE_LINKS:
        if (value == null) {
          unsetNodeLinks();
        } else {
          setNodeLinks((List<NodeLink>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NODE_LINKS:
        return getNodeLinks();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NODE_LINKS:
        return isSetNodeLinks();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof storeNodeLinks_args)
        return this.equals((storeNodeLinks_args)that);
      return false;
    }

    public boolean equals(storeNodeLinks_args that) {
      if (that == null)
        return false;

      boolean this_present_nodeLinks = true && this.isSetNodeLinks();
      boolean that_present_nodeLinks = true && that.isSetNodeLinks();
      if (this_present_nodeLinks || that_present_nodeLinks) {
        if (!(this_present_nodeLinks && that_present_nodeLinks))
          return false;
        if (!this.nodeLinks.equals(that.nodeLinks))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(storeNodeLinks_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      storeNodeLinks_args typedOther = (storeNodeLinks_args)other;

      lastComparison = Boolean.valueOf(isSetNodeLinks()).compareTo(typedOther.isSetNodeLinks());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeLinks()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeLinks, typedOther.nodeLinks);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("storeNodeLinks_args(");
      boolean first = true;

      sb.append("nodeLinks:");
      if (this.nodeLinks == null) {
        sb.append("null");
      } else {
        sb.append(this.nodeLinks);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class storeNodeLinks_argsStandardSchemeFactory implements SchemeFactory {
      public storeNodeLinks_argsStandardScheme getScheme() {
        return new storeNodeLinks_argsStandardScheme();
      }
    }

    private static class storeNodeLinks_argsStandardScheme extends StandardScheme<storeNodeLinks_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, storeNodeLinks_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NODE_LINKS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.nodeLinks = new ArrayList<NodeLink>(_list40.size);
                  for (int _i41 = 0; _i41 < _list40.size; ++_i41)
                  {
                    NodeLink _elem42; // required
                    _elem42 = new NodeLink();
                    _elem42.read(iprot);
                    struct.nodeLinks.add(_elem42);
                  }
                  iprot.readListEnd();
                }
                struct.setNodeLinksIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, storeNodeLinks_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.nodeLinks != null) {
          oprot.writeFieldBegin(NODE_LINKS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.nodeLinks.size()));
            for (NodeLink _iter43 : struct.nodeLinks)
            {
              _iter43.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class storeNodeLinks_argsTupleSchemeFactory implements SchemeFactory {
      public storeNodeLinks_argsTupleScheme getScheme() {
        return new storeNodeLinks_argsTupleScheme();
      }
    }

    private static class storeNodeLinks_argsTupleScheme extends TupleScheme<storeNodeLinks_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, storeNodeLinks_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNodeLinks()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNodeLinks()) {
          {
            oprot.writeI32(struct.nodeLinks.size());
            for (NodeLink _iter44 : struct.nodeLinks)
            {
              _iter44.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, storeNodeLinks_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.nodeLinks = new ArrayList<NodeLink>(_list45.size);
            for (int _i46 = 0; _i46 < _list45.size; ++_i46)
            {
              NodeLink _elem47; // required
              _elem47 = new NodeLink();
              _elem47.read(iprot);
              struct.nodeLinks.add(_elem47);
            }
          }
          struct.setNodeLinksIsSet(true);
        }
      }
    }

  }

  public static class storeNodeLinks_result implements org.apache.thrift.TBase<storeNodeLinks_result, storeNodeLinks_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("storeNodeLinks_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new storeNodeLinks_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new storeNodeLinks_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(storeNodeLinks_result.class, metaDataMap);
    }

    public storeNodeLinks_result() {
    }

    public storeNodeLinks_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public storeNodeLinks_result(storeNodeLinks_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public storeNodeLinks_result deepCopy() {
      return new storeNodeLinks_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public storeNodeLinks_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof storeNodeLinks_result)
        return this.equals((storeNodeLinks_result)that);
      return false;
    }

    public boolean equals(storeNodeLinks_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(storeNodeLinks_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      storeNodeLinks_result typedOther = (storeNodeLinks_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("storeNodeLinks_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class storeNodeLinks_resultStandardSchemeFactory implements SchemeFactory {
      public storeNodeLinks_resultStandardScheme getScheme() {
        return new storeNodeLinks_resultStandardScheme();
      }
    }

    private static class storeNodeLinks_resultStandardScheme extends StandardScheme<storeNodeLinks_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, storeNodeLinks_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, storeNodeLinks_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class storeNodeLinks_resultTupleSchemeFactory implements SchemeFactory {
      public storeNodeLinks_resultTupleScheme getScheme() {
        return new storeNodeLinks_resultTupleScheme();
      }
    }

    private static class storeNodeLinks_resultTupleScheme extends TupleScheme<storeNodeLinks_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, storeNodeLinks_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, storeNodeLinks_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class storeWebEntity_args implements org.apache.thrift.TBase<storeWebEntity_args, storeWebEntity_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("storeWebEntity_args");

    private static final org.apache.thrift.protocol.TField LRU_ITEM_FIELD_DESC = new org.apache.thrift.protocol.TField("lruItem", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new storeWebEntity_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new storeWebEntity_argsTupleSchemeFactory());
    }

    public LRUItem lruItem; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LRU_ITEM((short)1, "lruItem");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LRU_ITEM
            return LRU_ITEM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LRU_ITEM, new org.apache.thrift.meta_data.FieldMetaData("lruItem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LRUItem.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(storeWebEntity_args.class, metaDataMap);
    }

    public storeWebEntity_args() {
    }

    public storeWebEntity_args(
      LRUItem lruItem)
    {
      this();
      this.lruItem = lruItem;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public storeWebEntity_args(storeWebEntity_args other) {
      if (other.isSetLruItem()) {
        this.lruItem = new LRUItem(other.lruItem);
      }
    }

    public storeWebEntity_args deepCopy() {
      return new storeWebEntity_args(this);
    }

    @Override
    public void clear() {
      this.lruItem = null;
    }

    public LRUItem getLruItem() {
      return this.lruItem;
    }

    public storeWebEntity_args setLruItem(LRUItem lruItem) {
      this.lruItem = lruItem;
      return this;
    }

    public void unsetLruItem() {
      this.lruItem = null;
    }

    /** Returns true if field lruItem is set (has been assigned a value) and false otherwise */
    public boolean isSetLruItem() {
      return this.lruItem != null;
    }

    public void setLruItemIsSet(boolean value) {
      if (!value) {
        this.lruItem = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LRU_ITEM:
        if (value == null) {
          unsetLruItem();
        } else {
          setLruItem((LRUItem)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LRU_ITEM:
        return getLruItem();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LRU_ITEM:
        return isSetLruItem();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof storeWebEntity_args)
        return this.equals((storeWebEntity_args)that);
      return false;
    }

    public boolean equals(storeWebEntity_args that) {
      if (that == null)
        return false;

      boolean this_present_lruItem = true && this.isSetLruItem();
      boolean that_present_lruItem = true && that.isSetLruItem();
      if (this_present_lruItem || that_present_lruItem) {
        if (!(this_present_lruItem && that_present_lruItem))
          return false;
        if (!this.lruItem.equals(that.lruItem))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(storeWebEntity_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      storeWebEntity_args typedOther = (storeWebEntity_args)other;

      lastComparison = Boolean.valueOf(isSetLruItem()).compareTo(typedOther.isSetLruItem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLruItem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lruItem, typedOther.lruItem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("storeWebEntity_args(");
      boolean first = true;

      sb.append("lruItem:");
      if (this.lruItem == null) {
        sb.append("null");
      } else {
        sb.append(this.lruItem);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class storeWebEntity_argsStandardSchemeFactory implements SchemeFactory {
      public storeWebEntity_argsStandardScheme getScheme() {
        return new storeWebEntity_argsStandardScheme();
      }
    }

    private static class storeWebEntity_argsStandardScheme extends StandardScheme<storeWebEntity_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, storeWebEntity_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LRU_ITEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.lruItem = new LRUItem();
                struct.lruItem.read(iprot);
                struct.setLruItemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, storeWebEntity_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.lruItem != null) {
          oprot.writeFieldBegin(LRU_ITEM_FIELD_DESC);
          struct.lruItem.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class storeWebEntity_argsTupleSchemeFactory implements SchemeFactory {
      public storeWebEntity_argsTupleScheme getScheme() {
        return new storeWebEntity_argsTupleScheme();
      }
    }

    private static class storeWebEntity_argsTupleScheme extends TupleScheme<storeWebEntity_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, storeWebEntity_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLruItem()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLruItem()) {
          struct.lruItem.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, storeWebEntity_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.lruItem = new LRUItem();
          struct.lruItem.read(iprot);
          struct.setLruItemIsSet(true);
        }
      }
    }

  }

  public static class storeWebEntity_result implements org.apache.thrift.TBase<storeWebEntity_result, storeWebEntity_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("storeWebEntity_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new storeWebEntity_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new storeWebEntity_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(storeWebEntity_result.class, metaDataMap);
    }

    public storeWebEntity_result() {
    }

    public storeWebEntity_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public storeWebEntity_result(storeWebEntity_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public storeWebEntity_result deepCopy() {
      return new storeWebEntity_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public storeWebEntity_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof storeWebEntity_result)
        return this.equals((storeWebEntity_result)that);
      return false;
    }

    public boolean equals(storeWebEntity_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(storeWebEntity_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      storeWebEntity_result typedOther = (storeWebEntity_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("storeWebEntity_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class storeWebEntity_resultStandardSchemeFactory implements SchemeFactory {
      public storeWebEntity_resultStandardScheme getScheme() {
        return new storeWebEntity_resultStandardScheme();
      }
    }

    private static class storeWebEntity_resultStandardScheme extends StandardScheme<storeWebEntity_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, storeWebEntity_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, storeWebEntity_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class storeWebEntity_resultTupleSchemeFactory implements SchemeFactory {
      public storeWebEntity_resultTupleScheme getScheme() {
        return new storeWebEntity_resultTupleScheme();
      }
    }

    private static class storeWebEntity_resultTupleScheme extends TupleScheme<storeWebEntity_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, storeWebEntity_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, storeWebEntity_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
