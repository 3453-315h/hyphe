var hyphen = {	test:function(){									// Edit code here if you want to test some things		//hyphen.unit_testing.core_get_web_entities();		//hyphen.unit_testing.core_declare_web_entity();		//hyphen.unit_testing.core_web_entity_set_status();		//hyphen.unit_testing.tokenize_url();		//hyphen.unit_testing.rebuild_lru();	},				unit_testing:{										// Use these functions to check and diagnose functionnalities		core_get_web_entities:function(){			hyphen.io.core.setServer("http://lrrr.medialab.sciences-po.fr:8080");			hyphen.io.core.call("getWebEntities", [], function(result){				hyphen.unit_testing.reportSuccess("core_get_web_entities", JSON.stringify(result));			});		},		core_declare_web_entity:function(){			hyphen.io.core.setServer("http://lrrr.medialab.sciences-po.fr:8080");			hyphen.io.core.call("declareWebEntity", ["s:http|t:80|h:fr|h:sciences-po|h:medialab|h:jiminy|p:hci|p:index.php|q:title=Reverse_URLs|f:bottom", 5], function(result){				hyphen.unit_testing.reportSuccess("core_declare_web_entity", JSON.stringify(result));			});		},		core_web_entity_set_status:function(){			hyphen.io.core.setServer("http://lrrr.medialab.sciences-po.fr:8080");			hyphen.io.core.call("WebEntity.setStatus", ["s:http|t:80|h:fr|h:sciences-po|h:medialab", "included"], function(result){				hyphen.unit_testing.reportSuccess("core_web_entity_set_status", JSON.stringify(result));			});		},		tokenize_url:function(){			var url =				"http://jiminy.medialab.sciences-po.fr/hci/index.php?title=Reverse_URLs#bottom";			var lru_to_match =		"s:http|t:80|h:fr|h:sciences-po|h:medialab|h:jiminy|p:hci|p:index.php|q:title=Reverse_URLs|f:bottom";			var lru = hyphen.utils.tokenizeURL(url);			if(lru == lru_to_match){				hyphen.unit_testing.reportSuccess("tokenize_url", "");			} else {				hyphen.unit_testing.reportFailure("tokenize_url", lru);			}		},		rebuild_lru:function(){			var lru =				"s:http|t:80|h:fr|h:sciences-po|h:medialab|h:jiminy|p:hci|p:index.php|q:title=Reverse_URLs|f:bottom";			var url_to_match =		"http://jiminy.medialab.sciences-po.fr/hci/index.php?title=Reverse_URLs#bottom";			var url = hyphen.utils.rebuildLRU(lru);			if(url == url_to_match){				hyphen.unit_testing.reportSuccess("rebuild_lru", "");			} else {				hyphen.unit_testing.reportFailure("rebuild_lru", url);			}		},		report:function(method, message){			alert("### UNIT TESTING ###\n["+method+"]\n\n- - - Report - - -\n\n\n"+message);		},		reportSuccess:function(method, message){			alert("### UNIT TESTING ###\n["+method+"]\n\n' * ¤ Congratulations ¤ * '\n         Test successful\n\n\n"+message);		},		reportFailure:function(method, message){			alert("### UNIT TESTING ###\n["+method+"]\n\n/!\\/!\\/!\\   FAIL   /!\\/!\\/!\\\n\n\n"+message);		},	},				status:{											// Active / Inactive status		active:false,		toggle:function(){			if(hyphen.status.active){				hyphen.status.disable();			} else {				hyphen.status.enable();			}		},		enable:function(){			hyphen.status.active = true;			hyphen.ui.panel.uncollapse();			hyphen.ui.toolbar.uncollapse();			hyphen.ui.icon.setActive();		},		disable:function(){			hyphen.status.active = false;			hyphen.ui.panel.collapse();			hyphen.ui.toolbar.collapse();			hyphen.ui.icon.setInactive();		}	},				actions:{											// Typically, functions called when you push a button		declareWebEntity:function(lru, flagRank){			var taskKey = "declareWebEntity - "+lru+" - "+flagRank;			if(hyphen.ui.notifications.addPendingTask(taskKey, hyphen.ui.messages.actions.declareEntity)){				hyphen.io.core.call("declareWebEntity", [lru, flagRank], function(result){					hyphen.ui.notifications.resolvePendingTask(taskKey);					hyphen.ui.updateWebEntities();				});			} else {				hyphen.ui.notifications.simpleNotification(					hyphen.ui.messages.taskConcurrency.replace("[task]", taskKey)				);			}		},		crawlWebEntity:function(lru){			var taskKey = "crawlWebEntity - "+lru;			if(hyphen.ui.notifications.addPendingTask(taskKey, {				pending:	hyphen.ui.messages.actions.crawlWebEntity.pending.replace("[webentity]", hyphen.utils.rebuildLRU(lru)),				resolve:	hyphen.ui.messages.actions.crawlWebEntity.resolve.replace("[webentity]", hyphen.utils.rebuildLRU(lru))			})){				hyphen.io.core.call("crawl", [lru], function(result){					hyphen.ui.notifications.resolvePendingTask(taskKey);					hyphen.ui.updateWebEntities();				});			} else {				hyphen.ui.notifications.simpleNotification(					hyphen.ui.messages.taskConcurrency.replace("[task]", taskKey)				);			}		}	},				ui:{												// User Interface		icon:{											// The bottom-left icon			setActive:function(){				document.getElementById("HyphenStatusIcon").setAttribute("class", "active");			},			setInactive:function(){				document.getElementById("HyphenStatusIcon").setAttribute("class", "inactive");			}		},		panel:{											// Manage the main panel of Hyphen (bottom)			collapse:function(){				var panel = document.getElementById("HyphenContentBox");				panel.setAttribute("collapsed", "true");				var splitter = document.getElementById("HyphenContentSplitter");				splitter.setAttribute("collapsed", "true");			},			uncollapse:function(){				var panel = document.getElementById("HyphenContentBox");				panel.setAttribute("collapsed", "false");				var splitter = document.getElementById("HyphenContentSplitter");				splitter.setAttribute("collapsed", "false");			}		},		toolbar:{										// Manage the menubar of Hyphen (top)			collapse:function(){				var tb = document.getElementById("hyphen-toolbar");				tb.setAttribute("collapsed", "true");			},			uncollapse:function(){				var tb = document.getElementById("hyphen-toolbar");				tb.setAttribute("collapsed", "false");			}		},		updateWebEntities:function(){								hyphen.io.core.call("getWebEntities", [], function(result){				const XUL_NS = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";				var panel = document.getElementById("tabpanelWebEntity");				var lb = document.createElementNS(XUL_NS, "listbox");				panel.appendChild(lb);				for(entityLRU in result[0]){					var li = document.createElementNS(XUL_NS, "listitem");					li.setAttribute("label", result[0][entityLRU].url);					lb.appendChild(li);				}			});		},		notifications:{									// Message notification process			flashDuration:100,			messageDuration:1500,			pendingNotifications:{},							// Pending Task Model: {key:"erase item 123", timestamp:"Date", messages:{pending:"This is pending", resolve:"This is resolved", aborted:"Aborted"}}			addPendingTask:function(key, messagesObject){				if(Object.keys(hyphen.ui.notifications.pendingNotifications).indexOf(key) < 0){														// The key is new: good ^^					var now = new Date();					hyphen.ui.notifications.pendingNotifications[key] = {key:key, timestamp:now, messages:messagesObject};					hyphen.ui.notifications.notifyOngoingTask(key, messagesObject.pending);										return true;				} else {								// The key exists: bad...					return false;				}			},			resolvePendingTask:function(key){				hyphen.ui.notifications.closeOngoingTask(key, hyphen.ui.notifications.pendingNotifications[key].messages.resolve);				hyphen.utils.removeByKey(hyphen.ui.notifications.pendingNotifications, key);			},			notifyOngoingTask:function(key, message){				//window.dump("Ongoing Task Notification: "+message+ "(OTN key: "+key+")\n");				const XUL_NS = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";				var container = document.getElementById("notifications");								var notification = document.createElementNS(XUL_NS, "hbox");				notification.setAttribute("id", hex_md5(key));				notification.setAttribute("style", "background-color:#FF3;");								var label = document.createElementNS(XUL_NS, "label");				label.setAttribute("flex", "1");				label.setAttribute("value", message);				notification.appendChild(label);								var button = document.createElementNS(XUL_NS, "button");				button.setAttribute("flex", "0");				button.setAttribute("label", "Close");				notification.appendChild(button);								container.appendChild(notification);								var spacer = document.createElementNS(XUL_NS, "spacer");				spacer.setAttribute("flex", "1");				container.appendChild(spacer);								setTimeout(function(){					// End of the flash: a softer style					notification.setAttribute("style", "background-color:#FF9;");				}, hyphen.ui.notifications.flashDuration);			},			updateOngoingTask:function(key, message){				//window.dump("Ongoing Task Notification: "+message+ "(OTN key: "+key+")\n");				const XUL_NS = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";				var notification = document.getElementById(hex_md5(key));				notification.setAttribute("style", "background-color:#FF3;");								hyphen.utils.domClear(notification);								var label = document.createElementNS(XUL_NS, "label");				label.setAttribute("flex", "1");				label.setAttribute("value", message);				notification.appendChild(label);								var button = document.createElementNS(XUL_NS, "button");				button.setAttribute("flex", "0");				button.setAttribute("label", "Close");				notification.appendChild(button);								container.appendChild(notification);								var spacer = document.createElementNS(XUL_NS, "spacer");				spacer.setAttribute("flex", "1");				container.appendChild(spacer);								setTimeout(function(){					// End of the flash: a softer style					notification.setAttribute("style", "background-color:#FF9;");				}, hyphen.ui.notifications.flashDuration);			},			closeOngoingTask:function(key, message){				//window.dump("Close Ongoing Task Notification of key: "+key+"\n");				const XUL_NS = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";				var notification = document.getElementById(hex_md5(key));				notification.setAttribute("style", "background-color:#FF3;");								hyphen.utils.domClear(notification);								var label = document.createElementNS(XUL_NS, "label");				label.setAttribute("flex", "1");				label.setAttribute("value", message);				notification.appendChild(label);								setTimeout(function(){					// End of the flash: a softer style					notification.setAttribute("style", "background-color:#FF9;");				}, hyphen.ui.notifications.flashDuration);								setTimeout(function(){					// Fading away...					notification.setAttribute("style", "background-color:#FFC; color:#999;");				}, hyphen.ui.notifications.messageDuration-hyphen.ui.notifications.flashDuration);														// Disappearing of the notification				var id = notification.getAttribute("id");				setTimeout(function(){					var n = document.getElementById(id);					if(n != undefined){						hyphen.utils.domClear(n);						n.parentNode.removeChild(n);					}				}, hyphen.ui.notifications.messageDuration);							},			simpleNotification:function(message){				//window.dump("Instant Task Notification: "+message+"\n");				const XUL_NS = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";				var container = document.getElementById("notifications");								var notification = document.createElementNS(XUL_NS, "hbox");				notification.setAttribute("id", hex_md5(message));				notification.setAttribute("style", "background-color:#FFA;");								var label = document.createElementNS(XUL_NS, "label");				label.setAttribute("flex", "1");				label.setAttribute("value", message);				notification.appendChild(label);								setTimeout(function(){					// End of the flash: a softer style					notification.setAttribute("style", "background-color:#FFC;");				}, hyphen.ui.notifications.flashDuration);								setTimeout(function(){					// Fading away...					notification.setAttribute("style", "background-color:#FFD; color:#999;");				}, hyphen.ui.notifications.messageDuration-hyphen.ui.notifications.flashDuration);														// Disappearing of the notification				var id = notification.getAttribute("id");				setTimeout(function(){					var n = document.getElementById(id);					if(n != undefined){						hyphen.utils.domClear(n);						n.parentNode.removeChild(n);					}				}, hyphen.ui.notifications.messageDuration);			}		},		messages:{										// Gathers the different messages used by the UI			taskConcurrency:"Task '[task]' already exists !!!",			actions:{				declareEntity:{					pending:"Declare a new Web Entity...",					resolve:"Web entity declared successfully"				},				crawlWebEntity:{					pending:"Launching the crawl of '[webentity]'...",					resolve:"'[webentity]' crawl launched !"				}			}		}	},				io:{												// Inputs and outputs		core:{											// Communicating with the core			serverURL:"",			queriesCounter:0,			setServer:function(serverURL){				// Define the server hosting the core				this.serverURL = serverURL;			},														// Call a procedure (to the core)			call:function(method, params, callback_function){				var query = JSON.stringify({			// It's JSON RPC					"method" : method,					"params" : params,					"id" : this.queriesCounter++				});								var rpc_xhr = new XMLHttpRequest();		// Classic Ajax code				rpc_xhr.onreadystatechange = function () {					if (rpc_xhr.readyState == 4 && rpc_xhr.status == 200) {						callback_function(eval('('+rpc_xhr.responseText+')'));					}				}				rpc_xhr.open("POST", this.serverURL, true);				rpc_xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");				rpc_xhr.send(query);			}		}	},			utils:{												// Misc functions		removeByKey:function(object, key){			var result = {};			for(k in object){				if(k != key){					result[k] = object[k];				}			}			return result;		},		tokenizeURL:function(url){						// URL		->	LRU			return hyphen.utils.serialize_JSON_LRU(hyphen.utils.tokenizeURL_JSON(url)); 		},		serialize_JSON_LRU:function(json_lru){			// jsonLRU	->	LRU			var lru = "s:" + json_lru.scheme + "|t:" + json_lru.port;			json_lru.host.forEach(function(h){lru += "|h:"+h;});			json_lru["path"].forEach(function(p){lru += "|p:"+p;});			lru += "|q:" + json_lru.query + "|f:" + json_lru.fragment;			return lru;		},		tokenizeURL_JSON:function(URL){					// URL		->	jsonLRU			var LRU,				regex = /^([^:\/?#]+):(?:\/\/([^/?#]*))?([^?#]*)(?:\?([^#]*))?(?:#(.*))?$/;						if (URL.match(regex)) {					var scheme = RegExp.$1,					authority = RegExp.$2,					path = RegExp.$3,					query = RegExp.$4,					fragment = RegExp.$5;				if (scheme.match(/https?/) && authority.match(/^(?:([^:]+)(?::([^@]+))?\@)?([^\s:]+)(?::(\d+))?$/)) {					var user = RegExp.$1,						password = RegExp.$2,						host = RegExp.$3,						port = RegExp.$4;										host = host.split(/\./);					if (host[0].toLowerCase().match(/w{3}/)){						host.shift(); 					}										LRU = {						"scheme": scheme,						"port": (port) ? port : "80",						"host": host.reverse(),						"path": path.split(/\//).filter(function(pathToken) pathToken.length),   						"query": query,						"fragment": fragment					};				}			}			return LRU;		},		rebuildLRU:function(lru){						// LRU		->	URL			return hyphen.utils.rebuildLRU_JSON(hyphen.utils.objectify_LRU_JSON(lru)); 		},		objectify_LRU_JSON:function(lru){				// LRU		->	jsonLRU			var lru_array = lru.split("|");			var json_lru = {scheme:"", port:"", host:[], path:[], query:"", fragment:""};			lru_array.forEach(function(stem){				var type = stem.substr(0, 1);				var name = stem.substr(2, stem.length - 2);				if(type=="s"){					json_lru.scheme = name;				} else if(type=="t"){					json_lru.port = name;				} else if(type=="h"){					json_lru.host.push(name);				} else if(type=="p"){					json_lru.path.push(name);				} else if(type=="q"){					json_lru.query = name;				} else if(type=="f"){					json_lru.fragment = name;				}			});			return json_lru;		},		rebuildLRU_JSON:function(json_lru){				// jsonLRU	->	URL			var scheme		= "",				hosts		= "",				port		= "",				path		= "",				query		= "",				fragment	= "";						if(json_lru.scheme != undefined && json_lru.scheme.length>0){				scheme = json_lru.scheme+"://";			} else {				scheme = "http://";			}						if(json_lru.host != undefined && json_lru.host.length>0){				json_lru.host.forEach(function(h){					hosts = "."+h+hosts;				});				hosts = hosts.substr(1, hosts.length);			}						if(json_lru.path != undefined && json_lru.path.length>0){				json_lru.path.forEach(function(p){					path = path+"/"+p;				});			}						if(json_lru.query != undefined && json_lru.query.length>0){				query = "?"+json_lru.query;			}						if(json_lru.fragment != undefined && json_lru.fragment.length>0){				fragment = "#"+json_lru.fragment;			}						if(json_lru.port != undefined && json_lru.port!="80"){				port = ":"+json_lru.port;			}						return scheme+hosts+port+path+query+fragment;		},		domClear:function(anElement){					// Clears a dom element			if(anElement != undefined){				while(anElement.childNodes.length>0){					this.domClear(anElement.firstChild);					anElement.removeChild(anElement.firstChild);				}			}		}	}}